'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.8000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("pvtaDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class pvtaDataSet
    Inherits Global.System.Data.DataSet
    
    Private tablesp_detalle_rec As sp_detalle_recDataTable
    
    Private tablesp_edocta_detalle As sp_edocta_detalleDataTable
    
    Private tablesp_edocta_enc As sp_edocta_encDataTable
    
    Private tablesp_edoprv_detalle As sp_edoprv_detalleDataTable
    
    Private tablesp_edoprv_enc As sp_edoprv_encDataTable
    
    Private tablesp_muestra_lote As sp_muestra_loteDataTable
    
    Private tablesp_rep_lista As sp_rep_listaDataTable
    
    Private tablesp_rep_rango As sp_rep_rangoDataTable
    
    Private tablesp_rep_precios As sp_rep_preciosDataTable
    
    Private tablesp_rep_ingreso As sp_rep_ingresoDataTable
    
    Private tablesp_rep_detalle_ingreso As sp_rep_detalle_ingresoDataTable
    
    Private tablesp_logo_compania As sp_logo_companiaDataTable
    
    Private tablesp_recupera_publicidad As sp_recupera_publicidadDataTable
    
    Private tablesp_encabezado_rec As sp_encabezado_recDataTable
    
    Private tablesp_detalle_transferencia As sp_detalle_transferenciaDataTable
    
    Private tablesp_referencia_factura As sp_referencia_facturaDataTable
    
    Private tablesp_rep_detalle_ubcing As sp_rep_detalle_ubcingDataTable
    
    Private tablesp_busca_prod_ubc As sp_busca_prod_ubcDataTable
    
    Private tablesp_rep_uba As sp_rep_ubaDataTable
    
    Private tablesp_sello_fac As sp_sello_facDataTable
    
    Private tablesp_sello_nc As sp_sello_ncDataTable
    
    Private tablesp_encabezado_nc As sp_encabezado_ncDataTable
    
    Private tablesp_impuestos_fac As sp_impuestos_facDataTable
    
    Private tablesp_nc_impuestos As sp_nc_impuestosDataTable
    
    Private tablesp_metodopago_fac As sp_metodopago_facDataTable
    
    Private tablesp_metodopago_nc As sp_metodopago_ncDataTable
    
    Private tablesp_liq_general As sp_liq_generalDataTable
    
    Private tablesp_liq_corte As sp_liq_corteDataTable
    
    Private tablesp_liq_pagos As sp_liq_pagosDataTable
    
    Private tablesp_movimientos_liq As sp_movimientos_liqDataTable
    
    Private tablesp_liq_comision_prod As sp_liq_comision_prodDataTable
    
    Private tablesp_liq_comision_vta As sp_liq_comision_vtaDataTable
    
    Private tablesp_detalle_fac As sp_detalle_facDataTable
    
    Private tablesp_nc_detalle As sp_nc_detalleDataTable
    
    Private tablesp_encabezado_fac As sp_encabezado_facDataTable
    
    Private tablesp_recupera_incapacidad As sp_recupera_incapacidadDataTable
    
    Private tablesp_recupera_horasextra As sp_recupera_horasextraDataTable
    
    Private tablesp_recupera_percepciones As sp_recupera_percepcionesDataTable
    
    Private tablesp_recupera_deducciones As sp_recupera_deduccionesDataTable
    
    Private tablesp_recupera_empleadoREC As sp_recupera_empleadoRECDataTable
    
    Private tablesp_encabezado_reciboNomina As sp_encabezado_reciboNominaDataTable
    
    Private tablesp_obtener_surtidodetalle As sp_obtener_surtidodetalleDataTable
    
    Private tablesp_obtener_envio As sp_obtener_envioDataTable
    
    Private tablesp_encabezado_cargo As sp_encabezado_cargoDataTable
    
    Private tablesp_detalle_cargo As sp_detalle_cargoDataTable
    
    Private tablesp_impuestos_cargo As sp_impuestos_cargoDataTable
    
    Private tablesp_sello_cargo As sp_sello_cargoDataTable
    
    Private tablesp_metodopago_cargo As sp_metodopago_cargoDataTable
    
    Private tablesp_encabezado_dev As sp_encabezado_devDataTable
    
    Private tablesp_devolucion_det As sp_devolucion_detDataTable
    
    Private tablesp_detalle_traslado As sp_detalle_trasladoDataTable
    
    Private tablesp_encabezado_surtido As sp_encabezado_surtidoDataTable
    
    Private tablesp_detalle_orden As sp_detalle_ordenDataTable
    
    Private tablesp_recupera_orden As sp_recupera_ordenDataTable
    
    Private tablesp_rep_orden As sp_rep_ordenDataTable
    
    Private tablesp_rep_transferencia As sp_rep_transferenciaDataTable
    
    Private tablesp_rep_traslado As sp_rep_trasladoDataTable
    
    Private tablesp_encabezado_ped As sp_encabezado_pedDataTable
    
    Private tablesp_detalle_ped As sp_detalle_pedDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("sp_detalle_rec")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_recDataTable(ds.Tables("sp_detalle_rec")))
            End If
            If (Not (ds.Tables("sp_edocta_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edocta_detalleDataTable(ds.Tables("sp_edocta_detalle")))
            End If
            If (Not (ds.Tables("sp_edocta_enc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edocta_encDataTable(ds.Tables("sp_edocta_enc")))
            End If
            If (Not (ds.Tables("sp_edoprv_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edoprv_detalleDataTable(ds.Tables("sp_edoprv_detalle")))
            End If
            If (Not (ds.Tables("sp_edoprv_enc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edoprv_encDataTable(ds.Tables("sp_edoprv_enc")))
            End If
            If (Not (ds.Tables("sp_muestra_lote")) Is Nothing) Then
                MyBase.Tables.Add(New sp_muestra_loteDataTable(ds.Tables("sp_muestra_lote")))
            End If
            If (Not (ds.Tables("sp_rep_lista")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_listaDataTable(ds.Tables("sp_rep_lista")))
            End If
            If (Not (ds.Tables("sp_rep_rango")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_rangoDataTable(ds.Tables("sp_rep_rango")))
            End If
            If (Not (ds.Tables("sp_rep_precios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_preciosDataTable(ds.Tables("sp_rep_precios")))
            End If
            If (Not (ds.Tables("sp_rep_ingreso")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ingresoDataTable(ds.Tables("sp_rep_ingreso")))
            End If
            If (Not (ds.Tables("sp_rep_detalle_ingreso")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_detalle_ingresoDataTable(ds.Tables("sp_rep_detalle_ingreso")))
            End If
            If (Not (ds.Tables("sp_logo_compania")) Is Nothing) Then
                MyBase.Tables.Add(New sp_logo_companiaDataTable(ds.Tables("sp_logo_compania")))
            End If
            If (Not (ds.Tables("sp_recupera_publicidad")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_publicidadDataTable(ds.Tables("sp_recupera_publicidad")))
            End If
            If (Not (ds.Tables("sp_encabezado_rec")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_recDataTable(ds.Tables("sp_encabezado_rec")))
            End If
            If (Not (ds.Tables("sp_detalle_transferencia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_transferenciaDataTable(ds.Tables("sp_detalle_transferencia")))
            End If
            If (Not (ds.Tables("sp_referencia_factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_referencia_facturaDataTable(ds.Tables("sp_referencia_factura")))
            End If
            If (Not (ds.Tables("sp_rep_detalle_ubcing")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_detalle_ubcingDataTable(ds.Tables("sp_rep_detalle_ubcing")))
            End If
            If (Not (ds.Tables("sp_busca_prod_ubc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_busca_prod_ubcDataTable(ds.Tables("sp_busca_prod_ubc")))
            End If
            If (Not (ds.Tables("sp_rep_uba")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ubaDataTable(ds.Tables("sp_rep_uba")))
            End If
            If (Not (ds.Tables("sp_sello_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_facDataTable(ds.Tables("sp_sello_fac")))
            End If
            If (Not (ds.Tables("sp_sello_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_ncDataTable(ds.Tables("sp_sello_nc")))
            End If
            If (Not (ds.Tables("sp_encabezado_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_ncDataTable(ds.Tables("sp_encabezado_nc")))
            End If
            If (Not (ds.Tables("sp_impuestos_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_impuestos_facDataTable(ds.Tables("sp_impuestos_fac")))
            End If
            If (Not (ds.Tables("sp_nc_impuestos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_nc_impuestosDataTable(ds.Tables("sp_nc_impuestos")))
            End If
            If (Not (ds.Tables("sp_metodopago_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_facDataTable(ds.Tables("sp_metodopago_fac")))
            End If
            If (Not (ds.Tables("sp_metodopago_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_ncDataTable(ds.Tables("sp_metodopago_nc")))
            End If
            If (Not (ds.Tables("sp_liq_general")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_generalDataTable(ds.Tables("sp_liq_general")))
            End If
            If (Not (ds.Tables("sp_liq_corte")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_corteDataTable(ds.Tables("sp_liq_corte")))
            End If
            If (Not (ds.Tables("sp_liq_pagos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_pagosDataTable(ds.Tables("sp_liq_pagos")))
            End If
            If (Not (ds.Tables("sp_movimientos_liq")) Is Nothing) Then
                MyBase.Tables.Add(New sp_movimientos_liqDataTable(ds.Tables("sp_movimientos_liq")))
            End If
            If (Not (ds.Tables("sp_liq_comision_prod")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_comision_prodDataTable(ds.Tables("sp_liq_comision_prod")))
            End If
            If (Not (ds.Tables("sp_liq_comision_vta")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_comision_vtaDataTable(ds.Tables("sp_liq_comision_vta")))
            End If
            If (Not (ds.Tables("sp_detalle_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_facDataTable(ds.Tables("sp_detalle_fac")))
            End If
            If (Not (ds.Tables("sp_nc_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_nc_detalleDataTable(ds.Tables("sp_nc_detalle")))
            End If
            If (Not (ds.Tables("sp_encabezado_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_facDataTable(ds.Tables("sp_encabezado_fac")))
            End If
            If (Not (ds.Tables("sp_recupera_incapacidad")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_incapacidadDataTable(ds.Tables("sp_recupera_incapacidad")))
            End If
            If (Not (ds.Tables("sp_recupera_horasextra")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_horasextraDataTable(ds.Tables("sp_recupera_horasextra")))
            End If
            If (Not (ds.Tables("sp_recupera_percepciones")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_percepcionesDataTable(ds.Tables("sp_recupera_percepciones")))
            End If
            If (Not (ds.Tables("sp_recupera_deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_deduccionesDataTable(ds.Tables("sp_recupera_deducciones")))
            End If
            If (Not (ds.Tables("sp_recupera_empleadoREC")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_empleadoRECDataTable(ds.Tables("sp_recupera_empleadoREC")))
            End If
            If (Not (ds.Tables("sp_encabezado_reciboNomina")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_reciboNominaDataTable(ds.Tables("sp_encabezado_reciboNomina")))
            End If
            If (Not (ds.Tables("sp_obtener_surtidodetalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_obtener_surtidodetalleDataTable(ds.Tables("sp_obtener_surtidodetalle")))
            End If
            If (Not (ds.Tables("sp_obtener_envio")) Is Nothing) Then
                MyBase.Tables.Add(New sp_obtener_envioDataTable(ds.Tables("sp_obtener_envio")))
            End If
            If (Not (ds.Tables("sp_encabezado_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_cargoDataTable(ds.Tables("sp_encabezado_cargo")))
            End If
            If (Not (ds.Tables("sp_detalle_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_cargoDataTable(ds.Tables("sp_detalle_cargo")))
            End If
            If (Not (ds.Tables("sp_impuestos_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_impuestos_cargoDataTable(ds.Tables("sp_impuestos_cargo")))
            End If
            If (Not (ds.Tables("sp_sello_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_cargoDataTable(ds.Tables("sp_sello_cargo")))
            End If
            If (Not (ds.Tables("sp_metodopago_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_cargoDataTable(ds.Tables("sp_metodopago_cargo")))
            End If
            If (Not (ds.Tables("sp_encabezado_dev")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_devDataTable(ds.Tables("sp_encabezado_dev")))
            End If
            If (Not (ds.Tables("sp_devolucion_det")) Is Nothing) Then
                MyBase.Tables.Add(New sp_devolucion_detDataTable(ds.Tables("sp_devolucion_det")))
            End If
            If (Not (ds.Tables("sp_detalle_traslado")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_trasladoDataTable(ds.Tables("sp_detalle_traslado")))
            End If
            If (Not (ds.Tables("sp_encabezado_surtido")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_surtidoDataTable(ds.Tables("sp_encabezado_surtido")))
            End If
            If (Not (ds.Tables("sp_detalle_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_ordenDataTable(ds.Tables("sp_detalle_orden")))
            End If
            If (Not (ds.Tables("sp_recupera_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_ordenDataTable(ds.Tables("sp_recupera_orden")))
            End If
            If (Not (ds.Tables("sp_rep_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ordenDataTable(ds.Tables("sp_rep_orden")))
            End If
            If (Not (ds.Tables("sp_rep_transferencia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_transferenciaDataTable(ds.Tables("sp_rep_transferencia")))
            End If
            If (Not (ds.Tables("sp_rep_traslado")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_trasladoDataTable(ds.Tables("sp_rep_traslado")))
            End If
            If (Not (ds.Tables("sp_encabezado_ped")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_pedDataTable(ds.Tables("sp_encabezado_ped")))
            End If
            If (Not (ds.Tables("sp_detalle_ped")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_pedDataTable(ds.Tables("sp_detalle_ped")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_rec() As sp_detalle_recDataTable
        Get
            Return Me.tablesp_detalle_rec
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_edocta_detalle() As sp_edocta_detalleDataTable
        Get
            Return Me.tablesp_edocta_detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_edocta_enc() As sp_edocta_encDataTable
        Get
            Return Me.tablesp_edocta_enc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_edoprv_detalle() As sp_edoprv_detalleDataTable
        Get
            Return Me.tablesp_edoprv_detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_edoprv_enc() As sp_edoprv_encDataTable
        Get
            Return Me.tablesp_edoprv_enc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_muestra_lote() As sp_muestra_loteDataTable
        Get
            Return Me.tablesp_muestra_lote
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_lista() As sp_rep_listaDataTable
        Get
            Return Me.tablesp_rep_lista
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_rango() As sp_rep_rangoDataTable
        Get
            Return Me.tablesp_rep_rango
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_precios() As sp_rep_preciosDataTable
        Get
            Return Me.tablesp_rep_precios
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_ingreso() As sp_rep_ingresoDataTable
        Get
            Return Me.tablesp_rep_ingreso
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_detalle_ingreso() As sp_rep_detalle_ingresoDataTable
        Get
            Return Me.tablesp_rep_detalle_ingreso
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_logo_compania() As sp_logo_companiaDataTable
        Get
            Return Me.tablesp_logo_compania
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_publicidad() As sp_recupera_publicidadDataTable
        Get
            Return Me.tablesp_recupera_publicidad
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_rec() As sp_encabezado_recDataTable
        Get
            Return Me.tablesp_encabezado_rec
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_transferencia() As sp_detalle_transferenciaDataTable
        Get
            Return Me.tablesp_detalle_transferencia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_referencia_factura() As sp_referencia_facturaDataTable
        Get
            Return Me.tablesp_referencia_factura
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_detalle_ubcing() As sp_rep_detalle_ubcingDataTable
        Get
            Return Me.tablesp_rep_detalle_ubcing
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_busca_prod_ubc() As sp_busca_prod_ubcDataTable
        Get
            Return Me.tablesp_busca_prod_ubc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_uba() As sp_rep_ubaDataTable
        Get
            Return Me.tablesp_rep_uba
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_sello_fac() As sp_sello_facDataTable
        Get
            Return Me.tablesp_sello_fac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_sello_nc() As sp_sello_ncDataTable
        Get
            Return Me.tablesp_sello_nc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_nc() As sp_encabezado_ncDataTable
        Get
            Return Me.tablesp_encabezado_nc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_impuestos_fac() As sp_impuestos_facDataTable
        Get
            Return Me.tablesp_impuestos_fac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_nc_impuestos() As sp_nc_impuestosDataTable
        Get
            Return Me.tablesp_nc_impuestos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_metodopago_fac() As sp_metodopago_facDataTable
        Get
            Return Me.tablesp_metodopago_fac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_metodopago_nc() As sp_metodopago_ncDataTable
        Get
            Return Me.tablesp_metodopago_nc
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_liq_general() As sp_liq_generalDataTable
        Get
            Return Me.tablesp_liq_general
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_liq_corte() As sp_liq_corteDataTable
        Get
            Return Me.tablesp_liq_corte
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_liq_pagos() As sp_liq_pagosDataTable
        Get
            Return Me.tablesp_liq_pagos
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_movimientos_liq() As sp_movimientos_liqDataTable
        Get
            Return Me.tablesp_movimientos_liq
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_liq_comision_prod() As sp_liq_comision_prodDataTable
        Get
            Return Me.tablesp_liq_comision_prod
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_liq_comision_vta() As sp_liq_comision_vtaDataTable
        Get
            Return Me.tablesp_liq_comision_vta
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_fac() As sp_detalle_facDataTable
        Get
            Return Me.tablesp_detalle_fac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_nc_detalle() As sp_nc_detalleDataTable
        Get
            Return Me.tablesp_nc_detalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_fac() As sp_encabezado_facDataTable
        Get
            Return Me.tablesp_encabezado_fac
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_incapacidad() As sp_recupera_incapacidadDataTable
        Get
            Return Me.tablesp_recupera_incapacidad
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_horasextra() As sp_recupera_horasextraDataTable
        Get
            Return Me.tablesp_recupera_horasextra
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_percepciones() As sp_recupera_percepcionesDataTable
        Get
            Return Me.tablesp_recupera_percepciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_deducciones() As sp_recupera_deduccionesDataTable
        Get
            Return Me.tablesp_recupera_deducciones
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_empleadoREC() As sp_recupera_empleadoRECDataTable
        Get
            Return Me.tablesp_recupera_empleadoREC
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_reciboNomina() As sp_encabezado_reciboNominaDataTable
        Get
            Return Me.tablesp_encabezado_reciboNomina
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_obtener_surtidodetalle() As sp_obtener_surtidodetalleDataTable
        Get
            Return Me.tablesp_obtener_surtidodetalle
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_obtener_envio() As sp_obtener_envioDataTable
        Get
            Return Me.tablesp_obtener_envio
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_cargo() As sp_encabezado_cargoDataTable
        Get
            Return Me.tablesp_encabezado_cargo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_cargo() As sp_detalle_cargoDataTable
        Get
            Return Me.tablesp_detalle_cargo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_impuestos_cargo() As sp_impuestos_cargoDataTable
        Get
            Return Me.tablesp_impuestos_cargo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_sello_cargo() As sp_sello_cargoDataTable
        Get
            Return Me.tablesp_sello_cargo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_metodopago_cargo() As sp_metodopago_cargoDataTable
        Get
            Return Me.tablesp_metodopago_cargo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_dev() As sp_encabezado_devDataTable
        Get
            Return Me.tablesp_encabezado_dev
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_devolucion_det() As sp_devolucion_detDataTable
        Get
            Return Me.tablesp_devolucion_det
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_traslado() As sp_detalle_trasladoDataTable
        Get
            Return Me.tablesp_detalle_traslado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_surtido() As sp_encabezado_surtidoDataTable
        Get
            Return Me.tablesp_encabezado_surtido
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_orden() As sp_detalle_ordenDataTable
        Get
            Return Me.tablesp_detalle_orden
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_recupera_orden() As sp_recupera_ordenDataTable
        Get
            Return Me.tablesp_recupera_orden
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_orden() As sp_rep_ordenDataTable
        Get
            Return Me.tablesp_rep_orden
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_transferencia() As sp_rep_transferenciaDataTable
        Get
            Return Me.tablesp_rep_transferencia
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_rep_traslado() As sp_rep_trasladoDataTable
        Get
            Return Me.tablesp_rep_traslado
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_encabezado_ped() As sp_encabezado_pedDataTable
        Get
            Return Me.tablesp_encabezado_ped
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property sp_detalle_ped() As sp_detalle_pedDataTable
        Get
            Return Me.tablesp_detalle_ped
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As pvtaDataSet = CType(MyBase.Clone,pvtaDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("sp_detalle_rec")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_recDataTable(ds.Tables("sp_detalle_rec")))
            End If
            If (Not (ds.Tables("sp_edocta_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edocta_detalleDataTable(ds.Tables("sp_edocta_detalle")))
            End If
            If (Not (ds.Tables("sp_edocta_enc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edocta_encDataTable(ds.Tables("sp_edocta_enc")))
            End If
            If (Not (ds.Tables("sp_edoprv_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edoprv_detalleDataTable(ds.Tables("sp_edoprv_detalle")))
            End If
            If (Not (ds.Tables("sp_edoprv_enc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_edoprv_encDataTable(ds.Tables("sp_edoprv_enc")))
            End If
            If (Not (ds.Tables("sp_muestra_lote")) Is Nothing) Then
                MyBase.Tables.Add(New sp_muestra_loteDataTable(ds.Tables("sp_muestra_lote")))
            End If
            If (Not (ds.Tables("sp_rep_lista")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_listaDataTable(ds.Tables("sp_rep_lista")))
            End If
            If (Not (ds.Tables("sp_rep_rango")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_rangoDataTable(ds.Tables("sp_rep_rango")))
            End If
            If (Not (ds.Tables("sp_rep_precios")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_preciosDataTable(ds.Tables("sp_rep_precios")))
            End If
            If (Not (ds.Tables("sp_rep_ingreso")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ingresoDataTable(ds.Tables("sp_rep_ingreso")))
            End If
            If (Not (ds.Tables("sp_rep_detalle_ingreso")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_detalle_ingresoDataTable(ds.Tables("sp_rep_detalle_ingreso")))
            End If
            If (Not (ds.Tables("sp_logo_compania")) Is Nothing) Then
                MyBase.Tables.Add(New sp_logo_companiaDataTable(ds.Tables("sp_logo_compania")))
            End If
            If (Not (ds.Tables("sp_recupera_publicidad")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_publicidadDataTable(ds.Tables("sp_recupera_publicidad")))
            End If
            If (Not (ds.Tables("sp_encabezado_rec")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_recDataTable(ds.Tables("sp_encabezado_rec")))
            End If
            If (Not (ds.Tables("sp_detalle_transferencia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_transferenciaDataTable(ds.Tables("sp_detalle_transferencia")))
            End If
            If (Not (ds.Tables("sp_referencia_factura")) Is Nothing) Then
                MyBase.Tables.Add(New sp_referencia_facturaDataTable(ds.Tables("sp_referencia_factura")))
            End If
            If (Not (ds.Tables("sp_rep_detalle_ubcing")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_detalle_ubcingDataTable(ds.Tables("sp_rep_detalle_ubcing")))
            End If
            If (Not (ds.Tables("sp_busca_prod_ubc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_busca_prod_ubcDataTable(ds.Tables("sp_busca_prod_ubc")))
            End If
            If (Not (ds.Tables("sp_rep_uba")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ubaDataTable(ds.Tables("sp_rep_uba")))
            End If
            If (Not (ds.Tables("sp_sello_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_facDataTable(ds.Tables("sp_sello_fac")))
            End If
            If (Not (ds.Tables("sp_sello_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_ncDataTable(ds.Tables("sp_sello_nc")))
            End If
            If (Not (ds.Tables("sp_encabezado_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_ncDataTable(ds.Tables("sp_encabezado_nc")))
            End If
            If (Not (ds.Tables("sp_impuestos_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_impuestos_facDataTable(ds.Tables("sp_impuestos_fac")))
            End If
            If (Not (ds.Tables("sp_nc_impuestos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_nc_impuestosDataTable(ds.Tables("sp_nc_impuestos")))
            End If
            If (Not (ds.Tables("sp_metodopago_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_facDataTable(ds.Tables("sp_metodopago_fac")))
            End If
            If (Not (ds.Tables("sp_metodopago_nc")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_ncDataTable(ds.Tables("sp_metodopago_nc")))
            End If
            If (Not (ds.Tables("sp_liq_general")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_generalDataTable(ds.Tables("sp_liq_general")))
            End If
            If (Not (ds.Tables("sp_liq_corte")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_corteDataTable(ds.Tables("sp_liq_corte")))
            End If
            If (Not (ds.Tables("sp_liq_pagos")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_pagosDataTable(ds.Tables("sp_liq_pagos")))
            End If
            If (Not (ds.Tables("sp_movimientos_liq")) Is Nothing) Then
                MyBase.Tables.Add(New sp_movimientos_liqDataTable(ds.Tables("sp_movimientos_liq")))
            End If
            If (Not (ds.Tables("sp_liq_comision_prod")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_comision_prodDataTable(ds.Tables("sp_liq_comision_prod")))
            End If
            If (Not (ds.Tables("sp_liq_comision_vta")) Is Nothing) Then
                MyBase.Tables.Add(New sp_liq_comision_vtaDataTable(ds.Tables("sp_liq_comision_vta")))
            End If
            If (Not (ds.Tables("sp_detalle_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_facDataTable(ds.Tables("sp_detalle_fac")))
            End If
            If (Not (ds.Tables("sp_nc_detalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_nc_detalleDataTable(ds.Tables("sp_nc_detalle")))
            End If
            If (Not (ds.Tables("sp_encabezado_fac")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_facDataTable(ds.Tables("sp_encabezado_fac")))
            End If
            If (Not (ds.Tables("sp_recupera_incapacidad")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_incapacidadDataTable(ds.Tables("sp_recupera_incapacidad")))
            End If
            If (Not (ds.Tables("sp_recupera_horasextra")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_horasextraDataTable(ds.Tables("sp_recupera_horasextra")))
            End If
            If (Not (ds.Tables("sp_recupera_percepciones")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_percepcionesDataTable(ds.Tables("sp_recupera_percepciones")))
            End If
            If (Not (ds.Tables("sp_recupera_deducciones")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_deduccionesDataTable(ds.Tables("sp_recupera_deducciones")))
            End If
            If (Not (ds.Tables("sp_recupera_empleadoREC")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_empleadoRECDataTable(ds.Tables("sp_recupera_empleadoREC")))
            End If
            If (Not (ds.Tables("sp_encabezado_reciboNomina")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_reciboNominaDataTable(ds.Tables("sp_encabezado_reciboNomina")))
            End If
            If (Not (ds.Tables("sp_obtener_surtidodetalle")) Is Nothing) Then
                MyBase.Tables.Add(New sp_obtener_surtidodetalleDataTable(ds.Tables("sp_obtener_surtidodetalle")))
            End If
            If (Not (ds.Tables("sp_obtener_envio")) Is Nothing) Then
                MyBase.Tables.Add(New sp_obtener_envioDataTable(ds.Tables("sp_obtener_envio")))
            End If
            If (Not (ds.Tables("sp_encabezado_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_cargoDataTable(ds.Tables("sp_encabezado_cargo")))
            End If
            If (Not (ds.Tables("sp_detalle_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_cargoDataTable(ds.Tables("sp_detalle_cargo")))
            End If
            If (Not (ds.Tables("sp_impuestos_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_impuestos_cargoDataTable(ds.Tables("sp_impuestos_cargo")))
            End If
            If (Not (ds.Tables("sp_sello_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_sello_cargoDataTable(ds.Tables("sp_sello_cargo")))
            End If
            If (Not (ds.Tables("sp_metodopago_cargo")) Is Nothing) Then
                MyBase.Tables.Add(New sp_metodopago_cargoDataTable(ds.Tables("sp_metodopago_cargo")))
            End If
            If (Not (ds.Tables("sp_encabezado_dev")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_devDataTable(ds.Tables("sp_encabezado_dev")))
            End If
            If (Not (ds.Tables("sp_devolucion_det")) Is Nothing) Then
                MyBase.Tables.Add(New sp_devolucion_detDataTable(ds.Tables("sp_devolucion_det")))
            End If
            If (Not (ds.Tables("sp_detalle_traslado")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_trasladoDataTable(ds.Tables("sp_detalle_traslado")))
            End If
            If (Not (ds.Tables("sp_encabezado_surtido")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_surtidoDataTable(ds.Tables("sp_encabezado_surtido")))
            End If
            If (Not (ds.Tables("sp_detalle_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_ordenDataTable(ds.Tables("sp_detalle_orden")))
            End If
            If (Not (ds.Tables("sp_recupera_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_recupera_ordenDataTable(ds.Tables("sp_recupera_orden")))
            End If
            If (Not (ds.Tables("sp_rep_orden")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_ordenDataTable(ds.Tables("sp_rep_orden")))
            End If
            If (Not (ds.Tables("sp_rep_transferencia")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_transferenciaDataTable(ds.Tables("sp_rep_transferencia")))
            End If
            If (Not (ds.Tables("sp_rep_traslado")) Is Nothing) Then
                MyBase.Tables.Add(New sp_rep_trasladoDataTable(ds.Tables("sp_rep_traslado")))
            End If
            If (Not (ds.Tables("sp_encabezado_ped")) Is Nothing) Then
                MyBase.Tables.Add(New sp_encabezado_pedDataTable(ds.Tables("sp_encabezado_ped")))
            End If
            If (Not (ds.Tables("sp_detalle_ped")) Is Nothing) Then
                MyBase.Tables.Add(New sp_detalle_pedDataTable(ds.Tables("sp_detalle_ped")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablesp_detalle_rec = CType(MyBase.Tables("sp_detalle_rec"),sp_detalle_recDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_rec) Is Nothing) Then
                Me.tablesp_detalle_rec.InitVars
            End If
        End If
        Me.tablesp_edocta_detalle = CType(MyBase.Tables("sp_edocta_detalle"),sp_edocta_detalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_edocta_detalle) Is Nothing) Then
                Me.tablesp_edocta_detalle.InitVars
            End If
        End If
        Me.tablesp_edocta_enc = CType(MyBase.Tables("sp_edocta_enc"),sp_edocta_encDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_edocta_enc) Is Nothing) Then
                Me.tablesp_edocta_enc.InitVars
            End If
        End If
        Me.tablesp_edoprv_detalle = CType(MyBase.Tables("sp_edoprv_detalle"),sp_edoprv_detalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_edoprv_detalle) Is Nothing) Then
                Me.tablesp_edoprv_detalle.InitVars
            End If
        End If
        Me.tablesp_edoprv_enc = CType(MyBase.Tables("sp_edoprv_enc"),sp_edoprv_encDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_edoprv_enc) Is Nothing) Then
                Me.tablesp_edoprv_enc.InitVars
            End If
        End If
        Me.tablesp_muestra_lote = CType(MyBase.Tables("sp_muestra_lote"),sp_muestra_loteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_muestra_lote) Is Nothing) Then
                Me.tablesp_muestra_lote.InitVars
            End If
        End If
        Me.tablesp_rep_lista = CType(MyBase.Tables("sp_rep_lista"),sp_rep_listaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_lista) Is Nothing) Then
                Me.tablesp_rep_lista.InitVars
            End If
        End If
        Me.tablesp_rep_rango = CType(MyBase.Tables("sp_rep_rango"),sp_rep_rangoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_rango) Is Nothing) Then
                Me.tablesp_rep_rango.InitVars
            End If
        End If
        Me.tablesp_rep_precios = CType(MyBase.Tables("sp_rep_precios"),sp_rep_preciosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_precios) Is Nothing) Then
                Me.tablesp_rep_precios.InitVars
            End If
        End If
        Me.tablesp_rep_ingreso = CType(MyBase.Tables("sp_rep_ingreso"),sp_rep_ingresoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_ingreso) Is Nothing) Then
                Me.tablesp_rep_ingreso.InitVars
            End If
        End If
        Me.tablesp_rep_detalle_ingreso = CType(MyBase.Tables("sp_rep_detalle_ingreso"),sp_rep_detalle_ingresoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_detalle_ingreso) Is Nothing) Then
                Me.tablesp_rep_detalle_ingreso.InitVars
            End If
        End If
        Me.tablesp_logo_compania = CType(MyBase.Tables("sp_logo_compania"),sp_logo_companiaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_logo_compania) Is Nothing) Then
                Me.tablesp_logo_compania.InitVars
            End If
        End If
        Me.tablesp_recupera_publicidad = CType(MyBase.Tables("sp_recupera_publicidad"),sp_recupera_publicidadDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_publicidad) Is Nothing) Then
                Me.tablesp_recupera_publicidad.InitVars
            End If
        End If
        Me.tablesp_encabezado_rec = CType(MyBase.Tables("sp_encabezado_rec"),sp_encabezado_recDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_rec) Is Nothing) Then
                Me.tablesp_encabezado_rec.InitVars
            End If
        End If
        Me.tablesp_detalle_transferencia = CType(MyBase.Tables("sp_detalle_transferencia"),sp_detalle_transferenciaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_transferencia) Is Nothing) Then
                Me.tablesp_detalle_transferencia.InitVars
            End If
        End If
        Me.tablesp_referencia_factura = CType(MyBase.Tables("sp_referencia_factura"),sp_referencia_facturaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_referencia_factura) Is Nothing) Then
                Me.tablesp_referencia_factura.InitVars
            End If
        End If
        Me.tablesp_rep_detalle_ubcing = CType(MyBase.Tables("sp_rep_detalle_ubcing"),sp_rep_detalle_ubcingDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_detalle_ubcing) Is Nothing) Then
                Me.tablesp_rep_detalle_ubcing.InitVars
            End If
        End If
        Me.tablesp_busca_prod_ubc = CType(MyBase.Tables("sp_busca_prod_ubc"),sp_busca_prod_ubcDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_busca_prod_ubc) Is Nothing) Then
                Me.tablesp_busca_prod_ubc.InitVars
            End If
        End If
        Me.tablesp_rep_uba = CType(MyBase.Tables("sp_rep_uba"),sp_rep_ubaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_uba) Is Nothing) Then
                Me.tablesp_rep_uba.InitVars
            End If
        End If
        Me.tablesp_sello_fac = CType(MyBase.Tables("sp_sello_fac"),sp_sello_facDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_sello_fac) Is Nothing) Then
                Me.tablesp_sello_fac.InitVars
            End If
        End If
        Me.tablesp_sello_nc = CType(MyBase.Tables("sp_sello_nc"),sp_sello_ncDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_sello_nc) Is Nothing) Then
                Me.tablesp_sello_nc.InitVars
            End If
        End If
        Me.tablesp_encabezado_nc = CType(MyBase.Tables("sp_encabezado_nc"),sp_encabezado_ncDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_nc) Is Nothing) Then
                Me.tablesp_encabezado_nc.InitVars
            End If
        End If
        Me.tablesp_impuestos_fac = CType(MyBase.Tables("sp_impuestos_fac"),sp_impuestos_facDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_impuestos_fac) Is Nothing) Then
                Me.tablesp_impuestos_fac.InitVars
            End If
        End If
        Me.tablesp_nc_impuestos = CType(MyBase.Tables("sp_nc_impuestos"),sp_nc_impuestosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_nc_impuestos) Is Nothing) Then
                Me.tablesp_nc_impuestos.InitVars
            End If
        End If
        Me.tablesp_metodopago_fac = CType(MyBase.Tables("sp_metodopago_fac"),sp_metodopago_facDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_metodopago_fac) Is Nothing) Then
                Me.tablesp_metodopago_fac.InitVars
            End If
        End If
        Me.tablesp_metodopago_nc = CType(MyBase.Tables("sp_metodopago_nc"),sp_metodopago_ncDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_metodopago_nc) Is Nothing) Then
                Me.tablesp_metodopago_nc.InitVars
            End If
        End If
        Me.tablesp_liq_general = CType(MyBase.Tables("sp_liq_general"),sp_liq_generalDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_liq_general) Is Nothing) Then
                Me.tablesp_liq_general.InitVars
            End If
        End If
        Me.tablesp_liq_corte = CType(MyBase.Tables("sp_liq_corte"),sp_liq_corteDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_liq_corte) Is Nothing) Then
                Me.tablesp_liq_corte.InitVars
            End If
        End If
        Me.tablesp_liq_pagos = CType(MyBase.Tables("sp_liq_pagos"),sp_liq_pagosDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_liq_pagos) Is Nothing) Then
                Me.tablesp_liq_pagos.InitVars
            End If
        End If
        Me.tablesp_movimientos_liq = CType(MyBase.Tables("sp_movimientos_liq"),sp_movimientos_liqDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_movimientos_liq) Is Nothing) Then
                Me.tablesp_movimientos_liq.InitVars
            End If
        End If
        Me.tablesp_liq_comision_prod = CType(MyBase.Tables("sp_liq_comision_prod"),sp_liq_comision_prodDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_liq_comision_prod) Is Nothing) Then
                Me.tablesp_liq_comision_prod.InitVars
            End If
        End If
        Me.tablesp_liq_comision_vta = CType(MyBase.Tables("sp_liq_comision_vta"),sp_liq_comision_vtaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_liq_comision_vta) Is Nothing) Then
                Me.tablesp_liq_comision_vta.InitVars
            End If
        End If
        Me.tablesp_detalle_fac = CType(MyBase.Tables("sp_detalle_fac"),sp_detalle_facDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_fac) Is Nothing) Then
                Me.tablesp_detalle_fac.InitVars
            End If
        End If
        Me.tablesp_nc_detalle = CType(MyBase.Tables("sp_nc_detalle"),sp_nc_detalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_nc_detalle) Is Nothing) Then
                Me.tablesp_nc_detalle.InitVars
            End If
        End If
        Me.tablesp_encabezado_fac = CType(MyBase.Tables("sp_encabezado_fac"),sp_encabezado_facDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_fac) Is Nothing) Then
                Me.tablesp_encabezado_fac.InitVars
            End If
        End If
        Me.tablesp_recupera_incapacidad = CType(MyBase.Tables("sp_recupera_incapacidad"),sp_recupera_incapacidadDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_incapacidad) Is Nothing) Then
                Me.tablesp_recupera_incapacidad.InitVars
            End If
        End If
        Me.tablesp_recupera_horasextra = CType(MyBase.Tables("sp_recupera_horasextra"),sp_recupera_horasextraDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_horasextra) Is Nothing) Then
                Me.tablesp_recupera_horasextra.InitVars
            End If
        End If
        Me.tablesp_recupera_percepciones = CType(MyBase.Tables("sp_recupera_percepciones"),sp_recupera_percepcionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_percepciones) Is Nothing) Then
                Me.tablesp_recupera_percepciones.InitVars
            End If
        End If
        Me.tablesp_recupera_deducciones = CType(MyBase.Tables("sp_recupera_deducciones"),sp_recupera_deduccionesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_deducciones) Is Nothing) Then
                Me.tablesp_recupera_deducciones.InitVars
            End If
        End If
        Me.tablesp_recupera_empleadoREC = CType(MyBase.Tables("sp_recupera_empleadoREC"),sp_recupera_empleadoRECDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_empleadoREC) Is Nothing) Then
                Me.tablesp_recupera_empleadoREC.InitVars
            End If
        End If
        Me.tablesp_encabezado_reciboNomina = CType(MyBase.Tables("sp_encabezado_reciboNomina"),sp_encabezado_reciboNominaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_reciboNomina) Is Nothing) Then
                Me.tablesp_encabezado_reciboNomina.InitVars
            End If
        End If
        Me.tablesp_obtener_surtidodetalle = CType(MyBase.Tables("sp_obtener_surtidodetalle"),sp_obtener_surtidodetalleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_obtener_surtidodetalle) Is Nothing) Then
                Me.tablesp_obtener_surtidodetalle.InitVars
            End If
        End If
        Me.tablesp_obtener_envio = CType(MyBase.Tables("sp_obtener_envio"),sp_obtener_envioDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_obtener_envio) Is Nothing) Then
                Me.tablesp_obtener_envio.InitVars
            End If
        End If
        Me.tablesp_encabezado_cargo = CType(MyBase.Tables("sp_encabezado_cargo"),sp_encabezado_cargoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_cargo) Is Nothing) Then
                Me.tablesp_encabezado_cargo.InitVars
            End If
        End If
        Me.tablesp_detalle_cargo = CType(MyBase.Tables("sp_detalle_cargo"),sp_detalle_cargoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_cargo) Is Nothing) Then
                Me.tablesp_detalle_cargo.InitVars
            End If
        End If
        Me.tablesp_impuestos_cargo = CType(MyBase.Tables("sp_impuestos_cargo"),sp_impuestos_cargoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_impuestos_cargo) Is Nothing) Then
                Me.tablesp_impuestos_cargo.InitVars
            End If
        End If
        Me.tablesp_sello_cargo = CType(MyBase.Tables("sp_sello_cargo"),sp_sello_cargoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_sello_cargo) Is Nothing) Then
                Me.tablesp_sello_cargo.InitVars
            End If
        End If
        Me.tablesp_metodopago_cargo = CType(MyBase.Tables("sp_metodopago_cargo"),sp_metodopago_cargoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_metodopago_cargo) Is Nothing) Then
                Me.tablesp_metodopago_cargo.InitVars
            End If
        End If
        Me.tablesp_encabezado_dev = CType(MyBase.Tables("sp_encabezado_dev"),sp_encabezado_devDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_dev) Is Nothing) Then
                Me.tablesp_encabezado_dev.InitVars
            End If
        End If
        Me.tablesp_devolucion_det = CType(MyBase.Tables("sp_devolucion_det"),sp_devolucion_detDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_devolucion_det) Is Nothing) Then
                Me.tablesp_devolucion_det.InitVars
            End If
        End If
        Me.tablesp_detalle_traslado = CType(MyBase.Tables("sp_detalle_traslado"),sp_detalle_trasladoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_traslado) Is Nothing) Then
                Me.tablesp_detalle_traslado.InitVars
            End If
        End If
        Me.tablesp_encabezado_surtido = CType(MyBase.Tables("sp_encabezado_surtido"),sp_encabezado_surtidoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_surtido) Is Nothing) Then
                Me.tablesp_encabezado_surtido.InitVars
            End If
        End If
        Me.tablesp_detalle_orden = CType(MyBase.Tables("sp_detalle_orden"),sp_detalle_ordenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_orden) Is Nothing) Then
                Me.tablesp_detalle_orden.InitVars
            End If
        End If
        Me.tablesp_recupera_orden = CType(MyBase.Tables("sp_recupera_orden"),sp_recupera_ordenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_recupera_orden) Is Nothing) Then
                Me.tablesp_recupera_orden.InitVars
            End If
        End If
        Me.tablesp_rep_orden = CType(MyBase.Tables("sp_rep_orden"),sp_rep_ordenDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_orden) Is Nothing) Then
                Me.tablesp_rep_orden.InitVars
            End If
        End If
        Me.tablesp_rep_transferencia = CType(MyBase.Tables("sp_rep_transferencia"),sp_rep_transferenciaDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_transferencia) Is Nothing) Then
                Me.tablesp_rep_transferencia.InitVars
            End If
        End If
        Me.tablesp_rep_traslado = CType(MyBase.Tables("sp_rep_traslado"),sp_rep_trasladoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_rep_traslado) Is Nothing) Then
                Me.tablesp_rep_traslado.InitVars
            End If
        End If
        Me.tablesp_encabezado_ped = CType(MyBase.Tables("sp_encabezado_ped"),sp_encabezado_pedDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_encabezado_ped) Is Nothing) Then
                Me.tablesp_encabezado_ped.InitVars
            End If
        End If
        Me.tablesp_detalle_ped = CType(MyBase.Tables("sp_detalle_ped"),sp_detalle_pedDataTable)
        If (initTable = true) Then
            If (Not (Me.tablesp_detalle_ped) Is Nothing) Then
                Me.tablesp_detalle_ped.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "pvtaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/pvtaDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablesp_detalle_rec = New sp_detalle_recDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_rec)
        Me.tablesp_edocta_detalle = New sp_edocta_detalleDataTable
        MyBase.Tables.Add(Me.tablesp_edocta_detalle)
        Me.tablesp_edocta_enc = New sp_edocta_encDataTable
        MyBase.Tables.Add(Me.tablesp_edocta_enc)
        Me.tablesp_edoprv_detalle = New sp_edoprv_detalleDataTable
        MyBase.Tables.Add(Me.tablesp_edoprv_detalle)
        Me.tablesp_edoprv_enc = New sp_edoprv_encDataTable
        MyBase.Tables.Add(Me.tablesp_edoprv_enc)
        Me.tablesp_muestra_lote = New sp_muestra_loteDataTable
        MyBase.Tables.Add(Me.tablesp_muestra_lote)
        Me.tablesp_rep_lista = New sp_rep_listaDataTable
        MyBase.Tables.Add(Me.tablesp_rep_lista)
        Me.tablesp_rep_rango = New sp_rep_rangoDataTable
        MyBase.Tables.Add(Me.tablesp_rep_rango)
        Me.tablesp_rep_precios = New sp_rep_preciosDataTable
        MyBase.Tables.Add(Me.tablesp_rep_precios)
        Me.tablesp_rep_ingreso = New sp_rep_ingresoDataTable
        MyBase.Tables.Add(Me.tablesp_rep_ingreso)
        Me.tablesp_rep_detalle_ingreso = New sp_rep_detalle_ingresoDataTable
        MyBase.Tables.Add(Me.tablesp_rep_detalle_ingreso)
        Me.tablesp_logo_compania = New sp_logo_companiaDataTable
        MyBase.Tables.Add(Me.tablesp_logo_compania)
        Me.tablesp_recupera_publicidad = New sp_recupera_publicidadDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_publicidad)
        Me.tablesp_encabezado_rec = New sp_encabezado_recDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_rec)
        Me.tablesp_detalle_transferencia = New sp_detalle_transferenciaDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_transferencia)
        Me.tablesp_referencia_factura = New sp_referencia_facturaDataTable
        MyBase.Tables.Add(Me.tablesp_referencia_factura)
        Me.tablesp_rep_detalle_ubcing = New sp_rep_detalle_ubcingDataTable
        MyBase.Tables.Add(Me.tablesp_rep_detalle_ubcing)
        Me.tablesp_busca_prod_ubc = New sp_busca_prod_ubcDataTable
        MyBase.Tables.Add(Me.tablesp_busca_prod_ubc)
        Me.tablesp_rep_uba = New sp_rep_ubaDataTable
        MyBase.Tables.Add(Me.tablesp_rep_uba)
        Me.tablesp_sello_fac = New sp_sello_facDataTable
        MyBase.Tables.Add(Me.tablesp_sello_fac)
        Me.tablesp_sello_nc = New sp_sello_ncDataTable
        MyBase.Tables.Add(Me.tablesp_sello_nc)
        Me.tablesp_encabezado_nc = New sp_encabezado_ncDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_nc)
        Me.tablesp_impuestos_fac = New sp_impuestos_facDataTable
        MyBase.Tables.Add(Me.tablesp_impuestos_fac)
        Me.tablesp_nc_impuestos = New sp_nc_impuestosDataTable
        MyBase.Tables.Add(Me.tablesp_nc_impuestos)
        Me.tablesp_metodopago_fac = New sp_metodopago_facDataTable
        MyBase.Tables.Add(Me.tablesp_metodopago_fac)
        Me.tablesp_metodopago_nc = New sp_metodopago_ncDataTable
        MyBase.Tables.Add(Me.tablesp_metodopago_nc)
        Me.tablesp_liq_general = New sp_liq_generalDataTable
        MyBase.Tables.Add(Me.tablesp_liq_general)
        Me.tablesp_liq_corte = New sp_liq_corteDataTable
        MyBase.Tables.Add(Me.tablesp_liq_corte)
        Me.tablesp_liq_pagos = New sp_liq_pagosDataTable
        MyBase.Tables.Add(Me.tablesp_liq_pagos)
        Me.tablesp_movimientos_liq = New sp_movimientos_liqDataTable
        MyBase.Tables.Add(Me.tablesp_movimientos_liq)
        Me.tablesp_liq_comision_prod = New sp_liq_comision_prodDataTable
        MyBase.Tables.Add(Me.tablesp_liq_comision_prod)
        Me.tablesp_liq_comision_vta = New sp_liq_comision_vtaDataTable
        MyBase.Tables.Add(Me.tablesp_liq_comision_vta)
        Me.tablesp_detalle_fac = New sp_detalle_facDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_fac)
        Me.tablesp_nc_detalle = New sp_nc_detalleDataTable
        MyBase.Tables.Add(Me.tablesp_nc_detalle)
        Me.tablesp_encabezado_fac = New sp_encabezado_facDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_fac)
        Me.tablesp_recupera_incapacidad = New sp_recupera_incapacidadDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_incapacidad)
        Me.tablesp_recupera_horasextra = New sp_recupera_horasextraDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_horasextra)
        Me.tablesp_recupera_percepciones = New sp_recupera_percepcionesDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_percepciones)
        Me.tablesp_recupera_deducciones = New sp_recupera_deduccionesDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_deducciones)
        Me.tablesp_recupera_empleadoREC = New sp_recupera_empleadoRECDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_empleadoREC)
        Me.tablesp_encabezado_reciboNomina = New sp_encabezado_reciboNominaDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_reciboNomina)
        Me.tablesp_obtener_surtidodetalle = New sp_obtener_surtidodetalleDataTable
        MyBase.Tables.Add(Me.tablesp_obtener_surtidodetalle)
        Me.tablesp_obtener_envio = New sp_obtener_envioDataTable
        MyBase.Tables.Add(Me.tablesp_obtener_envio)
        Me.tablesp_encabezado_cargo = New sp_encabezado_cargoDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_cargo)
        Me.tablesp_detalle_cargo = New sp_detalle_cargoDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_cargo)
        Me.tablesp_impuestos_cargo = New sp_impuestos_cargoDataTable
        MyBase.Tables.Add(Me.tablesp_impuestos_cargo)
        Me.tablesp_sello_cargo = New sp_sello_cargoDataTable
        MyBase.Tables.Add(Me.tablesp_sello_cargo)
        Me.tablesp_metodopago_cargo = New sp_metodopago_cargoDataTable
        MyBase.Tables.Add(Me.tablesp_metodopago_cargo)
        Me.tablesp_encabezado_dev = New sp_encabezado_devDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_dev)
        Me.tablesp_devolucion_det = New sp_devolucion_detDataTable
        MyBase.Tables.Add(Me.tablesp_devolucion_det)
        Me.tablesp_detalle_traslado = New sp_detalle_trasladoDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_traslado)
        Me.tablesp_encabezado_surtido = New sp_encabezado_surtidoDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_surtido)
        Me.tablesp_detalle_orden = New sp_detalle_ordenDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_orden)
        Me.tablesp_recupera_orden = New sp_recupera_ordenDataTable
        MyBase.Tables.Add(Me.tablesp_recupera_orden)
        Me.tablesp_rep_orden = New sp_rep_ordenDataTable
        MyBase.Tables.Add(Me.tablesp_rep_orden)
        Me.tablesp_rep_transferencia = New sp_rep_transferenciaDataTable
        MyBase.Tables.Add(Me.tablesp_rep_transferencia)
        Me.tablesp_rep_traslado = New sp_rep_trasladoDataTable
        MyBase.Tables.Add(Me.tablesp_rep_traslado)
        Me.tablesp_encabezado_ped = New sp_encabezado_pedDataTable
        MyBase.Tables.Add(Me.tablesp_encabezado_ped)
        Me.tablesp_detalle_ped = New sp_detalle_pedDataTable
        MyBase.Tables.Add(Me.tablesp_detalle_ped)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_rec() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_edocta_detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_edocta_enc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_edoprv_detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_edoprv_enc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_muestra_lote() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_lista() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_rango() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_precios() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_ingreso() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_detalle_ingreso() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_logo_compania() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_publicidad() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_rec() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_transferencia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_referencia_factura() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_detalle_ubcing() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_busca_prod_ubc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_uba() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_sello_fac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_sello_nc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_nc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_impuestos_fac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_nc_impuestos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_metodopago_fac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_metodopago_nc() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_liq_general() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_liq_corte() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_liq_pagos() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_movimientos_liq() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_liq_comision_prod() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_liq_comision_vta() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_fac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_nc_detalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_fac() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_incapacidad() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_horasextra() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_percepciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_deducciones() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_empleadoREC() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_reciboNomina() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_obtener_surtidodetalle() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_obtener_envio() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_cargo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_cargo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_impuestos_cargo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_sello_cargo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_metodopago_cargo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_dev() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_devolucion_det() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_traslado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_surtido() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_orden() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_recupera_orden() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_orden() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_transferencia() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_rep_traslado() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_encabezado_ped() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializesp_detalle_ped() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As pvtaDataSet = New pvtaDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub sp_detalle_recRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_recRowChangeEvent)
    
    Public Delegate Sub sp_edocta_detalleRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_edocta_detalleRowChangeEvent)
    
    Public Delegate Sub sp_edocta_encRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_edocta_encRowChangeEvent)
    
    Public Delegate Sub sp_edoprv_detalleRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_edoprv_detalleRowChangeEvent)
    
    Public Delegate Sub sp_edoprv_encRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_edoprv_encRowChangeEvent)
    
    Public Delegate Sub sp_muestra_loteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_muestra_loteRowChangeEvent)
    
    Public Delegate Sub sp_rep_listaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_listaRowChangeEvent)
    
    Public Delegate Sub sp_rep_rangoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_rangoRowChangeEvent)
    
    Public Delegate Sub sp_rep_preciosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_preciosRowChangeEvent)
    
    Public Delegate Sub sp_rep_ingresoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_ingresoRowChangeEvent)
    
    Public Delegate Sub sp_rep_detalle_ingresoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_detalle_ingresoRowChangeEvent)
    
    Public Delegate Sub sp_logo_companiaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_logo_companiaRowChangeEvent)
    
    Public Delegate Sub sp_recupera_publicidadRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_publicidadRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_recRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_recRowChangeEvent)
    
    Public Delegate Sub sp_detalle_transferenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_transferenciaRowChangeEvent)
    
    Public Delegate Sub sp_referencia_facturaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_referencia_facturaRowChangeEvent)
    
    Public Delegate Sub sp_rep_detalle_ubcingRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_detalle_ubcingRowChangeEvent)
    
    Public Delegate Sub sp_busca_prod_ubcRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_busca_prod_ubcRowChangeEvent)
    
    Public Delegate Sub sp_rep_ubaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_ubaRowChangeEvent)
    
    Public Delegate Sub sp_sello_facRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_sello_facRowChangeEvent)
    
    Public Delegate Sub sp_sello_ncRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_sello_ncRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_ncRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_ncRowChangeEvent)
    
    Public Delegate Sub sp_impuestos_facRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_impuestos_facRowChangeEvent)
    
    Public Delegate Sub sp_nc_impuestosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_nc_impuestosRowChangeEvent)
    
    Public Delegate Sub sp_metodopago_facRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_metodopago_facRowChangeEvent)
    
    Public Delegate Sub sp_metodopago_ncRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_metodopago_ncRowChangeEvent)
    
    Public Delegate Sub sp_liq_generalRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_liq_generalRowChangeEvent)
    
    Public Delegate Sub sp_liq_corteRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_liq_corteRowChangeEvent)
    
    Public Delegate Sub sp_liq_pagosRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_liq_pagosRowChangeEvent)
    
    Public Delegate Sub sp_movimientos_liqRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_movimientos_liqRowChangeEvent)
    
    Public Delegate Sub sp_liq_comision_prodRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_liq_comision_prodRowChangeEvent)
    
    Public Delegate Sub sp_liq_comision_vtaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_liq_comision_vtaRowChangeEvent)
    
    Public Delegate Sub sp_detalle_facRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_facRowChangeEvent)
    
    Public Delegate Sub sp_nc_detalleRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_nc_detalleRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_facRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_facRowChangeEvent)
    
    Public Delegate Sub sp_recupera_incapacidadRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_incapacidadRowChangeEvent)
    
    Public Delegate Sub sp_recupera_horasextraRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_horasextraRowChangeEvent)
    
    Public Delegate Sub sp_recupera_percepcionesRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_percepcionesRowChangeEvent)
    
    Public Delegate Sub sp_recupera_deduccionesRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_deduccionesRowChangeEvent)
    
    Public Delegate Sub sp_recupera_empleadoRECRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_empleadoRECRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_reciboNominaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_reciboNominaRowChangeEvent)
    
    Public Delegate Sub sp_obtener_surtidodetalleRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_obtener_surtidodetalleRowChangeEvent)
    
    Public Delegate Sub sp_obtener_envioRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_obtener_envioRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_cargoRowChangeEvent)
    
    Public Delegate Sub sp_detalle_cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_cargoRowChangeEvent)
    
    Public Delegate Sub sp_impuestos_cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_impuestos_cargoRowChangeEvent)
    
    Public Delegate Sub sp_sello_cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_sello_cargoRowChangeEvent)
    
    Public Delegate Sub sp_metodopago_cargoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_metodopago_cargoRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_devRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_devRowChangeEvent)
    
    Public Delegate Sub sp_devolucion_detRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_devolucion_detRowChangeEvent)
    
    Public Delegate Sub sp_detalle_trasladoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_trasladoRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_surtidoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_surtidoRowChangeEvent)
    
    Public Delegate Sub sp_detalle_ordenRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_ordenRowChangeEvent)
    
    Public Delegate Sub sp_recupera_ordenRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_recupera_ordenRowChangeEvent)
    
    Public Delegate Sub sp_rep_ordenRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_ordenRowChangeEvent)
    
    Public Delegate Sub sp_rep_transferenciaRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_transferenciaRowChangeEvent)
    
    Public Delegate Sub sp_rep_trasladoRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_rep_trasladoRowChangeEvent)
    
    Public Delegate Sub sp_encabezado_pedRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_encabezado_pedRowChangeEvent)
    
    Public Delegate Sub sp_detalle_pedRowChangeEventHandler(ByVal sender As Object, ByVal e As sp_detalle_pedRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_recDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_recRow)
        
        Private columnabnclave As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnTIPO As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_rec"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property abnclaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnabnclave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TIPOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIPO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_recRow
            Get
                Return CType(Me.Rows(index),sp_detalle_recRow)
            End Get
        End Property
        
        Public Event sp_detalle_recRowChanging As sp_detalle_recRowChangeEventHandler
        
        Public Event sp_detalle_recRowChanged As sp_detalle_recRowChangeEventHandler
        
        Public Event sp_detalle_recRowDeleting As sp_detalle_recRowChangeEventHandler
        
        Public Event sp_detalle_recRowDeleted As sp_detalle_recRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_recRow(ByVal row As sp_detalle_recRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_recRow(ByVal abnclave As String, ByVal Folio As String, ByVal TIPO As String, ByVal Importe As Double, ByVal MFechaHora As Date) As sp_detalle_recRow
            Dim rowsp_detalle_recRow As sp_detalle_recRow = CType(Me.NewRow,sp_detalle_recRow)
            Dim columnValuesArray() As Object = New Object() {abnclave, Folio, TIPO, Importe, MFechaHora}
            rowsp_detalle_recRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_recRow)
            Return rowsp_detalle_recRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_recDataTable = CType(MyBase.Clone,sp_detalle_recDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_recDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnabnclave = MyBase.Columns("abnclave")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnTIPO = MyBase.Columns("TIPO")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnabnclave = New Global.System.Data.DataColumn("abnclave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnabnclave)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnTIPO = New Global.System.Data.DataColumn("TIPO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIPO)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnabnclave.ReadOnly = true
            Me.columnabnclave.MaxLength = 20
            Me.columnFolio.ReadOnly = true
            Me.columnFolio.MaxLength = 50
            Me.columnTIPO.ReadOnly = true
            Me.columnTIPO.MaxLength = 7
            Me.columnImporte.ReadOnly = true
            Me.columnMFechaHora.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_recRow() As sp_detalle_recRow
            Return CType(Me.NewRow,sp_detalle_recRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_recRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_recRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_recRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_recRowChanged(Me, New sp_detalle_recRowChangeEvent(CType(e.Row,sp_detalle_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_recRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_recRowChanging(Me, New sp_detalle_recRowChangeEvent(CType(e.Row,sp_detalle_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_recRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_recRowDeleted(Me, New sp_detalle_recRowChangeEvent(CType(e.Row,sp_detalle_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_recRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_recRowDeleting(Me, New sp_detalle_recRowChangeEvent(CType(e.Row,sp_detalle_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_recRow(ByVal row As sp_detalle_recRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_recDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_edocta_detalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_edocta_detalleRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnDescripción As Global.System.Data.DataColumn
        
        Private columnCargo As Global.System.Data.DataColumn
        
        Private columnAbono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_edocta_detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripción
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_edocta_detalleRow
            Get
                Return CType(Me.Rows(index),sp_edocta_detalleRow)
            End Get
        End Property
        
        Public Event sp_edocta_detalleRowChanging As sp_edocta_detalleRowChangeEventHandler
        
        Public Event sp_edocta_detalleRowChanged As sp_edocta_detalleRowChangeEventHandler
        
        Public Event sp_edocta_detalleRowDeleting As sp_edocta_detalleRowChangeEventHandler
        
        Public Event sp_edocta_detalleRowDeleted As sp_edocta_detalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_edocta_detalleRow(ByVal row As sp_edocta_detalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_edocta_detalleRow(ByVal Clave As String, ByVal Fecha As Date, ByVal Descripción As String, ByVal Cargo As Double, ByVal Abono As Double) As sp_edocta_detalleRow
            Dim rowsp_edocta_detalleRow As sp_edocta_detalleRow = CType(Me.NewRow,sp_edocta_detalleRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Fecha, Descripción, Cargo, Abono}
            rowsp_edocta_detalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_edocta_detalleRow)
            Return rowsp_edocta_detalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_edocta_detalleDataTable = CType(MyBase.Clone,sp_edocta_detalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_edocta_detalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnDescripción = MyBase.Columns("Descripción")
            Me.columnCargo = MyBase.Columns("Cargo")
            Me.columnAbono = MyBase.Columns("Abono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnDescripción = New Global.System.Data.DataColumn("Descripción", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripción)
            Me.columnCargo = New Global.System.Data.DataColumn("Cargo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargo)
            Me.columnAbono = New Global.System.Data.DataColumn("Abono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbono)
            Me.columnClave.ReadOnly = true
            Me.columnClave.MaxLength = 20
            Me.columnFecha.ReadOnly = true
            Me.columnDescripción.ReadOnly = true
            Me.columnDescripción.MaxLength = 97
            Me.columnCargo.ReadOnly = true
            Me.columnAbono.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_edocta_detalleRow() As sp_edocta_detalleRow
            Return CType(Me.NewRow,sp_edocta_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_edocta_detalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_edocta_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_edocta_detalleRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_edocta_detalleRowChanged(Me, New sp_edocta_detalleRowChangeEvent(CType(e.Row,sp_edocta_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_edocta_detalleRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_edocta_detalleRowChanging(Me, New sp_edocta_detalleRowChangeEvent(CType(e.Row,sp_edocta_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_edocta_detalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_edocta_detalleRowDeleted(Me, New sp_edocta_detalleRowChangeEvent(CType(e.Row,sp_edocta_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_edocta_detalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_edocta_detalleRowDeleting(Me, New sp_edocta_detalleRowChangeEvent(CType(e.Row,sp_edocta_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_edocta_detalleRow(ByVal row As sp_edocta_detalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_edocta_detalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_edocta_encDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_edocta_encRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        Private columnDiasCredito As Global.System.Data.DataColumn
        
        Private columnPuntos As Global.System.Data.DataColumn
        
        Private columnTel1 As Global.System.Data.DataColumn
        
        Private columnTel2 As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_edocta_enc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_edocta_encRow
            Get
                Return CType(Me.Rows(index),sp_edocta_encRow)
            End Get
        End Property
        
        Public Event sp_edocta_encRowChanging As sp_edocta_encRowChangeEventHandler
        
        Public Event sp_edocta_encRowChanged As sp_edocta_encRowChangeEventHandler
        
        Public Event sp_edocta_encRowDeleting As sp_edocta_encRowChangeEventHandler
        
        Public Event sp_edocta_encRowDeleted As sp_edocta_encRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_edocta_encRow(ByVal row As sp_edocta_encRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_edocta_encRow(ByVal Clave As String, ByVal RazonSocial As String, ByVal id_Fiscal As String, ByVal LimiteCredito As Double, ByVal SaldoCte As Double, ByVal Calle As String, ByVal Domicilio1 As String, ByVal Domicilio2 As String, ByVal DiasCredito As Integer, ByVal Puntos As Double, ByVal Tel1 As String, ByVal Tel2 As String, ByVal Email As String) As sp_edocta_encRow
            Dim rowsp_edocta_encRow As sp_edocta_encRow = CType(Me.NewRow,sp_edocta_encRow)
            Dim columnValuesArray() As Object = New Object() {Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, Calle, Domicilio1, Domicilio2, DiasCredito, Puntos, Tel1, Tel2, Email}
            rowsp_edocta_encRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_edocta_encRow)
            Return rowsp_edocta_encRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_edocta_encDataTable = CType(MyBase.Clone,sp_edocta_encDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_edocta_encDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
            Me.columnDiasCredito = MyBase.Columns("DiasCredito")
            Me.columnPuntos = MyBase.Columns("Puntos")
            Me.columnTel1 = MyBase.Columns("Tel1")
            Me.columnTel2 = MyBase.Columns("Tel2")
            Me.columnEmail = MyBase.Columns("Email")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.columnDiasCredito = New Global.System.Data.DataColumn("DiasCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCredito)
            Me.columnPuntos = New Global.System.Data.DataColumn("Puntos", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntos)
            Me.columnTel1 = New Global.System.Data.DataColumn("Tel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel1)
            Me.columnTel2 = New Global.System.Data.DataColumn("Tel2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel2)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnCalle.MaxLength = 128
            Me.columnDomicilio1.MaxLength = 80
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
            Me.columnTel1.MaxLength = 15
            Me.columnTel2.MaxLength = 15
            Me.columnEmail.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_edocta_encRow() As sp_edocta_encRow
            Return CType(Me.NewRow,sp_edocta_encRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_edocta_encRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_edocta_encRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_edocta_encRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_edocta_encRowChanged(Me, New sp_edocta_encRowChangeEvent(CType(e.Row,sp_edocta_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_edocta_encRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_edocta_encRowChanging(Me, New sp_edocta_encRowChangeEvent(CType(e.Row,sp_edocta_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_edocta_encRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_edocta_encRowDeleted(Me, New sp_edocta_encRowChangeEvent(CType(e.Row,sp_edocta_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_edocta_encRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_edocta_encRowDeleting(Me, New sp_edocta_encRowChangeEvent(CType(e.Row,sp_edocta_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_edocta_encRow(ByVal row As sp_edocta_encRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_edocta_encDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_edoprv_detalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_edoprv_detalleRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnDescripción As Global.System.Data.DataColumn
        
        Private columnCargo As Global.System.Data.DataColumn
        
        Private columnAbono As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_edoprv_detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripción
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AbonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAbono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_edoprv_detalleRow
            Get
                Return CType(Me.Rows(index),sp_edoprv_detalleRow)
            End Get
        End Property
        
        Public Event sp_edoprv_detalleRowChanging As sp_edoprv_detalleRowChangeEventHandler
        
        Public Event sp_edoprv_detalleRowChanged As sp_edoprv_detalleRowChangeEventHandler
        
        Public Event sp_edoprv_detalleRowDeleting As sp_edoprv_detalleRowChangeEventHandler
        
        Public Event sp_edoprv_detalleRowDeleted As sp_edoprv_detalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_edoprv_detalleRow(ByVal row As sp_edoprv_detalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_edoprv_detalleRow(ByVal Clave As String, ByVal Fecha As Date, ByVal Descripción As String, ByVal Cargo As Double, ByVal Abono As Double) As sp_edoprv_detalleRow
            Dim rowsp_edoprv_detalleRow As sp_edoprv_detalleRow = CType(Me.NewRow,sp_edoprv_detalleRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Fecha, Descripción, Cargo, Abono}
            rowsp_edoprv_detalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_edoprv_detalleRow)
            Return rowsp_edoprv_detalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_edoprv_detalleDataTable = CType(MyBase.Clone,sp_edoprv_detalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_edoprv_detalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnDescripción = MyBase.Columns("Descripción")
            Me.columnCargo = MyBase.Columns("Cargo")
            Me.columnAbono = MyBase.Columns("Abono")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnDescripción = New Global.System.Data.DataColumn("Descripción", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripción)
            Me.columnCargo = New Global.System.Data.DataColumn("Cargo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargo)
            Me.columnAbono = New Global.System.Data.DataColumn("Abono", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAbono)
            Me.columnClave.ReadOnly = true
            Me.columnClave.MaxLength = 20
            Me.columnFecha.ReadOnly = true
            Me.columnDescripción.ReadOnly = true
            Me.columnDescripción.MaxLength = 115
            Me.columnCargo.ReadOnly = true
            Me.columnAbono.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_edoprv_detalleRow() As sp_edoprv_detalleRow
            Return CType(Me.NewRow,sp_edoprv_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_edoprv_detalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_edoprv_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_edoprv_detalleRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_detalleRowChanged(Me, New sp_edoprv_detalleRowChangeEvent(CType(e.Row,sp_edoprv_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_edoprv_detalleRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_detalleRowChanging(Me, New sp_edoprv_detalleRowChangeEvent(CType(e.Row,sp_edoprv_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_edoprv_detalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_detalleRowDeleted(Me, New sp_edoprv_detalleRowChangeEvent(CType(e.Row,sp_edoprv_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_edoprv_detalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_detalleRowDeleting(Me, New sp_edoprv_detalleRowChangeEvent(CType(e.Row,sp_edoprv_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_edoprv_detalleRow(ByVal row As sp_edoprv_detalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_edoprv_detalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_edoprv_encDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_edoprv_encRow)
        
        Private columnPRVClave As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoPrv As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        Private columnDiasCredito As Global.System.Data.DataColumn
        
        Private columnTel1 As Global.System.Data.DataColumn
        
        Private columnTel2 As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnContacto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_edoprv_enc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoPrvColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoPrv
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tel2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnTel2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_edoprv_encRow
            Get
                Return CType(Me.Rows(index),sp_edoprv_encRow)
            End Get
        End Property
        
        Public Event sp_edoprv_encRowChanging As sp_edoprv_encRowChangeEventHandler
        
        Public Event sp_edoprv_encRowChanged As sp_edoprv_encRowChangeEventHandler
        
        Public Event sp_edoprv_encRowDeleting As sp_edoprv_encRowChangeEventHandler
        
        Public Event sp_edoprv_encRowDeleted As sp_edoprv_encRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_edoprv_encRow(ByVal row As sp_edoprv_encRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_edoprv_encRow(ByVal PRVClave As String, ByVal Clave As String, ByVal RazonSocial As String, ByVal id_Fiscal As String, ByVal LimiteCredito As Double, ByVal SaldoPrv As Double, ByVal Calle As String, ByVal Domicilio1 As String, ByVal Domicilio2 As String, ByVal DiasCredito As Integer, ByVal Tel1 As String, ByVal Tel2 As String, ByVal Email As String, ByVal Contacto As String) As sp_edoprv_encRow
            Dim rowsp_edoprv_encRow As sp_edoprv_encRow = CType(Me.NewRow,sp_edoprv_encRow)
            Dim columnValuesArray() As Object = New Object() {PRVClave, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoPrv, Calle, Domicilio1, Domicilio2, DiasCredito, Tel1, Tel2, Email, Contacto}
            rowsp_edoprv_encRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_edoprv_encRow)
            Return rowsp_edoprv_encRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPRVClave(ByVal PRVClave As String) As sp_edoprv_encRow
            Return CType(Me.Rows.Find(New Object() {PRVClave}),sp_edoprv_encRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_edoprv_encDataTable = CType(MyBase.Clone,sp_edoprv_encDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_edoprv_encDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPRVClave = MyBase.Columns("PRVClave")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoPrv = MyBase.Columns("SaldoPrv")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
            Me.columnDiasCredito = MyBase.Columns("DiasCredito")
            Me.columnTel1 = MyBase.Columns("Tel1")
            Me.columnTel2 = MyBase.Columns("Tel2")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnContacto = MyBase.Columns("Contacto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPRVClave = New Global.System.Data.DataColumn("PRVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRVClave)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoPrv = New Global.System.Data.DataColumn("SaldoPrv", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoPrv)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.columnDiasCredito = New Global.System.Data.DataColumn("DiasCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCredito)
            Me.columnTel1 = New Global.System.Data.DataColumn("Tel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel1)
            Me.columnTel2 = New Global.System.Data.DataColumn("Tel2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTel2)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnContacto = New Global.System.Data.DataColumn("Contacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContacto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnPRVClave}, true))
            Me.columnPRVClave.AllowDBNull = false
            Me.columnPRVClave.Unique = true
            Me.columnPRVClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnCalle.MaxLength = 128
            Me.columnDomicilio1.MaxLength = 80
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
            Me.columnTel1.MaxLength = 15
            Me.columnTel2.MaxLength = 15
            Me.columnEmail.MaxLength = 128
            Me.columnContacto.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_edoprv_encRow() As sp_edoprv_encRow
            Return CType(Me.NewRow,sp_edoprv_encRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_edoprv_encRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_edoprv_encRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_edoprv_encRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_encRowChanged(Me, New sp_edoprv_encRowChangeEvent(CType(e.Row,sp_edoprv_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_edoprv_encRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_encRowChanging(Me, New sp_edoprv_encRowChangeEvent(CType(e.Row,sp_edoprv_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_edoprv_encRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_encRowDeleted(Me, New sp_edoprv_encRowChangeEvent(CType(e.Row,sp_edoprv_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_edoprv_encRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_edoprv_encRowDeleting(Me, New sp_edoprv_encRowChangeEvent(CType(e.Row,sp_edoprv_encRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_edoprv_encRow(ByVal row As sp_edoprv_encRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_edoprv_encDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_muestra_loteDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_muestra_loteRow)
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnCveCte As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnCvePro As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnLote As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnEntrada As Global.System.Data.DataColumn
        
        Private columnSalida As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_muestra_lote"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CveCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCveCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CveProColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCvePro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLote
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntradaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntrada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_muestra_loteRow
            Get
                Return CType(Me.Rows(index),sp_muestra_loteRow)
            End Get
        End Property
        
        Public Event sp_muestra_loteRowChanging As sp_muestra_loteRowChangeEventHandler
        
        Public Event sp_muestra_loteRowChanged As sp_muestra_loteRowChangeEventHandler
        
        Public Event sp_muestra_loteRowDeleting As sp_muestra_loteRowChangeEventHandler
        
        Public Event sp_muestra_loteRowDeleted As sp_muestra_loteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_muestra_loteRow(ByVal row As sp_muestra_loteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_muestra_loteRow(ByVal Folio As String, ByVal CveCte As String, ByVal RazonSocial As String, ByVal CvePro As String, ByVal Nombre As String, ByVal MFechaHora As Date, ByVal Lote As String, ByVal Tipo As String, ByVal Entrada As Double, ByVal Salida As Double) As sp_muestra_loteRow
            Dim rowsp_muestra_loteRow As sp_muestra_loteRow = CType(Me.NewRow,sp_muestra_loteRow)
            Dim columnValuesArray() As Object = New Object() {Folio, CveCte, RazonSocial, CvePro, Nombre, MFechaHora, Lote, Tipo, Entrada, Salida}
            rowsp_muestra_loteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_muestra_loteRow)
            Return rowsp_muestra_loteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_muestra_loteDataTable = CType(MyBase.Clone,sp_muestra_loteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_muestra_loteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnCveCte = MyBase.Columns("CveCte")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnCvePro = MyBase.Columns("CvePro")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnLote = MyBase.Columns("Lote")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnEntrada = MyBase.Columns("Entrada")
            Me.columnSalida = MyBase.Columns("Salida")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnCveCte = New Global.System.Data.DataColumn("CveCte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCveCte)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnCvePro = New Global.System.Data.DataColumn("CvePro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCvePro)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnLote = New Global.System.Data.DataColumn("Lote", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLote)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnEntrada = New Global.System.Data.DataColumn("Entrada", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntrada)
            Me.columnSalida = New Global.System.Data.DataColumn("Salida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalida)
            Me.columnFolio.ReadOnly = true
            Me.columnFolio.MaxLength = 50
            Me.columnCveCte.ReadOnly = true
            Me.columnCveCte.MaxLength = 20
            Me.columnRazonSocial.ReadOnly = true
            Me.columnRazonSocial.MaxLength = 200
            Me.columnCvePro.ReadOnly = true
            Me.columnCvePro.MaxLength = 20
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 50
            Me.columnMFechaHora.ReadOnly = true
            Me.columnLote.ReadOnly = true
            Me.columnLote.MaxLength = 50
            Me.columnTipo.ReadOnly = true
            Me.columnTipo.MaxLength = 20
            Me.columnEntrada.ReadOnly = true
            Me.columnSalida.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_muestra_loteRow() As sp_muestra_loteRow
            Return CType(Me.NewRow,sp_muestra_loteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_muestra_loteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_muestra_loteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_muestra_loteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_muestra_loteRowChanged(Me, New sp_muestra_loteRowChangeEvent(CType(e.Row,sp_muestra_loteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_muestra_loteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_muestra_loteRowChanging(Me, New sp_muestra_loteRowChangeEvent(CType(e.Row,sp_muestra_loteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_muestra_loteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_muestra_loteRowDeleted(Me, New sp_muestra_loteRowChangeEvent(CType(e.Row,sp_muestra_loteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_muestra_loteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_muestra_loteRowDeleting(Me, New sp_muestra_loteRowChangeEvent(CType(e.Row,sp_muestra_loteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_muestra_loteRow(ByVal row As sp_muestra_loteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_muestra_loteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_listaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_listaRow)
        
        Private columnNLista As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_lista"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NListaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNLista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_listaRow
            Get
                Return CType(Me.Rows(index),sp_rep_listaRow)
            End Get
        End Property
        
        Public Event sp_rep_listaRowChanging As sp_rep_listaRowChangeEventHandler
        
        Public Event sp_rep_listaRowChanged As sp_rep_listaRowChangeEventHandler
        
        Public Event sp_rep_listaRowDeleting As sp_rep_listaRowChangeEventHandler
        
        Public Event sp_rep_listaRowDeleted As sp_rep_listaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_listaRow(ByVal row As sp_rep_listaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_listaRow(ByVal NLista As String) As sp_rep_listaRow
            Dim rowsp_rep_listaRow As sp_rep_listaRow = CType(Me.NewRow,sp_rep_listaRow)
            Dim columnValuesArray() As Object = New Object() {NLista}
            rowsp_rep_listaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_listaRow)
            Return rowsp_rep_listaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_listaDataTable = CType(MyBase.Clone,sp_rep_listaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_listaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNLista = MyBase.Columns("NLista")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNLista = New Global.System.Data.DataColumn("NLista", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNLista)
            Me.columnNLista.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_listaRow() As sp_rep_listaRow
            Return CType(Me.NewRow,sp_rep_listaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_listaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_listaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_listaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_listaRowChanged(Me, New sp_rep_listaRowChangeEvent(CType(e.Row,sp_rep_listaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_listaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_listaRowChanging(Me, New sp_rep_listaRowChangeEvent(CType(e.Row,sp_rep_listaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_listaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_listaRowDeleted(Me, New sp_rep_listaRowChangeEvent(CType(e.Row,sp_rep_listaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_listaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_listaRowDeleting(Me, New sp_rep_listaRowChangeEvent(CType(e.Row,sp_rep_listaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_listaRow(ByVal row As sp_rep_listaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_listaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_rangoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_rangoRow)
        
        Private columnInicial As Global.System.Data.DataColumn
        
        Private columnFinal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_rango"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_rangoRow
            Get
                Return CType(Me.Rows(index),sp_rep_rangoRow)
            End Get
        End Property
        
        Public Event sp_rep_rangoRowChanging As sp_rep_rangoRowChangeEventHandler
        
        Public Event sp_rep_rangoRowChanged As sp_rep_rangoRowChangeEventHandler
        
        Public Event sp_rep_rangoRowDeleting As sp_rep_rangoRowChangeEventHandler
        
        Public Event sp_rep_rangoRowDeleted As sp_rep_rangoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_rangoRow(ByVal row As sp_rep_rangoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_rangoRow(ByVal Inicial As Date, ByVal Final As Date) As sp_rep_rangoRow
            Dim rowsp_rep_rangoRow As sp_rep_rangoRow = CType(Me.NewRow,sp_rep_rangoRow)
            Dim columnValuesArray() As Object = New Object() {Inicial, Final}
            rowsp_rep_rangoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_rangoRow)
            Return rowsp_rep_rangoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_rangoDataTable = CType(MyBase.Clone,sp_rep_rangoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_rangoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInicial = MyBase.Columns("Inicial")
            Me.columnFinal = MyBase.Columns("Final")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInicial = New Global.System.Data.DataColumn("Inicial", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInicial)
            Me.columnFinal = New Global.System.Data.DataColumn("Final", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinal)
            Me.columnInicial.ReadOnly = true
            Me.columnFinal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_rangoRow() As sp_rep_rangoRow
            Return CType(Me.NewRow,sp_rep_rangoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_rangoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_rangoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_rangoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_rangoRowChanged(Me, New sp_rep_rangoRowChangeEvent(CType(e.Row,sp_rep_rangoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_rangoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_rangoRowChanging(Me, New sp_rep_rangoRowChangeEvent(CType(e.Row,sp_rep_rangoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_rangoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_rangoRowDeleted(Me, New sp_rep_rangoRowChangeEvent(CType(e.Row,sp_rep_rangoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_rangoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_rangoRowDeleting(Me, New sp_rep_rangoRowChangeEvent(CType(e.Row,sp_rep_rangoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_rangoRow(ByVal row As sp_rep_rangoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_rangoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_preciosDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_preciosRow)
        
        Private columnCLAClave As Global.System.Data.DataColumn
        
        Private columnCLNombre As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnNumParte As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnTOrigen As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_precios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLAClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLAClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLNombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumParteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumParte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TOrigenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTOrigen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_preciosRow
            Get
                Return CType(Me.Rows(index),sp_rep_preciosRow)
            End Get
        End Property
        
        Public Event sp_rep_preciosRowChanging As sp_rep_preciosRowChangeEventHandler
        
        Public Event sp_rep_preciosRowChanged As sp_rep_preciosRowChangeEventHandler
        
        Public Event sp_rep_preciosRowDeleting As sp_rep_preciosRowChangeEventHandler
        
        Public Event sp_rep_preciosRowDeleted As sp_rep_preciosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_preciosRow(ByVal row As sp_rep_preciosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_preciosRow(ByVal CLAClave As Integer, ByVal CLNombre As String, ByVal PROClave As String, ByVal Clave As String, ByVal Nombre As String, ByVal NumParte As String, ByVal Descripcion As String, ByVal TProducto As Integer, ByVal TOrigen As Integer, ByVal Precio As Double) As sp_rep_preciosRow
            Dim rowsp_rep_preciosRow As sp_rep_preciosRow = CType(Me.NewRow,sp_rep_preciosRow)
            Dim columnValuesArray() As Object = New Object() {CLAClave, CLNombre, PROClave, Clave, Nombre, NumParte, Descripcion, TProducto, TOrigen, Precio}
            rowsp_rep_preciosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_preciosRow)
            Return rowsp_rep_preciosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCLAClavePROClave(ByVal CLAClave As Integer, ByVal PROClave As String) As sp_rep_preciosRow
            Return CType(Me.Rows.Find(New Object() {CLAClave, PROClave}),sp_rep_preciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_preciosDataTable = CType(MyBase.Clone,sp_rep_preciosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_preciosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCLAClave = MyBase.Columns("CLAClave")
            Me.columnCLNombre = MyBase.Columns("CLNombre")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnNumParte = MyBase.Columns("NumParte")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnTOrigen = MyBase.Columns("TOrigen")
            Me.columnPrecio = MyBase.Columns("Precio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCLAClave = New Global.System.Data.DataColumn("CLAClave", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLAClave)
            Me.columnCLNombre = New Global.System.Data.DataColumn("CLNombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLNombre)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnNumParte = New Global.System.Data.DataColumn("NumParte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumParte)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnTOrigen = New Global.System.Data.DataColumn("TOrigen", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTOrigen)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCLAClave, Me.columnPROClave}, true))
            Me.columnCLAClave.AllowDBNull = false
            Me.columnCLNombre.MaxLength = 60
            Me.columnPROClave.AllowDBNull = false
            Me.columnPROClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnNumParte.MaxLength = 20
            Me.columnDescripcion.MaxLength = 60
            Me.columnPrecio.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_preciosRow() As sp_rep_preciosRow
            Return CType(Me.NewRow,sp_rep_preciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_preciosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_preciosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_preciosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_preciosRowChanged(Me, New sp_rep_preciosRowChangeEvent(CType(e.Row,sp_rep_preciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_preciosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_preciosRowChanging(Me, New sp_rep_preciosRowChangeEvent(CType(e.Row,sp_rep_preciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_preciosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_preciosRowDeleted(Me, New sp_rep_preciosRowChangeEvent(CType(e.Row,sp_rep_preciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_preciosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_preciosRowDeleting(Me, New sp_rep_preciosRowChangeEvent(CType(e.Row,sp_rep_preciosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_preciosRow(ByVal row As sp_rep_preciosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_preciosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_ingresoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_ingresoRow)
        
        Private columnINGClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnRegistro As Global.System.Data.DataColumn
        
        Private columnAutorizo As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnCEstado As Global.System.Data.DataColumn
        
        Private columnCAlmacen As Global.System.Data.DataColumn
        
        Private columnCRegistro As Global.System.Data.DataColumn
        
        Private columnCAutorizo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_ingreso"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property INGClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnINGClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_ingresoRow
            Get
                Return CType(Me.Rows(index),sp_rep_ingresoRow)
            End Get
        End Property
        
        Public Event sp_rep_ingresoRowChanging As sp_rep_ingresoRowChangeEventHandler
        
        Public Event sp_rep_ingresoRowChanged As sp_rep_ingresoRowChangeEventHandler
        
        Public Event sp_rep_ingresoRowDeleting As sp_rep_ingresoRowChangeEventHandler
        
        Public Event sp_rep_ingresoRowDeleted As sp_rep_ingresoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_ingresoRow(ByVal row As sp_rep_ingresoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_ingresoRow( _
                    ByVal INGClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal ALMClave As String,  _
                    ByVal Referencia As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Registro As String,  _
                    ByVal Autorizo As String,  _
                    ByVal Notas As String,  _
                    ByVal Estado As Integer,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal CEstado As String,  _
                    ByVal CAlmacen As String,  _
                    ByVal CRegistro As String,  _
                    ByVal CAutorizo As String) As sp_rep_ingresoRow
            Dim rowsp_rep_ingresoRow As sp_rep_ingresoRow = CType(Me.NewRow,sp_rep_ingresoRow)
            Dim columnValuesArray() As Object = New Object() {INGClave, Periodo, Mes, ALMClave, Referencia, FechaRegistro, Registro, Autorizo, Notas, Estado, MFechaHora, MUsuarioId, CEstado, CAlmacen, CRegistro, CAutorizo}
            rowsp_rep_ingresoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_ingresoRow)
            Return rowsp_rep_ingresoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByINGClave(ByVal INGClave As String) As sp_rep_ingresoRow
            Return CType(Me.Rows.Find(New Object() {INGClave}),sp_rep_ingresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_ingresoDataTable = CType(MyBase.Clone,sp_rep_ingresoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_ingresoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnINGClave = MyBase.Columns("INGClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnRegistro = MyBase.Columns("Registro")
            Me.columnAutorizo = MyBase.Columns("Autorizo")
            Me.columnNotas = MyBase.Columns("Notas")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnCEstado = MyBase.Columns("CEstado")
            Me.columnCAlmacen = MyBase.Columns("CAlmacen")
            Me.columnCRegistro = MyBase.Columns("CRegistro")
            Me.columnCAutorizo = MyBase.Columns("CAutorizo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnINGClave = New Global.System.Data.DataColumn("INGClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnINGClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnRegistro = New Global.System.Data.DataColumn("Registro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistro)
            Me.columnAutorizo = New Global.System.Data.DataColumn("Autorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizo)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnCEstado = New Global.System.Data.DataColumn("CEstado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEstado)
            Me.columnCAlmacen = New Global.System.Data.DataColumn("CAlmacen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAlmacen)
            Me.columnCRegistro = New Global.System.Data.DataColumn("CRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRegistro)
            Me.columnCAutorizo = New Global.System.Data.DataColumn("CAutorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAutorizo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnINGClave}, true))
            Me.columnINGClave.AllowDBNull = false
            Me.columnINGClave.Unique = true
            Me.columnINGClave.MaxLength = 20
            Me.columnALMClave.MaxLength = 20
            Me.columnReferencia.MaxLength = 50
            Me.columnRegistro.MaxLength = 20
            Me.columnAutorizo.MaxLength = 20
            Me.columnNotas.MaxLength = 200
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnCEstado.ReadOnly = true
            Me.columnCEstado.MaxLength = 40
            Me.columnCAlmacen.ReadOnly = true
            Me.columnCAlmacen.MaxLength = 50
            Me.columnCRegistro.ReadOnly = true
            Me.columnCRegistro.MaxLength = 63
            Me.columnCAutorizo.ReadOnly = true
            Me.columnCAutorizo.MaxLength = 63
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_ingresoRow() As sp_rep_ingresoRow
            Return CType(Me.NewRow,sp_rep_ingresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_ingresoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_ingresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_ingresoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ingresoRowChanged(Me, New sp_rep_ingresoRowChangeEvent(CType(e.Row,sp_rep_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_ingresoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ingresoRowChanging(Me, New sp_rep_ingresoRowChangeEvent(CType(e.Row,sp_rep_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_ingresoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ingresoRowDeleted(Me, New sp_rep_ingresoRowChangeEvent(CType(e.Row,sp_rep_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_ingresoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ingresoRowDeleting(Me, New sp_rep_ingresoRowChangeEvent(CType(e.Row,sp_rep_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_ingresoRow(ByVal row As sp_rep_ingresoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_ingresoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_detalle_ingresoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_detalle_ingresoRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnGTIN As Global.System.Data.DataColumn
        
        Private columnUNDClave As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_detalle_ingreso"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GTINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGTIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UNDClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUNDClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_detalle_ingresoRow
            Get
                Return CType(Me.Rows(index),sp_rep_detalle_ingresoRow)
            End Get
        End Property
        
        Public Event sp_rep_detalle_ingresoRowChanging As sp_rep_detalle_ingresoRowChangeEventHandler
        
        Public Event sp_rep_detalle_ingresoRowChanged As sp_rep_detalle_ingresoRowChangeEventHandler
        
        Public Event sp_rep_detalle_ingresoRowDeleting As sp_rep_detalle_ingresoRowChangeEventHandler
        
        Public Event sp_rep_detalle_ingresoRowDeleted As sp_rep_detalle_ingresoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_detalle_ingresoRow(ByVal row As sp_rep_detalle_ingresoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_detalle_ingresoRow(ByVal ID As String, ByVal PROClave As String, ByVal TProducto As Integer, ByVal GTIN As String, ByVal UNDClave As String, ByVal Clave As String, ByVal Nombre As String, ByVal Cantidad As Double, ByVal Costo As Double, ByVal Subtotal As Double) As sp_rep_detalle_ingresoRow
            Dim rowsp_rep_detalle_ingresoRow As sp_rep_detalle_ingresoRow = CType(Me.NewRow,sp_rep_detalle_ingresoRow)
            Dim columnValuesArray() As Object = New Object() {ID, PROClave, TProducto, GTIN, UNDClave, Clave, Nombre, Cantidad, Costo, Subtotal}
            rowsp_rep_detalle_ingresoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_detalle_ingresoRow)
            Return rowsp_rep_detalle_ingresoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_detalle_ingresoDataTable = CType(MyBase.Clone,sp_rep_detalle_ingresoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_detalle_ingresoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnGTIN = MyBase.Columns("GTIN")
            Me.columnUNDClave = MyBase.Columns("UNDClave")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnGTIN = New Global.System.Data.DataColumn("GTIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGTIN)
            Me.columnUNDClave = New Global.System.Data.DataColumn("UNDClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUNDClave)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 20
            Me.columnPROClave.AllowDBNull = false
            Me.columnPROClave.MaxLength = 20
            Me.columnGTIN.MaxLength = 20
            Me.columnUNDClave.AllowDBNull = false
            Me.columnUNDClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnSubtotal.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_detalle_ingresoRow() As sp_rep_detalle_ingresoRow
            Return CType(Me.NewRow,sp_rep_detalle_ingresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_detalle_ingresoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_detalle_ingresoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_detalle_ingresoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ingresoRowChanged(Me, New sp_rep_detalle_ingresoRowChangeEvent(CType(e.Row,sp_rep_detalle_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_detalle_ingresoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ingresoRowChanging(Me, New sp_rep_detalle_ingresoRowChangeEvent(CType(e.Row,sp_rep_detalle_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_detalle_ingresoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ingresoRowDeleted(Me, New sp_rep_detalle_ingresoRowChangeEvent(CType(e.Row,sp_rep_detalle_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_detalle_ingresoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ingresoRowDeleting(Me, New sp_rep_detalle_ingresoRowChangeEvent(CType(e.Row,sp_rep_detalle_ingresoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_detalle_ingresoRow(ByVal row As sp_rep_detalle_ingresoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_detalle_ingresoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_logo_companiaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_logo_companiaRow)
        
        Private columnlogo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_logo_compania"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property logoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlogo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_logo_companiaRow
            Get
                Return CType(Me.Rows(index),sp_logo_companiaRow)
            End Get
        End Property
        
        Public Event sp_logo_companiaRowChanging As sp_logo_companiaRowChangeEventHandler
        
        Public Event sp_logo_companiaRowChanged As sp_logo_companiaRowChangeEventHandler
        
        Public Event sp_logo_companiaRowDeleting As sp_logo_companiaRowChangeEventHandler
        
        Public Event sp_logo_companiaRowDeleted As sp_logo_companiaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_logo_companiaRow(ByVal row As sp_logo_companiaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_logo_companiaRow(ByVal logo() As Byte) As sp_logo_companiaRow
            Dim rowsp_logo_companiaRow As sp_logo_companiaRow = CType(Me.NewRow,sp_logo_companiaRow)
            Dim columnValuesArray() As Object = New Object() {logo}
            rowsp_logo_companiaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_logo_companiaRow)
            Return rowsp_logo_companiaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_logo_companiaDataTable = CType(MyBase.Clone,sp_logo_companiaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_logo_companiaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnlogo = MyBase.Columns("logo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnlogo = New Global.System.Data.DataColumn("logo", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlogo)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_logo_companiaRow() As sp_logo_companiaRow
            Return CType(Me.NewRow,sp_logo_companiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_logo_companiaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_logo_companiaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_logo_companiaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_logo_companiaRowChanged(Me, New sp_logo_companiaRowChangeEvent(CType(e.Row,sp_logo_companiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_logo_companiaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_logo_companiaRowChanging(Me, New sp_logo_companiaRowChangeEvent(CType(e.Row,sp_logo_companiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_logo_companiaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_logo_companiaRowDeleted(Me, New sp_logo_companiaRowChangeEvent(CType(e.Row,sp_logo_companiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_logo_companiaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_logo_companiaRowDeleting(Me, New sp_logo_companiaRowChangeEvent(CType(e.Row,sp_logo_companiaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_logo_companiaRow(ByVal row As sp_logo_companiaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_logo_companiaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_publicidadDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_publicidadRow)
        
        Private columnPublicidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_publicidad"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PublicidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPublicidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_publicidadRow
            Get
                Return CType(Me.Rows(index),sp_recupera_publicidadRow)
            End Get
        End Property
        
        Public Event sp_recupera_publicidadRowChanging As sp_recupera_publicidadRowChangeEventHandler
        
        Public Event sp_recupera_publicidadRowChanged As sp_recupera_publicidadRowChangeEventHandler
        
        Public Event sp_recupera_publicidadRowDeleting As sp_recupera_publicidadRowChangeEventHandler
        
        Public Event sp_recupera_publicidadRowDeleted As sp_recupera_publicidadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_publicidadRow(ByVal row As sp_recupera_publicidadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_publicidadRow(ByVal Publicidad() As Byte) As sp_recupera_publicidadRow
            Dim rowsp_recupera_publicidadRow As sp_recupera_publicidadRow = CType(Me.NewRow,sp_recupera_publicidadRow)
            Dim columnValuesArray() As Object = New Object() {Publicidad}
            rowsp_recupera_publicidadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_publicidadRow)
            Return rowsp_recupera_publicidadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_publicidadDataTable = CType(MyBase.Clone,sp_recupera_publicidadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_publicidadDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPublicidad = MyBase.Columns("Publicidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPublicidad = New Global.System.Data.DataColumn("Publicidad", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPublicidad)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_publicidadRow() As sp_recupera_publicidadRow
            Return CType(Me.NewRow,sp_recupera_publicidadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_publicidadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_publicidadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_publicidadRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_publicidadRowChanged(Me, New sp_recupera_publicidadRowChangeEvent(CType(e.Row,sp_recupera_publicidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_publicidadRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_publicidadRowChanging(Me, New sp_recupera_publicidadRowChangeEvent(CType(e.Row,sp_recupera_publicidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_publicidadRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_publicidadRowDeleted(Me, New sp_recupera_publicidadRowChangeEvent(CType(e.Row,sp_recupera_publicidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_publicidadRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_publicidadRowDeleting(Me, New sp_recupera_publicidadRowChangeEvent(CType(e.Row,sp_recupera_publicidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_publicidadRow(ByVal row As sp_recupera_publicidadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_publicidadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_recDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_recRow)
        
        Private columnABNClave As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnCTEClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnTipoPago As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnBNKClave As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        Private columnBaja As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnFormaPago As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_rec"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ABNClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnABNClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BNKClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBNKClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_recRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_recRow)
            End Get
        End Property
        
        Public Event sp_encabezado_recRowChanging As sp_encabezado_recRowChangeEventHandler
        
        Public Event sp_encabezado_recRowChanged As sp_encabezado_recRowChangeEventHandler
        
        Public Event sp_encabezado_recRowDeleting As sp_encabezado_recRowChangeEventHandler
        
        Public Event sp_encabezado_recRowDeleted As sp_encabezado_recRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_recRow(ByVal row As sp_encabezado_recRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_recRow( _
                    ByVal ABNClave As String,  _
                    ByVal CAJClave As String,  _
                    ByVal CTEClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal TipoPago As Integer,  _
                    ByVal Moneda As String,  _
                    ByVal Importe As Double,  _
                    ByVal Saldo As Double,  _
                    ByVal BNKClave As String,  _
                    ByVal Referencia As String,  _
                    ByVal Nota As String,  _
                    ByVal Baja As Boolean,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal FormaPago As String,  _
                    ByVal Calle As String,  _
                    ByVal Domicilio1 As String,  _
                    ByVal Domicilio2 As String) As sp_encabezado_recRow
            Dim rowsp_encabezado_recRow As sp_encabezado_recRow = CType(Me.NewRow,sp_encabezado_recRow)
            Dim columnValuesArray() As Object = New Object() {ABNClave, CAJClave, CTEClave, Periodo, Mes, TipoPago, Moneda, Importe, Saldo, BNKClave, Referencia, Nota, Baja, MFechaHora, MUsuarioId, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, FormaPago, Calle, Domicilio1, Domicilio2}
            rowsp_encabezado_recRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_recRow)
            Return rowsp_encabezado_recRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByABNClave(ByVal ABNClave As String) As sp_encabezado_recRow
            Return CType(Me.Rows.Find(New Object() {ABNClave}),sp_encabezado_recRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_recDataTable = CType(MyBase.Clone,sp_encabezado_recDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_recDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnABNClave = MyBase.Columns("ABNClave")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnCTEClave = MyBase.Columns("CTEClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnTipoPago = MyBase.Columns("TipoPago")
            Me.columnMoneda = MyBase.Columns("Moneda")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnBNKClave = MyBase.Columns("BNKClave")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnNota = MyBase.Columns("Nota")
            Me.columnBaja = MyBase.Columns("Baja")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnFormaPago = MyBase.Columns("FormaPago")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnABNClave = New Global.System.Data.DataColumn("ABNClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnABNClave)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnCTEClave = New Global.System.Data.DataColumn("CTEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTEClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnTipoPago = New Global.System.Data.DataColumn("TipoPago", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoPago)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnBNKClave = New Global.System.Data.DataColumn("BNKClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBNKClave)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.columnBaja = New Global.System.Data.DataColumn("Baja", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaja)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnFormaPago = New Global.System.Data.DataColumn("FormaPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormaPago)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnABNClave}, true))
            Me.columnABNClave.AllowDBNull = false
            Me.columnABNClave.Unique = true
            Me.columnABNClave.MaxLength = 20
            Me.columnCAJClave.MaxLength = 20
            Me.columnCTEClave.MaxLength = 20
            Me.columnMoneda.MaxLength = 20
            Me.columnBNKClave.MaxLength = 20
            Me.columnReferencia.MaxLength = 50
            Me.columnNota.MaxLength = 100
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnFormaPago.MaxLength = 40
            Me.columnCalle.ReadOnly = true
            Me.columnCalle.MaxLength = 150
            Me.columnDomicilio1.ReadOnly = true
            Me.columnDomicilio1.MaxLength = 92
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_recRow() As sp_encabezado_recRow
            Return CType(Me.NewRow,sp_encabezado_recRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_recRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_recRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_recRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_recRowChanged(Me, New sp_encabezado_recRowChangeEvent(CType(e.Row,sp_encabezado_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_recRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_recRowChanging(Me, New sp_encabezado_recRowChangeEvent(CType(e.Row,sp_encabezado_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_recRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_recRowDeleted(Me, New sp_encabezado_recRowChangeEvent(CType(e.Row,sp_encabezado_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_recRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_recRowDeleting(Me, New sp_encabezado_recRowChangeEvent(CType(e.Row,sp_encabezado_recRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_recRow(ByVal row As sp_encabezado_recRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_recDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_transferenciaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_transferenciaRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_transferencia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_transferenciaRow
            Get
                Return CType(Me.Rows(index),sp_detalle_transferenciaRow)
            End Get
        End Property
        
        Public Event sp_detalle_transferenciaRowChanging As sp_detalle_transferenciaRowChangeEventHandler
        
        Public Event sp_detalle_transferenciaRowChanged As sp_detalle_transferenciaRowChangeEventHandler
        
        Public Event sp_detalle_transferenciaRowDeleting As sp_detalle_transferenciaRowChangeEventHandler
        
        Public Event sp_detalle_transferenciaRowDeleted As sp_detalle_transferenciaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_transferenciaRow(ByVal row As sp_detalle_transferenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_transferenciaRow(ByVal ID As String, ByVal PROClave As String, ByVal TProducto As Integer, ByVal Costo As Double, ByVal Total As Double, ByVal Cantidad As Double, ByVal Clave As String, ByVal Nombre As String, ByVal Unidad As String) As sp_detalle_transferenciaRow
            Dim rowsp_detalle_transferenciaRow As sp_detalle_transferenciaRow = CType(Me.NewRow,sp_detalle_transferenciaRow)
            Dim columnValuesArray() As Object = New Object() {ID, PROClave, TProducto, Costo, Total, Cantidad, Clave, Nombre, Unidad}
            rowsp_detalle_transferenciaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_transferenciaRow)
            Return rowsp_detalle_transferenciaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDPROClave(ByVal ID As String, ByVal PROClave As String) As sp_detalle_transferenciaRow
            Return CType(Me.Rows.Find(New Object() {ID, PROClave}),sp_detalle_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_transferenciaDataTable = CType(MyBase.Clone,sp_detalle_transferenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_transferenciaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnUnidad = MyBase.Columns("Unidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID, Me.columnPROClave}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 20
            Me.columnPROClave.AllowDBNull = false
            Me.columnPROClave.MaxLength = 20
            Me.columnTotal.ReadOnly = true
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnUnidad.ReadOnly = true
            Me.columnUnidad.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_transferenciaRow() As sp_detalle_transferenciaRow
            Return CType(Me.NewRow,sp_detalle_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_transferenciaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_transferenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_transferenciaRowChanged(Me, New sp_detalle_transferenciaRowChangeEvent(CType(e.Row,sp_detalle_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_transferenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_transferenciaRowChanging(Me, New sp_detalle_transferenciaRowChangeEvent(CType(e.Row,sp_detalle_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_transferenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_transferenciaRowDeleted(Me, New sp_detalle_transferenciaRowChangeEvent(CType(e.Row,sp_detalle_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_transferenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_transferenciaRowDeleting(Me, New sp_detalle_transferenciaRowChangeEvent(CType(e.Row,sp_detalle_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_transferenciaRow(ByVal row As sp_detalle_transferenciaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_transferenciaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_referencia_facturaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_referencia_facturaRow)
        
        Private columnNCClave As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_referencia_factura"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_referencia_facturaRow
            Get
                Return CType(Me.Rows(index),sp_referencia_facturaRow)
            End Get
        End Property
        
        Public Event sp_referencia_facturaRowChanging As sp_referencia_facturaRowChangeEventHandler
        
        Public Event sp_referencia_facturaRowChanged As sp_referencia_facturaRowChangeEventHandler
        
        Public Event sp_referencia_facturaRowDeleting As sp_referencia_facturaRowChangeEventHandler
        
        Public Event sp_referencia_facturaRowDeleted As sp_referencia_facturaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_referencia_facturaRow(ByVal row As sp_referencia_facturaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_referencia_facturaRow(ByVal NCClave As String, ByVal Serie As String, ByVal Folio As Double) As sp_referencia_facturaRow
            Dim rowsp_referencia_facturaRow As sp_referencia_facturaRow = CType(Me.NewRow,sp_referencia_facturaRow)
            Dim columnValuesArray() As Object = New Object() {NCClave, Serie, Folio}
            rowsp_referencia_facturaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_referencia_facturaRow)
            Return rowsp_referencia_facturaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNCClave(ByVal NCClave As String) As sp_referencia_facturaRow
            Return CType(Me.Rows.Find(New Object() {NCClave}),sp_referencia_facturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_referencia_facturaDataTable = CType(MyBase.Clone,sp_referencia_facturaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_referencia_facturaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNCClave = MyBase.Columns("NCClave")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnFolio = MyBase.Columns("Folio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNCClave = New Global.System.Data.DataColumn("NCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCClave)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNCClave}, true))
            Me.columnNCClave.AllowDBNull = false
            Me.columnNCClave.Unique = true
            Me.columnNCClave.MaxLength = 20
            Me.columnSerie.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_referencia_facturaRow() As sp_referencia_facturaRow
            Return CType(Me.NewRow,sp_referencia_facturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_referencia_facturaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_referencia_facturaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_referencia_facturaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_referencia_facturaRowChanged(Me, New sp_referencia_facturaRowChangeEvent(CType(e.Row,sp_referencia_facturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_referencia_facturaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_referencia_facturaRowChanging(Me, New sp_referencia_facturaRowChangeEvent(CType(e.Row,sp_referencia_facturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_referencia_facturaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_referencia_facturaRowDeleted(Me, New sp_referencia_facturaRowChangeEvent(CType(e.Row,sp_referencia_facturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_referencia_facturaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_referencia_facturaRowDeleting(Me, New sp_referencia_facturaRowChangeEvent(CType(e.Row,sp_referencia_facturaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_referencia_facturaRow(ByVal row As sp_referencia_facturaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_referencia_facturaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_detalle_ubcingDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_detalle_ubcingRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnUBCClave As Global.System.Data.DataColumn
        
        Private columnPosicion As Global.System.Data.DataColumn
        
        Private columnColumna As Global.System.Data.DataColumn
        
        Private columnNivel As Global.System.Data.DataColumn
        
        Private columnESTClave As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_detalle_ubcing"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UBCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUBCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosicionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosicion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NivelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESTClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_detalle_ubcingRow
            Get
                Return CType(Me.Rows(index),sp_rep_detalle_ubcingRow)
            End Get
        End Property
        
        Public Event sp_rep_detalle_ubcingRowChanging As sp_rep_detalle_ubcingRowChangeEventHandler
        
        Public Event sp_rep_detalle_ubcingRowChanged As sp_rep_detalle_ubcingRowChangeEventHandler
        
        Public Event sp_rep_detalle_ubcingRowDeleting As sp_rep_detalle_ubcingRowChangeEventHandler
        
        Public Event sp_rep_detalle_ubcingRowDeleted As sp_rep_detalle_ubcingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_detalle_ubcingRow(ByVal row As sp_rep_detalle_ubcingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_detalle_ubcingRow(ByVal ID As String, ByVal UBCClave As String, ByVal Posicion As String, ByVal Columna As Integer, ByVal Nivel As Integer, ByVal ESTClave As String) As sp_rep_detalle_ubcingRow
            Dim rowsp_rep_detalle_ubcingRow As sp_rep_detalle_ubcingRow = CType(Me.NewRow,sp_rep_detalle_ubcingRow)
            Dim columnValuesArray() As Object = New Object() {ID, UBCClave, Posicion, Columna, Nivel, ESTClave}
            rowsp_rep_detalle_ubcingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_detalle_ubcingRow)
            Return rowsp_rep_detalle_ubcingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_detalle_ubcingDataTable = CType(MyBase.Clone,sp_rep_detalle_ubcingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_detalle_ubcingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnUBCClave = MyBase.Columns("UBCClave")
            Me.columnPosicion = MyBase.Columns("Posicion")
            Me.columnColumna = MyBase.Columns("Columna")
            Me.columnNivel = MyBase.Columns("Nivel")
            Me.columnESTClave = MyBase.Columns("ESTClave")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnUBCClave = New Global.System.Data.DataColumn("UBCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUBCClave)
            Me.columnPosicion = New Global.System.Data.DataColumn("Posicion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosicion)
            Me.columnColumna = New Global.System.Data.DataColumn("Columna", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumna)
            Me.columnNivel = New Global.System.Data.DataColumn("Nivel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNivel)
            Me.columnESTClave = New Global.System.Data.DataColumn("ESTClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESTClave)
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 20
            Me.columnUBCClave.AllowDBNull = false
            Me.columnUBCClave.MaxLength = 20
            Me.columnPosicion.MaxLength = 20
            Me.columnESTClave.AllowDBNull = false
            Me.columnESTClave.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_detalle_ubcingRow() As sp_rep_detalle_ubcingRow
            Return CType(Me.NewRow,sp_rep_detalle_ubcingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_detalle_ubcingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_detalle_ubcingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_detalle_ubcingRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ubcingRowChanged(Me, New sp_rep_detalle_ubcingRowChangeEvent(CType(e.Row,sp_rep_detalle_ubcingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_detalle_ubcingRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ubcingRowChanging(Me, New sp_rep_detalle_ubcingRowChangeEvent(CType(e.Row,sp_rep_detalle_ubcingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_detalle_ubcingRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ubcingRowDeleted(Me, New sp_rep_detalle_ubcingRowChangeEvent(CType(e.Row,sp_rep_detalle_ubcingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_detalle_ubcingRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_detalle_ubcingRowDeleting(Me, New sp_rep_detalle_ubcingRowChangeEvent(CType(e.Row,sp_rep_detalle_ubcingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_detalle_ubcingRow(ByVal row As sp_rep_detalle_ubcingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_detalle_ubcingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_busca_prod_ubcDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_busca_prod_ubcRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnC_BARRAS As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnExistencia As Global.System.Data.DataColumn
        
        Private columnApartado As Global.System.Data.DataColumn
        
        Private columnMinimo As Global.System.Data.DataColumn
        
        Private columnMaximo As Global.System.Data.DataColumn
        
        Private columnReorden As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_busca_prod_ubc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property C_BARRASColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnC_BARRAS
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApartadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApartado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinimoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinimo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaximoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaximo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReordenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReorden
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_busca_prod_ubcRow
            Get
                Return CType(Me.Rows(index),sp_busca_prod_ubcRow)
            End Get
        End Property
        
        Public Event sp_busca_prod_ubcRowChanging As sp_busca_prod_ubcRowChangeEventHandler
        
        Public Event sp_busca_prod_ubcRowChanged As sp_busca_prod_ubcRowChangeEventHandler
        
        Public Event sp_busca_prod_ubcRowDeleting As sp_busca_prod_ubcRowChangeEventHandler
        
        Public Event sp_busca_prod_ubcRowDeleted As sp_busca_prod_ubcRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_busca_prod_ubcRow(ByVal row As sp_busca_prod_ubcRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_busca_prod_ubcRow(ByVal ID As String, ByVal C_BARRAS As String, ByVal Clave As String, ByVal Nombre As String, ByVal Existencia As Double, ByVal Apartado As Double, ByVal Minimo As Double, ByVal Maximo As Double, ByVal Reorden As Double) As sp_busca_prod_ubcRow
            Dim rowsp_busca_prod_ubcRow As sp_busca_prod_ubcRow = CType(Me.NewRow,sp_busca_prod_ubcRow)
            Dim columnValuesArray() As Object = New Object() {ID, C_BARRAS, Clave, Nombre, Existencia, Apartado, Minimo, Maximo, Reorden}
            rowsp_busca_prod_ubcRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_busca_prod_ubcRow)
            Return rowsp_busca_prod_ubcRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As String) As sp_busca_prod_ubcRow
            Return CType(Me.Rows.Find(New Object() {ID}),sp_busca_prod_ubcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_busca_prod_ubcDataTable = CType(MyBase.Clone,sp_busca_prod_ubcDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_busca_prod_ubcDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnC_BARRAS = MyBase.Columns("C_BARRAS")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnExistencia = MyBase.Columns("Existencia")
            Me.columnApartado = MyBase.Columns("Apartado")
            Me.columnMinimo = MyBase.Columns("Minimo")
            Me.columnMaximo = MyBase.Columns("Maximo")
            Me.columnReorden = MyBase.Columns("Reorden")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnC_BARRAS = New Global.System.Data.DataColumn("C_BARRAS", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnC_BARRAS)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnExistencia = New Global.System.Data.DataColumn("Existencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencia)
            Me.columnApartado = New Global.System.Data.DataColumn("Apartado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApartado)
            Me.columnMinimo = New Global.System.Data.DataColumn("Minimo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinimo)
            Me.columnMaximo = New Global.System.Data.DataColumn("Maximo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaximo)
            Me.columnReorden = New Global.System.Data.DataColumn("Reorden", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReorden)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnID.MaxLength = 20
            Me.columnC_BARRAS.ReadOnly = true
            Me.columnC_BARRAS.Caption = "C.BARRAS"
            Me.columnC_BARRAS.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_busca_prod_ubcRow() As sp_busca_prod_ubcRow
            Return CType(Me.NewRow,sp_busca_prod_ubcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_busca_prod_ubcRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_busca_prod_ubcRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_busca_prod_ubcRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_busca_prod_ubcRowChanged(Me, New sp_busca_prod_ubcRowChangeEvent(CType(e.Row,sp_busca_prod_ubcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_busca_prod_ubcRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_busca_prod_ubcRowChanging(Me, New sp_busca_prod_ubcRowChangeEvent(CType(e.Row,sp_busca_prod_ubcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_busca_prod_ubcRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_busca_prod_ubcRowDeleted(Me, New sp_busca_prod_ubcRowChangeEvent(CType(e.Row,sp_busca_prod_ubcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_busca_prod_ubcRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_busca_prod_ubcRowDeleting(Me, New sp_busca_prod_ubcRowChangeEvent(CType(e.Row,sp_busca_prod_ubcRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_busca_prod_ubcRow(ByVal row As sp_busca_prod_ubcRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_busca_prod_ubcDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_ubaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_ubaRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnEST As Global.System.Data.DataColumn
        
        Private columnColumna As Global.System.Data.DataColumn
        
        Private columnNivel As Global.System.Data.DataColumn
        
        Private columnPosicion As Global.System.Data.DataColumn
        
        Private columnUbicación As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_uba"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEST
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColumnaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColumna
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NivelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNivel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PosicionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosicion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UbicaciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUbicación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_ubaRow
            Get
                Return CType(Me.Rows(index),sp_rep_ubaRow)
            End Get
        End Property
        
        Public Event sp_rep_ubaRowChanging As sp_rep_ubaRowChangeEventHandler
        
        Public Event sp_rep_ubaRowChanged As sp_rep_ubaRowChangeEventHandler
        
        Public Event sp_rep_ubaRowDeleting As sp_rep_ubaRowChangeEventHandler
        
        Public Event sp_rep_ubaRowDeleted As sp_rep_ubaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_ubaRow(ByVal row As sp_rep_ubaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_ubaRow(ByVal Clave As String, ByVal Nombre As String, ByVal EST As String, ByVal Columna As Integer, ByVal Nivel As Integer, ByVal Posicion As String, ByVal Ubicación As String) As sp_rep_ubaRow
            Dim rowsp_rep_ubaRow As sp_rep_ubaRow = CType(Me.NewRow,sp_rep_ubaRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Nombre, EST, Columna, Nivel, Posicion, Ubicación}
            rowsp_rep_ubaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_ubaRow)
            Return rowsp_rep_ubaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_ubaDataTable = CType(MyBase.Clone,sp_rep_ubaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_ubaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnEST = MyBase.Columns("EST")
            Me.columnColumna = MyBase.Columns("Columna")
            Me.columnNivel = MyBase.Columns("Nivel")
            Me.columnPosicion = MyBase.Columns("Posicion")
            Me.columnUbicación = MyBase.Columns("Ubicación")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnEST = New Global.System.Data.DataColumn("EST", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEST)
            Me.columnColumna = New Global.System.Data.DataColumn("Columna", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColumna)
            Me.columnNivel = New Global.System.Data.DataColumn("Nivel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNivel)
            Me.columnPosicion = New Global.System.Data.DataColumn("Posicion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosicion)
            Me.columnUbicación = New Global.System.Data.DataColumn("Ubicación", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUbicación)
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnEST.AllowDBNull = false
            Me.columnEST.MaxLength = 20
            Me.columnPosicion.MaxLength = 20
            Me.columnUbicación.AllowDBNull = false
            Me.columnUbicación.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_ubaRow() As sp_rep_ubaRow
            Return CType(Me.NewRow,sp_rep_ubaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_ubaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_ubaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_ubaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ubaRowChanged(Me, New sp_rep_ubaRowChangeEvent(CType(e.Row,sp_rep_ubaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_ubaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ubaRowChanging(Me, New sp_rep_ubaRowChangeEvent(CType(e.Row,sp_rep_ubaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_ubaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ubaRowDeleted(Me, New sp_rep_ubaRowChangeEvent(CType(e.Row,sp_rep_ubaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_ubaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ubaRowDeleting(Me, New sp_rep_ubaRowChangeEvent(CType(e.Row,sp_rep_ubaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_ubaRow(ByVal row As sp_rep_ubaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_ubaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_sello_facDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_sello_facRow)
        
        Private columnFACClave As Global.System.Data.DataColumn
        
        Private columncadenaOriginal As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnCertificado64 As Global.System.Data.DataColumn
        
        Private columnCBB As Global.System.Data.DataColumn
        
        Private columnUUID As Global.System.Data.DataColumn
        
        Private columnSelloSAT As Global.System.Data.DataColumn
        
        Private columnCertificadoSAT As Global.System.Data.DataColumn
        
        Private columnfechaTimbrado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_sello_fac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cadenaOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncadenaOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Certificado64Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificado64
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelloSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CertificadoSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificadoSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaTimbradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaTimbrado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_sello_facRow
            Get
                Return CType(Me.Rows(index),sp_sello_facRow)
            End Get
        End Property
        
        Public Event sp_sello_facRowChanging As sp_sello_facRowChangeEventHandler
        
        Public Event sp_sello_facRowChanged As sp_sello_facRowChangeEventHandler
        
        Public Event sp_sello_facRowDeleting As sp_sello_facRowChangeEventHandler
        
        Public Event sp_sello_facRowDeleted As sp_sello_facRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_sello_facRow(ByVal row As sp_sello_facRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_sello_facRow(ByVal FACClave As String, ByVal cadenaOriginal As String, ByVal Sello As String, ByVal Certificado64 As String, ByVal CBB() As Byte, ByVal UUID As String, ByVal SelloSAT As String, ByVal CertificadoSAT As String, ByVal fechaTimbrado As Date) As sp_sello_facRow
            Dim rowsp_sello_facRow As sp_sello_facRow = CType(Me.NewRow,sp_sello_facRow)
            Dim columnValuesArray() As Object = New Object() {FACClave, cadenaOriginal, Sello, Certificado64, CBB, UUID, SelloSAT, CertificadoSAT, fechaTimbrado}
            rowsp_sello_facRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_sello_facRow)
            Return rowsp_sello_facRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFACClave(ByVal FACClave As String) As sp_sello_facRow
            Return CType(Me.Rows.Find(New Object() {FACClave}),sp_sello_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_sello_facDataTable = CType(MyBase.Clone,sp_sello_facDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_sello_facDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFACClave = MyBase.Columns("FACClave")
            Me.columncadenaOriginal = MyBase.Columns("cadenaOriginal")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnCertificado64 = MyBase.Columns("Certificado64")
            Me.columnCBB = MyBase.Columns("CBB")
            Me.columnUUID = MyBase.Columns("UUID")
            Me.columnSelloSAT = MyBase.Columns("SelloSAT")
            Me.columnCertificadoSAT = MyBase.Columns("CertificadoSAT")
            Me.columnfechaTimbrado = MyBase.Columns("fechaTimbrado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFACClave = New Global.System.Data.DataColumn("FACClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACClave)
            Me.columncadenaOriginal = New Global.System.Data.DataColumn("cadenaOriginal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncadenaOriginal)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnCertificado64 = New Global.System.Data.DataColumn("Certificado64", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificado64)
            Me.columnCBB = New Global.System.Data.DataColumn("CBB", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBB)
            Me.columnUUID = New Global.System.Data.DataColumn("UUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUID)
            Me.columnSelloSAT = New Global.System.Data.DataColumn("SelloSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelloSAT)
            Me.columnCertificadoSAT = New Global.System.Data.DataColumn("CertificadoSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificadoSAT)
            Me.columnfechaTimbrado = New Global.System.Data.DataColumn("fechaTimbrado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaTimbrado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFACClave}, true))
            Me.columnFACClave.AllowDBNull = false
            Me.columnFACClave.Unique = true
            Me.columnFACClave.MaxLength = 20
            Me.columncadenaOriginal.MaxLength = 2147483647
            Me.columnSello.MaxLength = 2147483647
            Me.columnCertificado64.MaxLength = 2147483647
            Me.columnUUID.MaxLength = 50
            Me.columnSelloSAT.MaxLength = 2147483647
            Me.columnCertificadoSAT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_sello_facRow() As sp_sello_facRow
            Return CType(Me.NewRow,sp_sello_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_sello_facRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_sello_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_sello_facRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_sello_facRowChanged(Me, New sp_sello_facRowChangeEvent(CType(e.Row,sp_sello_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_sello_facRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_sello_facRowChanging(Me, New sp_sello_facRowChangeEvent(CType(e.Row,sp_sello_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_sello_facRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_sello_facRowDeleted(Me, New sp_sello_facRowChangeEvent(CType(e.Row,sp_sello_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_sello_facRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_sello_facRowDeleting(Me, New sp_sello_facRowChangeEvent(CType(e.Row,sp_sello_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_sello_facRow(ByVal row As sp_sello_facRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_sello_facDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_sello_ncDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_sello_ncRow)
        
        Private columnNCClave As Global.System.Data.DataColumn
        
        Private columncadenaOriginal As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnCertificado64 As Global.System.Data.DataColumn
        
        Private columnCBB As Global.System.Data.DataColumn
        
        Private columnUUID As Global.System.Data.DataColumn
        
        Private columnSelloSAT As Global.System.Data.DataColumn
        
        Private columnCertificadoSAT As Global.System.Data.DataColumn
        
        Private columnfechaTimbrado As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_sello_nc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cadenaOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncadenaOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Certificado64Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificado64
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelloSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CertificadoSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificadoSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaTimbradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaTimbrado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_sello_ncRow
            Get
                Return CType(Me.Rows(index),sp_sello_ncRow)
            End Get
        End Property
        
        Public Event sp_sello_ncRowChanging As sp_sello_ncRowChangeEventHandler
        
        Public Event sp_sello_ncRowChanged As sp_sello_ncRowChangeEventHandler
        
        Public Event sp_sello_ncRowDeleting As sp_sello_ncRowChangeEventHandler
        
        Public Event sp_sello_ncRowDeleted As sp_sello_ncRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_sello_ncRow(ByVal row As sp_sello_ncRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_sello_ncRow(ByVal NCClave As String, ByVal cadenaOriginal As String, ByVal Sello As String, ByVal Certificado64 As String, ByVal CBB() As Byte, ByVal UUID As String, ByVal SelloSAT As String, ByVal CertificadoSAT As String, ByVal fechaTimbrado As Date) As sp_sello_ncRow
            Dim rowsp_sello_ncRow As sp_sello_ncRow = CType(Me.NewRow,sp_sello_ncRow)
            Dim columnValuesArray() As Object = New Object() {NCClave, cadenaOriginal, Sello, Certificado64, CBB, UUID, SelloSAT, CertificadoSAT, fechaTimbrado}
            rowsp_sello_ncRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_sello_ncRow)
            Return rowsp_sello_ncRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNCClave(ByVal NCClave As String) As sp_sello_ncRow
            Return CType(Me.Rows.Find(New Object() {NCClave}),sp_sello_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_sello_ncDataTable = CType(MyBase.Clone,sp_sello_ncDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_sello_ncDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNCClave = MyBase.Columns("NCClave")
            Me.columncadenaOriginal = MyBase.Columns("cadenaOriginal")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnCertificado64 = MyBase.Columns("Certificado64")
            Me.columnCBB = MyBase.Columns("CBB")
            Me.columnUUID = MyBase.Columns("UUID")
            Me.columnSelloSAT = MyBase.Columns("SelloSAT")
            Me.columnCertificadoSAT = MyBase.Columns("CertificadoSAT")
            Me.columnfechaTimbrado = MyBase.Columns("fechaTimbrado")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNCClave = New Global.System.Data.DataColumn("NCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCClave)
            Me.columncadenaOriginal = New Global.System.Data.DataColumn("cadenaOriginal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncadenaOriginal)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnCertificado64 = New Global.System.Data.DataColumn("Certificado64", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificado64)
            Me.columnCBB = New Global.System.Data.DataColumn("CBB", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBB)
            Me.columnUUID = New Global.System.Data.DataColumn("UUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUID)
            Me.columnSelloSAT = New Global.System.Data.DataColumn("SelloSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelloSAT)
            Me.columnCertificadoSAT = New Global.System.Data.DataColumn("CertificadoSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificadoSAT)
            Me.columnfechaTimbrado = New Global.System.Data.DataColumn("fechaTimbrado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaTimbrado)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNCClave}, true))
            Me.columnNCClave.AllowDBNull = false
            Me.columnNCClave.Unique = true
            Me.columnNCClave.MaxLength = 20
            Me.columncadenaOriginal.MaxLength = 2147483647
            Me.columnSello.MaxLength = 2147483647
            Me.columnCertificado64.MaxLength = 2147483647
            Me.columnUUID.MaxLength = 50
            Me.columnSelloSAT.MaxLength = 2147483647
            Me.columnCertificadoSAT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_sello_ncRow() As sp_sello_ncRow
            Return CType(Me.NewRow,sp_sello_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_sello_ncRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_sello_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_sello_ncRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_sello_ncRowChanged(Me, New sp_sello_ncRowChangeEvent(CType(e.Row,sp_sello_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_sello_ncRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_sello_ncRowChanging(Me, New sp_sello_ncRowChangeEvent(CType(e.Row,sp_sello_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_sello_ncRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_sello_ncRowDeleted(Me, New sp_sello_ncRowChangeEvent(CType(e.Row,sp_sello_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_sello_ncRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_sello_ncRowDeleting(Me, New sp_sello_ncRowChangeEvent(CType(e.Row,sp_sello_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_sello_ncRow(ByVal row As sp_sello_ncRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_sello_ncDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_ncDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_ncRow)
        
        Private columnNCClave As Global.System.Data.DataColumn
        
        Private columnFACClave As Global.System.Data.DataColumn
        
        Private columnCTEClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnTipoCF As Global.System.Data.DataColumn
        
        Private columnVersionCF As Global.System.Data.DataColumn
        
        Private columnRegimenFiscal As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnAtendio As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columnnoAprobacion As Global.System.Data.DataColumn
        
        Private columnanoAprobacion As Global.System.Data.DataColumn
        
        Private columnfechaAprobacion As Global.System.Data.DataColumn
        
        Private columnformaDePago As Global.System.Data.DataColumn
        
        Private columnmetodoPago As Global.System.Data.DataColumn
        
        Private columnnoCertificado As Global.System.Data.DataColumn
        
        Private columnmotivo As Global.System.Data.DataColumn
        
        Private columnporcDesc As Global.System.Data.DataColumn
        
        Private columndescripcion As Global.System.Data.DataColumn
        
        Private columncosto As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        Private columnimpuestoTot As Global.System.Data.DataColumn
        
        Private columndescuentoTot As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columntipoCertificado As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMONClave As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnrCalle As Global.System.Data.DataColumn
        
        Private columnrDomicilio1 As Global.System.Data.DataColumn
        
        Private columnrDomicilio2 As Global.System.Data.DataColumn
        
        Private columnsCalle As Global.System.Data.DataColumn
        
        Private columnsDomicilio1 As Global.System.Data.DataColumn
        
        Private columnsDomicilio2 As Global.System.Data.DataColumn
        
        Private columnCompania As Global.System.Data.DataColumn
        
        Private columncRFC As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columneCalle As Global.System.Data.DataColumn
        
        Private columneDomicilio1 As Global.System.Data.DataColumn
        
        Private columneDomicilio2 As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_nc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersionCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimenFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtendioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtendio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anoAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanoAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaDePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaDePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property metodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property motivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property porcDescColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnporcDesc
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property impuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descuentoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescuentoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompaniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompania
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cRFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_ncRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_ncRow)
            End Get
        End Property
        
        Public Event sp_encabezado_ncRowChanging As sp_encabezado_ncRowChangeEventHandler
        
        Public Event sp_encabezado_ncRowChanged As sp_encabezado_ncRowChangeEventHandler
        
        Public Event sp_encabezado_ncRowDeleting As sp_encabezado_ncRowChangeEventHandler
        
        Public Event sp_encabezado_ncRowDeleted As sp_encabezado_ncRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_ncRow(ByVal row As sp_encabezado_ncRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_ncRow( _
                    ByVal NCClave As String,  _
                    ByVal FACClave As String,  _
                    ByVal CTEClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal TipoCF As Integer,  _
                    ByVal VersionCF As String,  _
                    ByVal RegimenFiscal As String,  _
                    ByVal Serie As String,  _
                    ByVal Folio As Double,  _
                    ByVal CAJClave As String,  _
                    ByVal Atendio As String,  _
                    ByVal fecha As Date,  _
                    ByVal noAprobacion As String,  _
                    ByVal anoAprobacion As Integer,  _
                    ByVal fechaAprobacion As Date,  _
                    ByVal formaDePago As String,  _
                    ByVal metodoPago As String,  _
                    ByVal noCertificado As String,  _
                    ByVal motivo As Integer,  _
                    ByVal porcDesc As Double,  _
                    ByVal descripcion As String,  _
                    ByVal costo As Double,  _
                    ByVal subTotal As Double,  _
                    ByVal impuestoTot As Double,  _
                    ByVal descuentoTot As Double,  _
                    ByVal total As Double,  _
                    ByVal tipoCertificado As String,  _
                    ByVal estado As Integer,  _
                    ByVal Tipo As Integer,  _
                    ByVal MONClave As String,  _
                    ByVal TipoCambio As Double,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal Vendedor As String,  _
                    ByVal rCalle As String,  _
                    ByVal rDomicilio1 As String,  _
                    ByVal rDomicilio2 As String,  _
                    ByVal sCalle As String,  _
                    ByVal sDomicilio1 As String,  _
                    ByVal sDomicilio2 As String,  _
                    ByVal Compania As String,  _
                    ByVal cRFC As String,  _
                    ByVal Telefono As String,  _
                    ByVal eCalle As String,  _
                    ByVal eDomicilio1 As String,  _
                    ByVal eDomicilio2 As String,  _
                    ByVal Moneda As String) As sp_encabezado_ncRow
            Dim rowsp_encabezado_ncRow As sp_encabezado_ncRow = CType(Me.NewRow,sp_encabezado_ncRow)
            Dim columnValuesArray() As Object = New Object() {NCClave, FACClave, CTEClave, Periodo, Mes, TipoCF, VersionCF, RegimenFiscal, Serie, Folio, CAJClave, Atendio, fecha, noAprobacion, anoAprobacion, fechaAprobacion, formaDePago, metodoPago, noCertificado, motivo, porcDesc, descripcion, costo, subTotal, impuestoTot, descuentoTot, total, tipoCertificado, estado, Tipo, MONClave, TipoCambio, MFechaHora, MUsuarioId, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, Vendedor, rCalle, rDomicilio1, rDomicilio2, sCalle, sDomicilio1, sDomicilio2, Compania, cRFC, Telefono, eCalle, eDomicilio1, eDomicilio2, Moneda}
            rowsp_encabezado_ncRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_ncRow)
            Return rowsp_encabezado_ncRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByNCClave(ByVal NCClave As String) As sp_encabezado_ncRow
            Return CType(Me.Rows.Find(New Object() {NCClave}),sp_encabezado_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_ncDataTable = CType(MyBase.Clone,sp_encabezado_ncDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_ncDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNCClave = MyBase.Columns("NCClave")
            Me.columnFACClave = MyBase.Columns("FACClave")
            Me.columnCTEClave = MyBase.Columns("CTEClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnTipoCF = MyBase.Columns("TipoCF")
            Me.columnVersionCF = MyBase.Columns("VersionCF")
            Me.columnRegimenFiscal = MyBase.Columns("RegimenFiscal")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnAtendio = MyBase.Columns("Atendio")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columnnoAprobacion = MyBase.Columns("noAprobacion")
            Me.columnanoAprobacion = MyBase.Columns("anoAprobacion")
            Me.columnfechaAprobacion = MyBase.Columns("fechaAprobacion")
            Me.columnformaDePago = MyBase.Columns("formaDePago")
            Me.columnmetodoPago = MyBase.Columns("metodoPago")
            Me.columnnoCertificado = MyBase.Columns("noCertificado")
            Me.columnmotivo = MyBase.Columns("motivo")
            Me.columnporcDesc = MyBase.Columns("porcDesc")
            Me.columndescripcion = MyBase.Columns("descripcion")
            Me.columncosto = MyBase.Columns("costo")
            Me.columnsubTotal = MyBase.Columns("subTotal")
            Me.columnimpuestoTot = MyBase.Columns("impuestoTot")
            Me.columndescuentoTot = MyBase.Columns("descuentoTot")
            Me.columntotal = MyBase.Columns("total")
            Me.columntipoCertificado = MyBase.Columns("tipoCertificado")
            Me.columnestado = MyBase.Columns("estado")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMONClave = MyBase.Columns("MONClave")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnrCalle = MyBase.Columns("rCalle")
            Me.columnrDomicilio1 = MyBase.Columns("rDomicilio1")
            Me.columnrDomicilio2 = MyBase.Columns("rDomicilio2")
            Me.columnsCalle = MyBase.Columns("sCalle")
            Me.columnsDomicilio1 = MyBase.Columns("sDomicilio1")
            Me.columnsDomicilio2 = MyBase.Columns("sDomicilio2")
            Me.columnCompania = MyBase.Columns("Compania")
            Me.columncRFC = MyBase.Columns("cRFC")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columneCalle = MyBase.Columns("eCalle")
            Me.columneDomicilio1 = MyBase.Columns("eDomicilio1")
            Me.columneDomicilio2 = MyBase.Columns("eDomicilio2")
            Me.columnMoneda = MyBase.Columns("Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNCClave = New Global.System.Data.DataColumn("NCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCClave)
            Me.columnFACClave = New Global.System.Data.DataColumn("FACClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACClave)
            Me.columnCTEClave = New Global.System.Data.DataColumn("CTEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTEClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnTipoCF = New Global.System.Data.DataColumn("TipoCF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCF)
            Me.columnVersionCF = New Global.System.Data.DataColumn("VersionCF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersionCF)
            Me.columnRegimenFiscal = New Global.System.Data.DataColumn("RegimenFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimenFiscal)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnAtendio = New Global.System.Data.DataColumn("Atendio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtendio)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columnnoAprobacion = New Global.System.Data.DataColumn("noAprobacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoAprobacion)
            Me.columnanoAprobacion = New Global.System.Data.DataColumn("anoAprobacion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanoAprobacion)
            Me.columnfechaAprobacion = New Global.System.Data.DataColumn("fechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaAprobacion)
            Me.columnformaDePago = New Global.System.Data.DataColumn("formaDePago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaDePago)
            Me.columnmetodoPago = New Global.System.Data.DataColumn("metodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmetodoPago)
            Me.columnnoCertificado = New Global.System.Data.DataColumn("noCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoCertificado)
            Me.columnmotivo = New Global.System.Data.DataColumn("motivo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmotivo)
            Me.columnporcDesc = New Global.System.Data.DataColumn("porcDesc", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnporcDesc)
            Me.columndescripcion = New Global.System.Data.DataColumn("descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescripcion)
            Me.columncosto = New Global.System.Data.DataColumn("costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncosto)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columnimpuestoTot = New Global.System.Data.DataColumn("impuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimpuestoTot)
            Me.columndescuentoTot = New Global.System.Data.DataColumn("descuentoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescuentoTot)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columntipoCertificado = New Global.System.Data.DataColumn("tipoCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoCertificado)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMONClave = New Global.System.Data.DataColumn("MONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONClave)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnrCalle = New Global.System.Data.DataColumn("rCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrCalle)
            Me.columnrDomicilio1 = New Global.System.Data.DataColumn("rDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio1)
            Me.columnrDomicilio2 = New Global.System.Data.DataColumn("rDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio2)
            Me.columnsCalle = New Global.System.Data.DataColumn("sCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCalle)
            Me.columnsDomicilio1 = New Global.System.Data.DataColumn("sDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio1)
            Me.columnsDomicilio2 = New Global.System.Data.DataColumn("sDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio2)
            Me.columnCompania = New Global.System.Data.DataColumn("Compania", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompania)
            Me.columncRFC = New Global.System.Data.DataColumn("cRFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncRFC)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columneCalle = New Global.System.Data.DataColumn("eCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneCalle)
            Me.columneDomicilio1 = New Global.System.Data.DataColumn("eDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio1)
            Me.columneDomicilio2 = New Global.System.Data.DataColumn("eDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio2)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNCClave}, true))
            Me.columnNCClave.AllowDBNull = false
            Me.columnNCClave.Unique = true
            Me.columnNCClave.MaxLength = 20
            Me.columnFACClave.MaxLength = 20
            Me.columnCTEClave.MaxLength = 20
            Me.columnVersionCF.MaxLength = 50
            Me.columnRegimenFiscal.MaxLength = 40
            Me.columnSerie.MaxLength = 10
            Me.columnCAJClave.MaxLength = 20
            Me.columnAtendio.MaxLength = 20
            Me.columnnoAprobacion.MaxLength = 20
            Me.columnformaDePago.MaxLength = 40
            Me.columnmetodoPago.MaxLength = 40
            Me.columnnoCertificado.MaxLength = 50
            Me.columndescripcion.MaxLength = 200
            Me.columntipoCertificado.MaxLength = 50
            Me.columnMONClave.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnVendedor.MaxLength = 50
            Me.columnrCalle.ReadOnly = true
            Me.columnrCalle.MaxLength = 150
            Me.columnrDomicilio1.ReadOnly = true
            Me.columnrDomicilio1.MaxLength = 92
            Me.columnrDomicilio2.ReadOnly = true
            Me.columnrDomicilio2.MaxLength = 82
            Me.columnsCalle.ReadOnly = true
            Me.columnsCalle.MaxLength = 150
            Me.columnsDomicilio1.ReadOnly = true
            Me.columnsDomicilio1.MaxLength = 92
            Me.columnsDomicilio2.ReadOnly = true
            Me.columnsDomicilio2.MaxLength = 82
            Me.columnCompania.MaxLength = 60
            Me.columncRFC.MaxLength = 32
            Me.columnTelefono.MaxLength = 20
            Me.columneCalle.ReadOnly = true
            Me.columneCalle.MaxLength = 150
            Me.columneDomicilio1.ReadOnly = true
            Me.columneDomicilio1.MaxLength = 92
            Me.columneDomicilio2.ReadOnly = true
            Me.columneDomicilio2.MaxLength = 82
            Me.columnMoneda.ReadOnly = true
            Me.columnMoneda.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_ncRow() As sp_encabezado_ncRow
            Return CType(Me.NewRow,sp_encabezado_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_ncRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_ncRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_ncRowChanged(Me, New sp_encabezado_ncRowChangeEvent(CType(e.Row,sp_encabezado_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_ncRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_ncRowChanging(Me, New sp_encabezado_ncRowChangeEvent(CType(e.Row,sp_encabezado_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_ncRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_ncRowDeleted(Me, New sp_encabezado_ncRowChangeEvent(CType(e.Row,sp_encabezado_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_ncRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_ncRowDeleting(Me, New sp_encabezado_ncRowChangeEvent(CType(e.Row,sp_encabezado_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_ncRow(ByVal row As sp_encabezado_ncRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_ncDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_impuestos_facDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_impuestos_facRow)
        
        Private columnFACClave As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columnTasa As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_impuestos_fac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_impuestos_facRow
            Get
                Return CType(Me.Rows(index),sp_impuestos_facRow)
            End Get
        End Property
        
        Public Event sp_impuestos_facRowChanging As sp_impuestos_facRowChangeEventHandler
        
        Public Event sp_impuestos_facRowChanged As sp_impuestos_facRowChangeEventHandler
        
        Public Event sp_impuestos_facRowDeleting As sp_impuestos_facRowChangeEventHandler
        
        Public Event sp_impuestos_facRowDeleted As sp_impuestos_facRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_impuestos_facRow(ByVal row As sp_impuestos_facRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_impuestos_facRow(ByVal FACClave As String, ByVal Impuesto As String, ByVal Tasa As Double, ByVal Importe As Double, ByVal TipoCambio As Double) As sp_impuestos_facRow
            Dim rowsp_impuestos_facRow As sp_impuestos_facRow = CType(Me.NewRow,sp_impuestos_facRow)
            Dim columnValuesArray() As Object = New Object() {FACClave, Impuesto, Tasa, Importe, TipoCambio}
            rowsp_impuestos_facRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_impuestos_facRow)
            Return rowsp_impuestos_facRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_impuestos_facDataTable = CType(MyBase.Clone,sp_impuestos_facDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_impuestos_facDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFACClave = MyBase.Columns("FACClave")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columnTasa = MyBase.Columns("Tasa")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFACClave = New Global.System.Data.DataColumn("FACClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACClave)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columnTasa = New Global.System.Data.DataColumn("Tasa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasa)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnFACClave.MaxLength = 20
            Me.columnImpuesto.MaxLength = 50
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_impuestos_facRow() As sp_impuestos_facRow
            Return CType(Me.NewRow,sp_impuestos_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_impuestos_facRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_impuestos_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_impuestos_facRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_facRowChanged(Me, New sp_impuestos_facRowChangeEvent(CType(e.Row,sp_impuestos_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_impuestos_facRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_facRowChanging(Me, New sp_impuestos_facRowChangeEvent(CType(e.Row,sp_impuestos_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_impuestos_facRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_facRowDeleted(Me, New sp_impuestos_facRowChangeEvent(CType(e.Row,sp_impuestos_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_impuestos_facRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_facRowDeleting(Me, New sp_impuestos_facRowChangeEvent(CType(e.Row,sp_impuestos_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_impuestos_facRow(ByVal row As sp_impuestos_facRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_impuestos_facDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_nc_impuestosDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_nc_impuestosRow)
        
        Private columnNCClave As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columnTasa As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_nc_impuestos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_nc_impuestosRow
            Get
                Return CType(Me.Rows(index),sp_nc_impuestosRow)
            End Get
        End Property
        
        Public Event sp_nc_impuestosRowChanging As sp_nc_impuestosRowChangeEventHandler
        
        Public Event sp_nc_impuestosRowChanged As sp_nc_impuestosRowChangeEventHandler
        
        Public Event sp_nc_impuestosRowDeleting As sp_nc_impuestosRowChangeEventHandler
        
        Public Event sp_nc_impuestosRowDeleted As sp_nc_impuestosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_nc_impuestosRow(ByVal row As sp_nc_impuestosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_nc_impuestosRow(ByVal NCClave As String, ByVal Impuesto As String, ByVal Tasa As Double, ByVal Importe As Double, ByVal TipoCambio As Double) As sp_nc_impuestosRow
            Dim rowsp_nc_impuestosRow As sp_nc_impuestosRow = CType(Me.NewRow,sp_nc_impuestosRow)
            Dim columnValuesArray() As Object = New Object() {NCClave, Impuesto, Tasa, Importe, TipoCambio}
            rowsp_nc_impuestosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_nc_impuestosRow)
            Return rowsp_nc_impuestosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_nc_impuestosDataTable = CType(MyBase.Clone,sp_nc_impuestosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_nc_impuestosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNCClave = MyBase.Columns("NCClave")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columnTasa = MyBase.Columns("Tasa")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNCClave = New Global.System.Data.DataColumn("NCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCClave)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columnTasa = New Global.System.Data.DataColumn("Tasa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasa)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnNCClave.MaxLength = 20
            Me.columnImpuesto.MaxLength = 50
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_nc_impuestosRow() As sp_nc_impuestosRow
            Return CType(Me.NewRow,sp_nc_impuestosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_nc_impuestosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_nc_impuestosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_nc_impuestosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_nc_impuestosRowChanged(Me, New sp_nc_impuestosRowChangeEvent(CType(e.Row,sp_nc_impuestosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_nc_impuestosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_nc_impuestosRowChanging(Me, New sp_nc_impuestosRowChangeEvent(CType(e.Row,sp_nc_impuestosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_nc_impuestosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_nc_impuestosRowDeleted(Me, New sp_nc_impuestosRowChangeEvent(CType(e.Row,sp_nc_impuestosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_nc_impuestosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_nc_impuestosRowDeleting(Me, New sp_nc_impuestosRowChangeEvent(CType(e.Row,sp_nc_impuestosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_nc_impuestosRow(ByVal row As sp_nc_impuestosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_nc_impuestosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_metodopago_facDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_metodopago_facRow)
        
        Private columnMetodoPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_metodopago_fac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_metodopago_facRow
            Get
                Return CType(Me.Rows(index),sp_metodopago_facRow)
            End Get
        End Property
        
        Public Event sp_metodopago_facRowChanging As sp_metodopago_facRowChangeEventHandler
        
        Public Event sp_metodopago_facRowChanged As sp_metodopago_facRowChangeEventHandler
        
        Public Event sp_metodopago_facRowDeleting As sp_metodopago_facRowChangeEventHandler
        
        Public Event sp_metodopago_facRowDeleted As sp_metodopago_facRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_metodopago_facRow(ByVal row As sp_metodopago_facRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_metodopago_facRow(ByVal MetodoPago As String) As sp_metodopago_facRow
            Dim rowsp_metodopago_facRow As sp_metodopago_facRow = CType(Me.NewRow,sp_metodopago_facRow)
            Dim columnValuesArray() As Object = New Object() {MetodoPago}
            rowsp_metodopago_facRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_metodopago_facRow)
            Return rowsp_metodopago_facRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_metodopago_facDataTable = CType(MyBase.Clone,sp_metodopago_facDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_metodopago_facDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMetodoPago = MyBase.Columns("MetodoPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMetodoPago = New Global.System.Data.DataColumn("MetodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoPago)
            Me.columnMetodoPago.ReadOnly = true
            Me.columnMetodoPago.MaxLength = 123
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_metodopago_facRow() As sp_metodopago_facRow
            Return CType(Me.NewRow,sp_metodopago_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_metodopago_facRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_metodopago_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_metodopago_facRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_facRowChanged(Me, New sp_metodopago_facRowChangeEvent(CType(e.Row,sp_metodopago_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_metodopago_facRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_facRowChanging(Me, New sp_metodopago_facRowChangeEvent(CType(e.Row,sp_metodopago_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_metodopago_facRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_facRowDeleted(Me, New sp_metodopago_facRowChangeEvent(CType(e.Row,sp_metodopago_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_metodopago_facRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_facRowDeleting(Me, New sp_metodopago_facRowChangeEvent(CType(e.Row,sp_metodopago_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_metodopago_facRow(ByVal row As sp_metodopago_facRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_metodopago_facDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_metodopago_ncDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_metodopago_ncRow)
        
        Private columnMetodoPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_metodopago_nc"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_metodopago_ncRow
            Get
                Return CType(Me.Rows(index),sp_metodopago_ncRow)
            End Get
        End Property
        
        Public Event sp_metodopago_ncRowChanging As sp_metodopago_ncRowChangeEventHandler
        
        Public Event sp_metodopago_ncRowChanged As sp_metodopago_ncRowChangeEventHandler
        
        Public Event sp_metodopago_ncRowDeleting As sp_metodopago_ncRowChangeEventHandler
        
        Public Event sp_metodopago_ncRowDeleted As sp_metodopago_ncRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_metodopago_ncRow(ByVal row As sp_metodopago_ncRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_metodopago_ncRow(ByVal MetodoPago As String) As sp_metodopago_ncRow
            Dim rowsp_metodopago_ncRow As sp_metodopago_ncRow = CType(Me.NewRow,sp_metodopago_ncRow)
            Dim columnValuesArray() As Object = New Object() {MetodoPago}
            rowsp_metodopago_ncRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_metodopago_ncRow)
            Return rowsp_metodopago_ncRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_metodopago_ncDataTable = CType(MyBase.Clone,sp_metodopago_ncDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_metodopago_ncDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMetodoPago = MyBase.Columns("MetodoPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMetodoPago = New Global.System.Data.DataColumn("MetodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoPago)
            Me.columnMetodoPago.ReadOnly = true
            Me.columnMetodoPago.MaxLength = 153
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_metodopago_ncRow() As sp_metodopago_ncRow
            Return CType(Me.NewRow,sp_metodopago_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_metodopago_ncRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_metodopago_ncRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_metodopago_ncRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_ncRowChanged(Me, New sp_metodopago_ncRowChangeEvent(CType(e.Row,sp_metodopago_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_metodopago_ncRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_ncRowChanging(Me, New sp_metodopago_ncRowChangeEvent(CType(e.Row,sp_metodopago_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_metodopago_ncRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_ncRowDeleted(Me, New sp_metodopago_ncRowChangeEvent(CType(e.Row,sp_metodopago_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_metodopago_ncRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_ncRowDeleting(Me, New sp_metodopago_ncRowChangeEvent(CType(e.Row,sp_metodopago_ncRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_metodopago_ncRow(ByVal row As sp_metodopago_ncRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_metodopago_ncDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_liq_generalDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_liq_generalRow)
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnDiaTrabajo As Global.System.Data.DataColumn
        
        Private columnFechaApertura As Global.System.Data.DataColumn
        
        Private columnFechaCierre As Global.System.Data.DataColumn
        
        Private columnLiquidacion As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnClaveUsuario As Global.System.Data.DataColumn
        
        Private columnNombreUsuario As Global.System.Data.DataColumn
        
        Private columnClaveCaja As Global.System.Data.DataColumn
        
        Private columnNombreCaja As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_liq_general"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiaTrabajoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiaTrabajo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaAperturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaApertura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaCierreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaCierre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LiquidacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLiquidacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreUsuarioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreUsuario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveCajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveCaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_liq_generalRow
            Get
                Return CType(Me.Rows(index),sp_liq_generalRow)
            End Get
        End Property
        
        Public Event sp_liq_generalRowChanging As sp_liq_generalRowChangeEventHandler
        
        Public Event sp_liq_generalRowChanged As sp_liq_generalRowChangeEventHandler
        
        Public Event sp_liq_generalRowDeleting As sp_liq_generalRowChangeEventHandler
        
        Public Event sp_liq_generalRowDeleted As sp_liq_generalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_liq_generalRow(ByVal row As sp_liq_generalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_liq_generalRow(ByVal Folio As String, ByVal DiaTrabajo As Date, ByVal FechaApertura As Date, ByVal FechaCierre As Date, ByVal Liquidacion As Double, ByVal Saldo As Double, ByVal ClaveUsuario As String, ByVal NombreUsuario As String, ByVal ClaveCaja As String, ByVal NombreCaja As String) As sp_liq_generalRow
            Dim rowsp_liq_generalRow As sp_liq_generalRow = CType(Me.NewRow,sp_liq_generalRow)
            Dim columnValuesArray() As Object = New Object() {Folio, DiaTrabajo, FechaApertura, FechaCierre, Liquidacion, Saldo, ClaveUsuario, NombreUsuario, ClaveCaja, NombreCaja}
            rowsp_liq_generalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_liq_generalRow)
            Return rowsp_liq_generalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_liq_generalDataTable = CType(MyBase.Clone,sp_liq_generalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_liq_generalDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnDiaTrabajo = MyBase.Columns("DiaTrabajo")
            Me.columnFechaApertura = MyBase.Columns("FechaApertura")
            Me.columnFechaCierre = MyBase.Columns("FechaCierre")
            Me.columnLiquidacion = MyBase.Columns("Liquidacion")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnClaveUsuario = MyBase.Columns("ClaveUsuario")
            Me.columnNombreUsuario = MyBase.Columns("NombreUsuario")
            Me.columnClaveCaja = MyBase.Columns("ClaveCaja")
            Me.columnNombreCaja = MyBase.Columns("NombreCaja")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnDiaTrabajo = New Global.System.Data.DataColumn("DiaTrabajo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiaTrabajo)
            Me.columnFechaApertura = New Global.System.Data.DataColumn("FechaApertura", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaApertura)
            Me.columnFechaCierre = New Global.System.Data.DataColumn("FechaCierre", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaCierre)
            Me.columnLiquidacion = New Global.System.Data.DataColumn("Liquidacion", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLiquidacion)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnClaveUsuario = New Global.System.Data.DataColumn("ClaveUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveUsuario)
            Me.columnNombreUsuario = New Global.System.Data.DataColumn("NombreUsuario", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreUsuario)
            Me.columnClaveCaja = New Global.System.Data.DataColumn("ClaveCaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveCaja)
            Me.columnNombreCaja = New Global.System.Data.DataColumn("NombreCaja", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCaja)
            Me.columnFolio.MaxLength = 20
            Me.columnClaveUsuario.MaxLength = 10
            Me.columnNombreUsuario.MaxLength = 50
            Me.columnClaveCaja.MaxLength = 20
            Me.columnNombreCaja.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_liq_generalRow() As sp_liq_generalRow
            Return CType(Me.NewRow,sp_liq_generalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_liq_generalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_liq_generalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_liq_generalRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_liq_generalRowChanged(Me, New sp_liq_generalRowChangeEvent(CType(e.Row,sp_liq_generalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_liq_generalRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_liq_generalRowChanging(Me, New sp_liq_generalRowChangeEvent(CType(e.Row,sp_liq_generalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_liq_generalRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_liq_generalRowDeleted(Me, New sp_liq_generalRowChangeEvent(CType(e.Row,sp_liq_generalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_liq_generalRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_liq_generalRowDeleting(Me, New sp_liq_generalRowChangeEvent(CType(e.Row,sp_liq_generalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_liq_generalRow(ByVal row As sp_liq_generalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_liq_generalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_liq_corteDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_liq_corteRow)
        
        Private columnConcepto As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnIngreso As Global.System.Data.DataColumn
        
        Private columnEgreso As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_liq_corte"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IngresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIngreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EgresoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEgreso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_liq_corteRow
            Get
                Return CType(Me.Rows(index),sp_liq_corteRow)
            End Get
        End Property
        
        Public Event sp_liq_corteRowChanging As sp_liq_corteRowChangeEventHandler
        
        Public Event sp_liq_corteRowChanged As sp_liq_corteRowChangeEventHandler
        
        Public Event sp_liq_corteRowDeleting As sp_liq_corteRowChangeEventHandler
        
        Public Event sp_liq_corteRowDeleted As sp_liq_corteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_liq_corteRow(ByVal row As sp_liq_corteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_liq_corteRow(ByVal Concepto As String, ByVal Importe As Double, ByVal Ingreso As Double, ByVal Egreso As Double) As sp_liq_corteRow
            Dim rowsp_liq_corteRow As sp_liq_corteRow = CType(Me.NewRow,sp_liq_corteRow)
            Dim columnValuesArray() As Object = New Object() {Concepto, Importe, Ingreso, Egreso}
            rowsp_liq_corteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_liq_corteRow)
            Return rowsp_liq_corteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_liq_corteDataTable = CType(MyBase.Clone,sp_liq_corteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_liq_corteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnConcepto = MyBase.Columns("Concepto")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnIngreso = MyBase.Columns("Ingreso")
            Me.columnEgreso = MyBase.Columns("Egreso")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnConcepto = New Global.System.Data.DataColumn("Concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConcepto)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnIngreso = New Global.System.Data.DataColumn("Ingreso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIngreso)
            Me.columnEgreso = New Global.System.Data.DataColumn("Egreso", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEgreso)
            Me.columnConcepto.ReadOnly = true
            Me.columnConcepto.MaxLength = 25
            Me.columnImporte.ReadOnly = true
            Me.columnIngreso.ReadOnly = true
            Me.columnEgreso.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_liq_corteRow() As sp_liq_corteRow
            Return CType(Me.NewRow,sp_liq_corteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_liq_corteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_liq_corteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_liq_corteRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_liq_corteRowChanged(Me, New sp_liq_corteRowChangeEvent(CType(e.Row,sp_liq_corteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_liq_corteRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_liq_corteRowChanging(Me, New sp_liq_corteRowChangeEvent(CType(e.Row,sp_liq_corteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_liq_corteRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_liq_corteRowDeleted(Me, New sp_liq_corteRowChangeEvent(CType(e.Row,sp_liq_corteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_liq_corteRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_liq_corteRowDeleting(Me, New sp_liq_corteRowChangeEvent(CType(e.Row,sp_liq_corteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_liq_corteRow(ByVal row As sp_liq_corteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_liq_corteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_liq_pagosDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_liq_pagosRow)
        
        Private columnConcepto As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_liq_pagos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConceptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConcepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_liq_pagosRow
            Get
                Return CType(Me.Rows(index),sp_liq_pagosRow)
            End Get
        End Property
        
        Public Event sp_liq_pagosRowChanging As sp_liq_pagosRowChangeEventHandler
        
        Public Event sp_liq_pagosRowChanged As sp_liq_pagosRowChangeEventHandler
        
        Public Event sp_liq_pagosRowDeleting As sp_liq_pagosRowChangeEventHandler
        
        Public Event sp_liq_pagosRowDeleted As sp_liq_pagosRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_liq_pagosRow(ByVal row As sp_liq_pagosRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_liq_pagosRow(ByVal Concepto As String, ByVal Importe As Double) As sp_liq_pagosRow
            Dim rowsp_liq_pagosRow As sp_liq_pagosRow = CType(Me.NewRow,sp_liq_pagosRow)
            Dim columnValuesArray() As Object = New Object() {Concepto, Importe}
            rowsp_liq_pagosRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_liq_pagosRow)
            Return rowsp_liq_pagosRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_liq_pagosDataTable = CType(MyBase.Clone,sp_liq_pagosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_liq_pagosDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnConcepto = MyBase.Columns("Concepto")
            Me.columnImporte = MyBase.Columns("Importe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnConcepto = New Global.System.Data.DataColumn("Concepto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConcepto)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnConcepto.ReadOnly = true
            Me.columnConcepto.MaxLength = 9
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_liq_pagosRow() As sp_liq_pagosRow
            Return CType(Me.NewRow,sp_liq_pagosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_liq_pagosRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_liq_pagosRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_liq_pagosRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_liq_pagosRowChanged(Me, New sp_liq_pagosRowChangeEvent(CType(e.Row,sp_liq_pagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_liq_pagosRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_liq_pagosRowChanging(Me, New sp_liq_pagosRowChangeEvent(CType(e.Row,sp_liq_pagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_liq_pagosRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_liq_pagosRowDeleted(Me, New sp_liq_pagosRowChangeEvent(CType(e.Row,sp_liq_pagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_liq_pagosRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_liq_pagosRowDeleting(Me, New sp_liq_pagosRowChangeEvent(CType(e.Row,sp_liq_pagosRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_liq_pagosRow(ByVal row As sp_liq_pagosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_liq_pagosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_movimientos_liqDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_movimientos_liqRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnInicial As Global.System.Data.DataColumn
        
        Private columnCargas As Global.System.Data.DataColumn
        
        Private columnDescargas As Global.System.Data.DataColumn
        
        Private columnVentas As Global.System.Data.DataColumn
        
        Private columnDevoluciones As Global.System.Data.DataColumn
        
        Private columnExistencia As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_movimientos_liq"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InicialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInicial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CargasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCargas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescargasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescargas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VentasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVentas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevolucionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevoluciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExistenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExistencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_movimientos_liqRow
            Get
                Return CType(Me.Rows(index),sp_movimientos_liqRow)
            End Get
        End Property
        
        Public Event sp_movimientos_liqRowChanging As sp_movimientos_liqRowChangeEventHandler
        
        Public Event sp_movimientos_liqRowChanged As sp_movimientos_liqRowChangeEventHandler
        
        Public Event sp_movimientos_liqRowDeleting As sp_movimientos_liqRowChangeEventHandler
        
        Public Event sp_movimientos_liqRowDeleted As sp_movimientos_liqRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_movimientos_liqRow(ByVal row As sp_movimientos_liqRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_movimientos_liqRow(ByVal Clave As String, ByVal Nombre As String, ByVal Inicial As Double, ByVal Cargas As Double, ByVal Descargas As Double, ByVal Ventas As Double, ByVal Devoluciones As Double, ByVal Existencia As Double) As sp_movimientos_liqRow
            Dim rowsp_movimientos_liqRow As sp_movimientos_liqRow = CType(Me.NewRow,sp_movimientos_liqRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Nombre, Inicial, Cargas, Descargas, Ventas, Devoluciones, Existencia}
            rowsp_movimientos_liqRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_movimientos_liqRow)
            Return rowsp_movimientos_liqRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_movimientos_liqDataTable = CType(MyBase.Clone,sp_movimientos_liqDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_movimientos_liqDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnInicial = MyBase.Columns("Inicial")
            Me.columnCargas = MyBase.Columns("Cargas")
            Me.columnDescargas = MyBase.Columns("Descargas")
            Me.columnVentas = MyBase.Columns("Ventas")
            Me.columnDevoluciones = MyBase.Columns("Devoluciones")
            Me.columnExistencia = MyBase.Columns("Existencia")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnInicial = New Global.System.Data.DataColumn("Inicial", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInicial)
            Me.columnCargas = New Global.System.Data.DataColumn("Cargas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCargas)
            Me.columnDescargas = New Global.System.Data.DataColumn("Descargas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescargas)
            Me.columnVentas = New Global.System.Data.DataColumn("Ventas", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVentas)
            Me.columnDevoluciones = New Global.System.Data.DataColumn("Devoluciones", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevoluciones)
            Me.columnExistencia = New Global.System.Data.DataColumn("Existencia", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExistencia)
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnInicial.ReadOnly = true
            Me.columnCargas.ReadOnly = true
            Me.columnDescargas.ReadOnly = true
            Me.columnVentas.ReadOnly = true
            Me.columnDevoluciones.ReadOnly = true
            Me.columnExistencia.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_movimientos_liqRow() As sp_movimientos_liqRow
            Return CType(Me.NewRow,sp_movimientos_liqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_movimientos_liqRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_movimientos_liqRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_movimientos_liqRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_movimientos_liqRowChanged(Me, New sp_movimientos_liqRowChangeEvent(CType(e.Row,sp_movimientos_liqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_movimientos_liqRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_movimientos_liqRowChanging(Me, New sp_movimientos_liqRowChangeEvent(CType(e.Row,sp_movimientos_liqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_movimientos_liqRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_movimientos_liqRowDeleted(Me, New sp_movimientos_liqRowChangeEvent(CType(e.Row,sp_movimientos_liqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_movimientos_liqRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_movimientos_liqRowDeleting(Me, New sp_movimientos_liqRowChangeEvent(CType(e.Row,sp_movimientos_liqRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_movimientos_liqRow(ByVal row As sp_movimientos_liqRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_movimientos_liqDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_liq_comision_prodDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_liq_comision_prodRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnClaveComision As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnDevoluciones As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        Private columnComision As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_liq_comision_prod"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DevolucionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevoluciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_liq_comision_prodRow
            Get
                Return CType(Me.Rows(index),sp_liq_comision_prodRow)
            End Get
        End Property
        
        Public Event sp_liq_comision_prodRowChanging As sp_liq_comision_prodRowChangeEventHandler
        
        Public Event sp_liq_comision_prodRowChanged As sp_liq_comision_prodRowChangeEventHandler
        
        Public Event sp_liq_comision_prodRowDeleting As sp_liq_comision_prodRowChangeEventHandler
        
        Public Event sp_liq_comision_prodRowDeleted As sp_liq_comision_prodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_liq_comision_prodRow(ByVal row As sp_liq_comision_prodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_liq_comision_prodRow(ByVal Clave As String, ByVal Nombre As String, ByVal ClaveComision As String, ByVal Cantidad As Double, ByVal Devoluciones As Double, ByVal Porcentaje As Double, ByVal Comision As Double) As sp_liq_comision_prodRow
            Dim rowsp_liq_comision_prodRow As sp_liq_comision_prodRow = CType(Me.NewRow,sp_liq_comision_prodRow)
            Dim columnValuesArray() As Object = New Object() {Clave, Nombre, ClaveComision, Cantidad, Devoluciones, Porcentaje, Comision}
            rowsp_liq_comision_prodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_liq_comision_prodRow)
            Return rowsp_liq_comision_prodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_liq_comision_prodDataTable = CType(MyBase.Clone,sp_liq_comision_prodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_liq_comision_prodDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnClaveComision = MyBase.Columns("ClaveComision")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnDevoluciones = MyBase.Columns("Devoluciones")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
            Me.columnComision = MyBase.Columns("Comision")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnClaveComision = New Global.System.Data.DataColumn("ClaveComision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveComision)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnDevoluciones = New Global.System.Data.DataColumn("Devoluciones", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevoluciones)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
            Me.columnComision = New Global.System.Data.DataColumn("Comision", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComision)
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 50
            Me.columnClaveComision.MaxLength = 20
            Me.columnCantidad.ReadOnly = true
            Me.columnDevoluciones.ReadOnly = true
            Me.columnPorcentaje.ReadOnly = true
            Me.columnComision.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_liq_comision_prodRow() As sp_liq_comision_prodRow
            Return CType(Me.NewRow,sp_liq_comision_prodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_liq_comision_prodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_liq_comision_prodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_liq_comision_prodRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_prodRowChanged(Me, New sp_liq_comision_prodRowChangeEvent(CType(e.Row,sp_liq_comision_prodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_liq_comision_prodRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_prodRowChanging(Me, New sp_liq_comision_prodRowChangeEvent(CType(e.Row,sp_liq_comision_prodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_liq_comision_prodRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_prodRowDeleted(Me, New sp_liq_comision_prodRowChangeEvent(CType(e.Row,sp_liq_comision_prodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_liq_comision_prodRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_prodRowDeleting(Me, New sp_liq_comision_prodRowChangeEvent(CType(e.Row,sp_liq_comision_prodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_liq_comision_prodRow(ByVal row As sp_liq_comision_prodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_liq_comision_prodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_liq_comision_vtaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_liq_comision_vtaRow)
        
        Private columnVenta As Global.System.Data.DataColumn
        
        Private columnClaveComision As Global.System.Data.DataColumn
        
        Private columnPorcentaje As Global.System.Data.DataColumn
        
        Private columnComision As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_liq_comision_vta"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VentaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVenta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcentajeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcentaje
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_liq_comision_vtaRow
            Get
                Return CType(Me.Rows(index),sp_liq_comision_vtaRow)
            End Get
        End Property
        
        Public Event sp_liq_comision_vtaRowChanging As sp_liq_comision_vtaRowChangeEventHandler
        
        Public Event sp_liq_comision_vtaRowChanged As sp_liq_comision_vtaRowChangeEventHandler
        
        Public Event sp_liq_comision_vtaRowDeleting As sp_liq_comision_vtaRowChangeEventHandler
        
        Public Event sp_liq_comision_vtaRowDeleted As sp_liq_comision_vtaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_liq_comision_vtaRow(ByVal row As sp_liq_comision_vtaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_liq_comision_vtaRow(ByVal Venta As Double, ByVal ClaveComision As String, ByVal Porcentaje As Double, ByVal Comision As Double) As sp_liq_comision_vtaRow
            Dim rowsp_liq_comision_vtaRow As sp_liq_comision_vtaRow = CType(Me.NewRow,sp_liq_comision_vtaRow)
            Dim columnValuesArray() As Object = New Object() {Venta, ClaveComision, Porcentaje, Comision}
            rowsp_liq_comision_vtaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_liq_comision_vtaRow)
            Return rowsp_liq_comision_vtaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_liq_comision_vtaDataTable = CType(MyBase.Clone,sp_liq_comision_vtaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_liq_comision_vtaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVenta = MyBase.Columns("Venta")
            Me.columnClaveComision = MyBase.Columns("ClaveComision")
            Me.columnPorcentaje = MyBase.Columns("Porcentaje")
            Me.columnComision = MyBase.Columns("Comision")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVenta = New Global.System.Data.DataColumn("Venta", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVenta)
            Me.columnClaveComision = New Global.System.Data.DataColumn("ClaveComision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveComision)
            Me.columnPorcentaje = New Global.System.Data.DataColumn("Porcentaje", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcentaje)
            Me.columnComision = New Global.System.Data.DataColumn("Comision", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComision)
            Me.columnVenta.ReadOnly = true
            Me.columnClaveComision.MaxLength = 20
            Me.columnPorcentaje.ReadOnly = true
            Me.columnComision.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_liq_comision_vtaRow() As sp_liq_comision_vtaRow
            Return CType(Me.NewRow,sp_liq_comision_vtaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_liq_comision_vtaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_liq_comision_vtaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_liq_comision_vtaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_vtaRowChanged(Me, New sp_liq_comision_vtaRowChangeEvent(CType(e.Row,sp_liq_comision_vtaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_liq_comision_vtaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_vtaRowChanging(Me, New sp_liq_comision_vtaRowChangeEvent(CType(e.Row,sp_liq_comision_vtaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_liq_comision_vtaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_vtaRowDeleted(Me, New sp_liq_comision_vtaRowChangeEvent(CType(e.Row,sp_liq_comision_vtaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_liq_comision_vtaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_liq_comision_vtaRowDeleting(Me, New sp_liq_comision_vtaRowChangeEvent(CType(e.Row,sp_liq_comision_vtaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_liq_comision_vtaRow(ByVal row As sp_liq_comision_vtaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_liq_comision_vtaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_facDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_facRow)
        
        Private columnDFAClave As Global.System.Data.DataColumn
        
        Private columnFACClave As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnPrecioBruto As Global.System.Data.DataColumn
        
        Private columnDescuentoImp As Global.System.Data.DataColumn
        
        Private columnImpuestoImp As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCantDev As Global.System.Data.DataColumn
        
        Private columnSubTotalPartida As Global.System.Data.DataColumn
        
        Private columnTotalPartida As Global.System.Data.DataColumn
        
        Private columnPuntosImp As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnDescripción As Global.System.Data.DataColumn
        
        Private columnDetalle As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_fac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DFAClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDFAClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripción
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_facRow
            Get
                Return CType(Me.Rows(index),sp_detalle_facRow)
            End Get
        End Property
        
        Public Event sp_detalle_facRowChanging As sp_detalle_facRowChangeEventHandler
        
        Public Event sp_detalle_facRowChanged As sp_detalle_facRowChangeEventHandler
        
        Public Event sp_detalle_facRowDeleting As sp_detalle_facRowChangeEventHandler
        
        Public Event sp_detalle_facRowDeleted As sp_detalle_facRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_facRow(ByVal row As sp_detalle_facRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_facRow( _
                    ByVal DFAClave As String,  _
                    ByVal FACClave As String,  _
                    ByVal PROClave As String,  _
                    ByVal TProducto As Integer,  _
                    ByVal Costo As Double,  _
                    ByVal PrecioBruto As Double,  _
                    ByVal DescuentoImp As Double,  _
                    ByVal ImpuestoImp As Double,  _
                    ByVal Cantidad As Double,  _
                    ByVal CantDev As Double,  _
                    ByVal SubTotalPartida As Double,  _
                    ByVal TotalPartida As Double,  _
                    ByVal PuntosImp As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Clave As String,  _
                    ByVal Descripción As String,  _
                    ByVal Detalle As String,  _
                    ByVal Nota As String) As sp_detalle_facRow
            Dim rowsp_detalle_facRow As sp_detalle_facRow = CType(Me.NewRow,sp_detalle_facRow)
            Dim columnValuesArray() As Object = New Object() {DFAClave, FACClave, PROClave, TProducto, Costo, PrecioBruto, DescuentoImp, ImpuestoImp, Cantidad, CantDev, SubTotalPartida, TotalPartida, PuntosImp, Unidad, Clave, Descripción, Detalle, Nota}
            rowsp_detalle_facRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_facRow)
            Return rowsp_detalle_facRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDFAClave(ByVal DFAClave As String) As sp_detalle_facRow
            Return CType(Me.Rows.Find(New Object() {DFAClave}),sp_detalle_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_facDataTable = CType(MyBase.Clone,sp_detalle_facDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_facDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDFAClave = MyBase.Columns("DFAClave")
            Me.columnFACClave = MyBase.Columns("FACClave")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnPrecioBruto = MyBase.Columns("PrecioBruto")
            Me.columnDescuentoImp = MyBase.Columns("DescuentoImp")
            Me.columnImpuestoImp = MyBase.Columns("ImpuestoImp")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCantDev = MyBase.Columns("CantDev")
            Me.columnSubTotalPartida = MyBase.Columns("SubTotalPartida")
            Me.columnTotalPartida = MyBase.Columns("TotalPartida")
            Me.columnPuntosImp = MyBase.Columns("PuntosImp")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnDescripción = MyBase.Columns("Descripción")
            Me.columnDetalle = MyBase.Columns("Detalle")
            Me.columnNota = MyBase.Columns("Nota")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDFAClave = New Global.System.Data.DataColumn("DFAClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDFAClave)
            Me.columnFACClave = New Global.System.Data.DataColumn("FACClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACClave)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnPrecioBruto = New Global.System.Data.DataColumn("PrecioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioBruto)
            Me.columnDescuentoImp = New Global.System.Data.DataColumn("DescuentoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoImp)
            Me.columnImpuestoImp = New Global.System.Data.DataColumn("ImpuestoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoImp)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCantDev = New Global.System.Data.DataColumn("CantDev", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantDev)
            Me.columnSubTotalPartida = New Global.System.Data.DataColumn("SubTotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalPartida)
            Me.columnTotalPartida = New Global.System.Data.DataColumn("TotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPartida)
            Me.columnPuntosImp = New Global.System.Data.DataColumn("PuntosImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosImp)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnDescripción = New Global.System.Data.DataColumn("Descripción", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripción)
            Me.columnDetalle = New Global.System.Data.DataColumn("Detalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetalle)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDFAClave}, true))
            Me.columnDFAClave.AllowDBNull = false
            Me.columnDFAClave.Unique = true
            Me.columnDFAClave.MaxLength = 20
            Me.columnFACClave.MaxLength = 20
            Me.columnPROClave.MaxLength = 20
            Me.columnPrecioBruto.ReadOnly = true
            Me.columnUnidad.MaxLength = 10
            Me.columnClave.MaxLength = 20
            Me.columnDescripción.MaxLength = 50
            Me.columnDetalle.MaxLength = 60
            Me.columnNota.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_facRow() As sp_detalle_facRow
            Return CType(Me.NewRow,sp_detalle_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_facRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_facRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_facRowChanged(Me, New sp_detalle_facRowChangeEvent(CType(e.Row,sp_detalle_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_facRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_facRowChanging(Me, New sp_detalle_facRowChangeEvent(CType(e.Row,sp_detalle_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_facRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_facRowDeleted(Me, New sp_detalle_facRowChangeEvent(CType(e.Row,sp_detalle_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_facRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_facRowDeleting(Me, New sp_detalle_facRowChangeEvent(CType(e.Row,sp_detalle_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_facRow(ByVal row As sp_detalle_facRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_facDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_nc_detalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_nc_detalleRow)
        
        Private columnDNCClave As Global.System.Data.DataColumn
        
        Private columnNCClave As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnPrecioBruto As Global.System.Data.DataColumn
        
        Private columnDescuentoImp As Global.System.Data.DataColumn
        
        Private columnImpuestoImp As Global.System.Data.DataColumn
        
        Private columnPuntosImp As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnSubtotalPartida As Global.System.Data.DataColumn
        
        Private columnTotalPartida As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnDescripción As Global.System.Data.DataColumn
        
        Private columnDetalle As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_nc_detalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DNCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripción
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DetalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDetalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_nc_detalleRow
            Get
                Return CType(Me.Rows(index),sp_nc_detalleRow)
            End Get
        End Property
        
        Public Event sp_nc_detalleRowChanging As sp_nc_detalleRowChangeEventHandler
        
        Public Event sp_nc_detalleRowChanged As sp_nc_detalleRowChangeEventHandler
        
        Public Event sp_nc_detalleRowDeleting As sp_nc_detalleRowChangeEventHandler
        
        Public Event sp_nc_detalleRowDeleted As sp_nc_detalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_nc_detalleRow(ByVal row As sp_nc_detalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_nc_detalleRow( _
                    ByVal DNCClave As String,  _
                    ByVal NCClave As String,  _
                    ByVal PROClave As String,  _
                    ByVal TProducto As Integer,  _
                    ByVal Costo As Double,  _
                    ByVal PrecioBruto As Double,  _
                    ByVal DescuentoImp As Double,  _
                    ByVal ImpuestoImp As Double,  _
                    ByVal PuntosImp As Double,  _
                    ByVal Cantidad As Double,  _
                    ByVal SubtotalPartida As Double,  _
                    ByVal TotalPartida As Double,  _
                    ByVal Unidad As String,  _
                    ByVal Clave As String,  _
                    ByVal Descripción As String,  _
                    ByVal Detalle As String,  _
                    ByVal Nota As String) As sp_nc_detalleRow
            Dim rowsp_nc_detalleRow As sp_nc_detalleRow = CType(Me.NewRow,sp_nc_detalleRow)
            Dim columnValuesArray() As Object = New Object() {DNCClave, NCClave, PROClave, TProducto, Costo, PrecioBruto, DescuentoImp, ImpuestoImp, PuntosImp, Cantidad, SubtotalPartida, TotalPartida, Unidad, Clave, Descripción, Detalle, Nota}
            rowsp_nc_detalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_nc_detalleRow)
            Return rowsp_nc_detalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDNCClave(ByVal DNCClave As String) As sp_nc_detalleRow
            Return CType(Me.Rows.Find(New Object() {DNCClave}),sp_nc_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_nc_detalleDataTable = CType(MyBase.Clone,sp_nc_detalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_nc_detalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDNCClave = MyBase.Columns("DNCClave")
            Me.columnNCClave = MyBase.Columns("NCClave")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnPrecioBruto = MyBase.Columns("PrecioBruto")
            Me.columnDescuentoImp = MyBase.Columns("DescuentoImp")
            Me.columnImpuestoImp = MyBase.Columns("ImpuestoImp")
            Me.columnPuntosImp = MyBase.Columns("PuntosImp")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnSubtotalPartida = MyBase.Columns("SubtotalPartida")
            Me.columnTotalPartida = MyBase.Columns("TotalPartida")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnDescripción = MyBase.Columns("Descripción")
            Me.columnDetalle = MyBase.Columns("Detalle")
            Me.columnNota = MyBase.Columns("Nota")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDNCClave = New Global.System.Data.DataColumn("DNCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDNCClave)
            Me.columnNCClave = New Global.System.Data.DataColumn("NCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNCClave)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnPrecioBruto = New Global.System.Data.DataColumn("PrecioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioBruto)
            Me.columnDescuentoImp = New Global.System.Data.DataColumn("DescuentoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoImp)
            Me.columnImpuestoImp = New Global.System.Data.DataColumn("ImpuestoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoImp)
            Me.columnPuntosImp = New Global.System.Data.DataColumn("PuntosImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosImp)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnSubtotalPartida = New Global.System.Data.DataColumn("SubtotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotalPartida)
            Me.columnTotalPartida = New Global.System.Data.DataColumn("TotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPartida)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnDescripción = New Global.System.Data.DataColumn("Descripción", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripción)
            Me.columnDetalle = New Global.System.Data.DataColumn("Detalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDetalle)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDNCClave}, true))
            Me.columnDNCClave.AllowDBNull = false
            Me.columnDNCClave.Unique = true
            Me.columnDNCClave.MaxLength = 20
            Me.columnNCClave.MaxLength = 20
            Me.columnPROClave.MaxLength = 20
            Me.columnPrecioBruto.ReadOnly = true
            Me.columnUnidad.MaxLength = 10
            Me.columnClave.MaxLength = 20
            Me.columnDescripción.MaxLength = 50
            Me.columnDetalle.MaxLength = 60
            Me.columnNota.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_nc_detalleRow() As sp_nc_detalleRow
            Return CType(Me.NewRow,sp_nc_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_nc_detalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_nc_detalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_nc_detalleRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_nc_detalleRowChanged(Me, New sp_nc_detalleRowChangeEvent(CType(e.Row,sp_nc_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_nc_detalleRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_nc_detalleRowChanging(Me, New sp_nc_detalleRowChangeEvent(CType(e.Row,sp_nc_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_nc_detalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_nc_detalleRowDeleted(Me, New sp_nc_detalleRowChangeEvent(CType(e.Row,sp_nc_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_nc_detalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_nc_detalleRowDeleting(Me, New sp_nc_detalleRowChangeEvent(CType(e.Row,sp_nc_detalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_nc_detalleRow(ByVal row As sp_nc_detalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_nc_detalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_facDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_facRow)
        
        Private columnFacturaID As Global.System.Data.DataColumn
        
        Private columnFACClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnTipoCF As Global.System.Data.DataColumn
        
        Private columnVersionCF As Global.System.Data.DataColumn
        
        Private columnRegimenFiscal As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnFacturo As Global.System.Data.DataColumn
        
        Private columnCTEClave As Global.System.Data.DataColumn
        
        Private columncredito As Global.System.Data.DataColumn
        
        Private columndiasCredito As Global.System.Data.DataColumn
        
        Private columnfechaFactura As Global.System.Data.DataColumn
        
        Private columnnoAprobacion As Global.System.Data.DataColumn
        
        Private columnanoAprobacion As Global.System.Data.DataColumn
        
        Private columnfechaAprobacion As Global.System.Data.DataColumn
        
        Private columnformaDePago As Global.System.Data.DataColumn
        
        Private columnnoCertificado As Global.System.Data.DataColumn
        
        Private columnfechaVencimiento As Global.System.Data.DataColumn
        
        Private columncostoTot As Global.System.Data.DataColumn
        
        Private columnsubTotal As Global.System.Data.DataColumn
        
        Private columnimpuestoTot As Global.System.Data.DataColumn
        
        Private columndescuentoTot As Global.System.Data.DataColumn
        
        Private columnPuntosTot As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnsaldo As Global.System.Data.DataColumn
        
        Private columndesglosar As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columntipo As Global.System.Data.DataColumn
        
        Private columnMONClave As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnrCalle As Global.System.Data.DataColumn
        
        Private columnrDomicilio1 As Global.System.Data.DataColumn
        
        Private columnrDomicilio2 As Global.System.Data.DataColumn
        
        Private columnsCalle As Global.System.Data.DataColumn
        
        Private columnsDomicilio1 As Global.System.Data.DataColumn
        
        Private columnsDomicilio2 As Global.System.Data.DataColumn
        
        Private columnCompania As Global.System.Data.DataColumn
        
        Private columncRFC As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columneCalle As Global.System.Data.DataColumn
        
        Private columneDomicilio1 As Global.System.Data.DataColumn
        
        Private columneDomicilio2 As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_fac"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturaID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FACClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFACClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersionCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimenFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property creditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property diasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndiasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaFacturaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaFactura
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property anoAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnanoAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaDePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaDePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaVencimientoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaVencimiento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property costoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncostoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property impuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property descuentoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndescuentoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property desglosarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columndesglosar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompaniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompania
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cRFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_facRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_facRow)
            End Get
        End Property
        
        Public Event sp_encabezado_facRowChanging As sp_encabezado_facRowChangeEventHandler
        
        Public Event sp_encabezado_facRowChanged As sp_encabezado_facRowChangeEventHandler
        
        Public Event sp_encabezado_facRowDeleting As sp_encabezado_facRowChangeEventHandler
        
        Public Event sp_encabezado_facRowDeleted As sp_encabezado_facRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_facRow(ByVal row As sp_encabezado_facRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_facRow( _
                    ByVal FacturaID As String,  _
                    ByVal FACClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal TipoCF As Integer,  _
                    ByVal VersionCF As String,  _
                    ByVal RegimenFiscal As String,  _
                    ByVal Serie As String,  _
                    ByVal Folio As Double,  _
                    ByVal CAJClave As String,  _
                    ByVal Facturo As String,  _
                    ByVal CTEClave As String,  _
                    ByVal credito As Boolean,  _
                    ByVal diasCredito As Integer,  _
                    ByVal fechaFactura As Date,  _
                    ByVal noAprobacion As String,  _
                    ByVal anoAprobacion As Integer,  _
                    ByVal fechaAprobacion As Date,  _
                    ByVal formaDePago As String,  _
                    ByVal noCertificado As String,  _
                    ByVal fechaVencimiento As Date,  _
                    ByVal costoTot As Double,  _
                    ByVal subTotal As Double,  _
                    ByVal impuestoTot As Double,  _
                    ByVal descuentoTot As Double,  _
                    ByVal PuntosTot As Double,  _
                    ByVal total As Double,  _
                    ByVal saldo As Double,  _
                    ByVal desglosar As Boolean,  _
                    ByVal estado As Integer,  _
                    ByVal tipo As String,  _
                    ByVal MONClave As String,  _
                    ByVal TipoCambio As Double,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Notas As String,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal Vendedor As String,  _
                    ByVal rCalle As String,  _
                    ByVal rDomicilio1 As String,  _
                    ByVal rDomicilio2 As String,  _
                    ByVal sCalle As String,  _
                    ByVal sDomicilio1 As String,  _
                    ByVal sDomicilio2 As String,  _
                    ByVal Compania As String,  _
                    ByVal cRFC As String,  _
                    ByVal Telefono As String,  _
                    ByVal eCalle As String,  _
                    ByVal eDomicilio1 As String,  _
                    ByVal eDomicilio2 As String,  _
                    ByVal Moneda As String) As sp_encabezado_facRow
            Dim rowsp_encabezado_facRow As sp_encabezado_facRow = CType(Me.NewRow,sp_encabezado_facRow)
            Dim columnValuesArray() As Object = New Object() {FacturaID, FACClave, Periodo, Mes, TipoCF, VersionCF, RegimenFiscal, Serie, Folio, CAJClave, Facturo, CTEClave, credito, diasCredito, fechaFactura, noAprobacion, anoAprobacion, fechaAprobacion, formaDePago, noCertificado, fechaVencimiento, costoTot, subTotal, impuestoTot, descuentoTot, PuntosTot, total, saldo, desglosar, estado, tipo, MONClave, TipoCambio, MFechaHora, MUsuarioId, Notas, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, Vendedor, rCalle, rDomicilio1, rDomicilio2, sCalle, sDomicilio1, sDomicilio2, Compania, cRFC, Telefono, eCalle, eDomicilio1, eDomicilio2, Moneda}
            rowsp_encabezado_facRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_facRow)
            Return rowsp_encabezado_facRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFACClave(ByVal FACClave As String) As sp_encabezado_facRow
            Return CType(Me.Rows.Find(New Object() {FACClave}),sp_encabezado_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_facDataTable = CType(MyBase.Clone,sp_encabezado_facDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_facDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFacturaID = MyBase.Columns("FacturaID")
            Me.columnFACClave = MyBase.Columns("FACClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnTipoCF = MyBase.Columns("TipoCF")
            Me.columnVersionCF = MyBase.Columns("VersionCF")
            Me.columnRegimenFiscal = MyBase.Columns("RegimenFiscal")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnFacturo = MyBase.Columns("Facturo")
            Me.columnCTEClave = MyBase.Columns("CTEClave")
            Me.columncredito = MyBase.Columns("credito")
            Me.columndiasCredito = MyBase.Columns("diasCredito")
            Me.columnfechaFactura = MyBase.Columns("fechaFactura")
            Me.columnnoAprobacion = MyBase.Columns("noAprobacion")
            Me.columnanoAprobacion = MyBase.Columns("anoAprobacion")
            Me.columnfechaAprobacion = MyBase.Columns("fechaAprobacion")
            Me.columnformaDePago = MyBase.Columns("formaDePago")
            Me.columnnoCertificado = MyBase.Columns("noCertificado")
            Me.columnfechaVencimiento = MyBase.Columns("fechaVencimiento")
            Me.columncostoTot = MyBase.Columns("costoTot")
            Me.columnsubTotal = MyBase.Columns("subTotal")
            Me.columnimpuestoTot = MyBase.Columns("impuestoTot")
            Me.columndescuentoTot = MyBase.Columns("descuentoTot")
            Me.columnPuntosTot = MyBase.Columns("PuntosTot")
            Me.columntotal = MyBase.Columns("total")
            Me.columnsaldo = MyBase.Columns("saldo")
            Me.columndesglosar = MyBase.Columns("desglosar")
            Me.columnestado = MyBase.Columns("estado")
            Me.columntipo = MyBase.Columns("tipo")
            Me.columnMONClave = MyBase.Columns("MONClave")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnNotas = MyBase.Columns("Notas")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnrCalle = MyBase.Columns("rCalle")
            Me.columnrDomicilio1 = MyBase.Columns("rDomicilio1")
            Me.columnrDomicilio2 = MyBase.Columns("rDomicilio2")
            Me.columnsCalle = MyBase.Columns("sCalle")
            Me.columnsDomicilio1 = MyBase.Columns("sDomicilio1")
            Me.columnsDomicilio2 = MyBase.Columns("sDomicilio2")
            Me.columnCompania = MyBase.Columns("Compania")
            Me.columncRFC = MyBase.Columns("cRFC")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columneCalle = MyBase.Columns("eCalle")
            Me.columneDomicilio1 = MyBase.Columns("eDomicilio1")
            Me.columneDomicilio2 = MyBase.Columns("eDomicilio2")
            Me.columnMoneda = MyBase.Columns("Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFacturaID = New Global.System.Data.DataColumn("FacturaID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturaID)
            Me.columnFACClave = New Global.System.Data.DataColumn("FACClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFACClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnTipoCF = New Global.System.Data.DataColumn("TipoCF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCF)
            Me.columnVersionCF = New Global.System.Data.DataColumn("VersionCF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersionCF)
            Me.columnRegimenFiscal = New Global.System.Data.DataColumn("RegimenFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimenFiscal)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnFacturo = New Global.System.Data.DataColumn("Facturo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturo)
            Me.columnCTEClave = New Global.System.Data.DataColumn("CTEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTEClave)
            Me.columncredito = New Global.System.Data.DataColumn("credito", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncredito)
            Me.columndiasCredito = New Global.System.Data.DataColumn("diasCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndiasCredito)
            Me.columnfechaFactura = New Global.System.Data.DataColumn("fechaFactura", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaFactura)
            Me.columnnoAprobacion = New Global.System.Data.DataColumn("noAprobacion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoAprobacion)
            Me.columnanoAprobacion = New Global.System.Data.DataColumn("anoAprobacion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnanoAprobacion)
            Me.columnfechaAprobacion = New Global.System.Data.DataColumn("fechaAprobacion", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaAprobacion)
            Me.columnformaDePago = New Global.System.Data.DataColumn("formaDePago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaDePago)
            Me.columnnoCertificado = New Global.System.Data.DataColumn("noCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoCertificado)
            Me.columnfechaVencimiento = New Global.System.Data.DataColumn("fechaVencimiento", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaVencimiento)
            Me.columncostoTot = New Global.System.Data.DataColumn("costoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncostoTot)
            Me.columnsubTotal = New Global.System.Data.DataColumn("subTotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubTotal)
            Me.columnimpuestoTot = New Global.System.Data.DataColumn("impuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimpuestoTot)
            Me.columndescuentoTot = New Global.System.Data.DataColumn("descuentoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndescuentoTot)
            Me.columnPuntosTot = New Global.System.Data.DataColumn("PuntosTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosTot)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnsaldo = New Global.System.Data.DataColumn("saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo)
            Me.columndesglosar = New Global.System.Data.DataColumn("desglosar", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columndesglosar)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columntipo = New Global.System.Data.DataColumn("tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo)
            Me.columnMONClave = New Global.System.Data.DataColumn("MONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONClave)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnrCalle = New Global.System.Data.DataColumn("rCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrCalle)
            Me.columnrDomicilio1 = New Global.System.Data.DataColumn("rDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio1)
            Me.columnrDomicilio2 = New Global.System.Data.DataColumn("rDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio2)
            Me.columnsCalle = New Global.System.Data.DataColumn("sCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCalle)
            Me.columnsDomicilio1 = New Global.System.Data.DataColumn("sDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio1)
            Me.columnsDomicilio2 = New Global.System.Data.DataColumn("sDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio2)
            Me.columnCompania = New Global.System.Data.DataColumn("Compania", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompania)
            Me.columncRFC = New Global.System.Data.DataColumn("cRFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncRFC)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columneCalle = New Global.System.Data.DataColumn("eCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneCalle)
            Me.columneDomicilio1 = New Global.System.Data.DataColumn("eDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio1)
            Me.columneDomicilio2 = New Global.System.Data.DataColumn("eDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio2)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFACClave}, true))
            Me.columnFacturaID.MaxLength = 20
            Me.columnFACClave.AllowDBNull = false
            Me.columnFACClave.Unique = true
            Me.columnFACClave.MaxLength = 20
            Me.columnVersionCF.MaxLength = 50
            Me.columnRegimenFiscal.MaxLength = 50
            Me.columnSerie.MaxLength = 10
            Me.columnCAJClave.MaxLength = 20
            Me.columnFacturo.MaxLength = 20
            Me.columnCTEClave.MaxLength = 20
            Me.columnnoAprobacion.MaxLength = 20
            Me.columnformaDePago.MaxLength = 40
            Me.columnnoCertificado.MaxLength = 50
            Me.columntipo.MaxLength = 10
            Me.columnMONClave.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnNotas.MaxLength = 500
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnVendedor.MaxLength = 50
            Me.columnrCalle.ReadOnly = true
            Me.columnrCalle.MaxLength = 150
            Me.columnrDomicilio1.ReadOnly = true
            Me.columnrDomicilio1.MaxLength = 92
            Me.columnrDomicilio2.ReadOnly = true
            Me.columnrDomicilio2.MaxLength = 82
            Me.columnsCalle.ReadOnly = true
            Me.columnsCalle.MaxLength = 150
            Me.columnsDomicilio1.ReadOnly = true
            Me.columnsDomicilio1.MaxLength = 92
            Me.columnsDomicilio2.ReadOnly = true
            Me.columnsDomicilio2.MaxLength = 122
            Me.columnCompania.MaxLength = 60
            Me.columncRFC.MaxLength = 32
            Me.columnTelefono.ReadOnly = true
            Me.columnTelefono.MaxLength = 43
            Me.columneCalle.ReadOnly = true
            Me.columneCalle.MaxLength = 150
            Me.columneDomicilio1.ReadOnly = true
            Me.columneDomicilio1.MaxLength = 92
            Me.columneDomicilio2.ReadOnly = true
            Me.columneDomicilio2.MaxLength = 82
            Me.columnMoneda.ReadOnly = true
            Me.columnMoneda.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_facRow() As sp_encabezado_facRow
            Return CType(Me.NewRow,sp_encabezado_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_facRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_facRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_facRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_facRowChanged(Me, New sp_encabezado_facRowChangeEvent(CType(e.Row,sp_encabezado_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_facRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_facRowChanging(Me, New sp_encabezado_facRowChangeEvent(CType(e.Row,sp_encabezado_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_facRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_facRowDeleted(Me, New sp_encabezado_facRowChangeEvent(CType(e.Row,sp_encabezado_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_facRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_facRowDeleting(Me, New sp_encabezado_facRowChangeEvent(CType(e.Row,sp_encabezado_facRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_facRow(ByVal row As sp_encabezado_facRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_facDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_incapacidadDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_incapacidadRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnTipoIncapacidad As Global.System.Data.DataColumn
        
        Private columnDescuento As Global.System.Data.DataColumn
        
        Private columnCONClave As Global.System.Data.DataColumn
        
        Private columnREDClave As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_incapacidad"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoIncapacidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoIncapacidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REDClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREDClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_incapacidadRow
            Get
                Return CType(Me.Rows(index),sp_recupera_incapacidadRow)
            End Get
        End Property
        
        Public Event sp_recupera_incapacidadRowChanging As sp_recupera_incapacidadRowChangeEventHandler
        
        Public Event sp_recupera_incapacidadRowChanged As sp_recupera_incapacidadRowChangeEventHandler
        
        Public Event sp_recupera_incapacidadRowDeleting As sp_recupera_incapacidadRowChangeEventHandler
        
        Public Event sp_recupera_incapacidadRowDeleted As sp_recupera_incapacidadRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_incapacidadRow(ByVal row As sp_recupera_incapacidadRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_incapacidadRow(ByVal Tipo As String, ByVal Dias As Double, ByVal TipoIncapacidad As Integer, ByVal Descuento As Double, ByVal CONClave As String, ByVal REDClave As String) As sp_recupera_incapacidadRow
            Dim rowsp_recupera_incapacidadRow As sp_recupera_incapacidadRow = CType(Me.NewRow,sp_recupera_incapacidadRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Dias, TipoIncapacidad, Descuento, CONClave, REDClave}
            rowsp_recupera_incapacidadRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_incapacidadRow)
            Return rowsp_recupera_incapacidadRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByREDClave(ByVal REDClave As String) As sp_recupera_incapacidadRow
            Return CType(Me.Rows.Find(New Object() {REDClave}),sp_recupera_incapacidadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_incapacidadDataTable = CType(MyBase.Clone,sp_recupera_incapacidadDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_incapacidadDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnTipoIncapacidad = MyBase.Columns("TipoIncapacidad")
            Me.columnDescuento = MyBase.Columns("Descuento")
            Me.columnCONClave = MyBase.Columns("CONClave")
            Me.columnREDClave = MyBase.Columns("REDClave")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnTipoIncapacidad = New Global.System.Data.DataColumn("TipoIncapacidad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoIncapacidad)
            Me.columnDescuento = New Global.System.Data.DataColumn("Descuento", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuento)
            Me.columnCONClave = New Global.System.Data.DataColumn("CONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONClave)
            Me.columnREDClave = New Global.System.Data.DataColumn("REDClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREDClave)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREDClave}, true))
            Me.columnTipo.ReadOnly = true
            Me.columnTipo.MaxLength = 128
            Me.columnCONClave.MaxLength = 20
            Me.columnREDClave.AllowDBNull = false
            Me.columnREDClave.Unique = true
            Me.columnREDClave.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_incapacidadRow() As sp_recupera_incapacidadRow
            Return CType(Me.NewRow,sp_recupera_incapacidadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_incapacidadRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_incapacidadRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_incapacidadRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_incapacidadRowChanged(Me, New sp_recupera_incapacidadRowChangeEvent(CType(e.Row,sp_recupera_incapacidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_incapacidadRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_incapacidadRowChanging(Me, New sp_recupera_incapacidadRowChangeEvent(CType(e.Row,sp_recupera_incapacidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_incapacidadRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_incapacidadRowDeleted(Me, New sp_recupera_incapacidadRowChangeEvent(CType(e.Row,sp_recupera_incapacidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_incapacidadRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_incapacidadRowDeleting(Me, New sp_recupera_incapacidadRowChangeEvent(CType(e.Row,sp_recupera_incapacidadRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_incapacidadRow(ByVal row As sp_recupera_incapacidadRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_incapacidadDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_horasextraDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_horasextraRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnDias As Global.System.Data.DataColumn
        
        Private columnHorasExtra As Global.System.Data.DataColumn
        
        Private columnImportePagado As Global.System.Data.DataColumn
        
        Private columnCONClave As Global.System.Data.DataColumn
        
        Private columnREDClave As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_horasextra"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDias
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HorasExtraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHorasExtra
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImportePagadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImportePagado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property REDClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnREDClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_horasextraRow
            Get
                Return CType(Me.Rows(index),sp_recupera_horasextraRow)
            End Get
        End Property
        
        Public Event sp_recupera_horasextraRowChanging As sp_recupera_horasextraRowChangeEventHandler
        
        Public Event sp_recupera_horasextraRowChanged As sp_recupera_horasextraRowChangeEventHandler
        
        Public Event sp_recupera_horasextraRowDeleting As sp_recupera_horasextraRowChangeEventHandler
        
        Public Event sp_recupera_horasextraRowDeleted As sp_recupera_horasextraRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_horasextraRow(ByVal row As sp_recupera_horasextraRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_horasextraRow(ByVal Tipo As String, ByVal Dias As Integer, ByVal HorasExtra As Integer, ByVal ImportePagado As Double, ByVal CONClave As String, ByVal REDClave As String) As sp_recupera_horasextraRow
            Dim rowsp_recupera_horasextraRow As sp_recupera_horasextraRow = CType(Me.NewRow,sp_recupera_horasextraRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Dias, HorasExtra, ImportePagado, CONClave, REDClave}
            rowsp_recupera_horasextraRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_horasextraRow)
            Return rowsp_recupera_horasextraRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByREDClave(ByVal REDClave As String) As sp_recupera_horasextraRow
            Return CType(Me.Rows.Find(New Object() {REDClave}),sp_recupera_horasextraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_horasextraDataTable = CType(MyBase.Clone,sp_recupera_horasextraDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_horasextraDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnDias = MyBase.Columns("Dias")
            Me.columnHorasExtra = MyBase.Columns("HorasExtra")
            Me.columnImportePagado = MyBase.Columns("ImportePagado")
            Me.columnCONClave = MyBase.Columns("CONClave")
            Me.columnREDClave = MyBase.Columns("REDClave")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnDias = New Global.System.Data.DataColumn("Dias", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDias)
            Me.columnHorasExtra = New Global.System.Data.DataColumn("HorasExtra", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHorasExtra)
            Me.columnImportePagado = New Global.System.Data.DataColumn("ImportePagado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImportePagado)
            Me.columnCONClave = New Global.System.Data.DataColumn("CONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCONClave)
            Me.columnREDClave = New Global.System.Data.DataColumn("REDClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnREDClave)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnREDClave}, true))
            Me.columnTipo.MaxLength = 10
            Me.columnCONClave.MaxLength = 20
            Me.columnREDClave.AllowDBNull = false
            Me.columnREDClave.Unique = true
            Me.columnREDClave.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_horasextraRow() As sp_recupera_horasextraRow
            Return CType(Me.NewRow,sp_recupera_horasextraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_horasextraRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_horasextraRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_horasextraRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_horasextraRowChanged(Me, New sp_recupera_horasextraRowChangeEvent(CType(e.Row,sp_recupera_horasextraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_horasextraRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_horasextraRowChanging(Me, New sp_recupera_horasextraRowChangeEvent(CType(e.Row,sp_recupera_horasextraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_horasextraRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_horasextraRowDeleted(Me, New sp_recupera_horasextraRowChangeEvent(CType(e.Row,sp_recupera_horasextraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_horasextraRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_horasextraRowDeleting(Me, New sp_recupera_horasextraRowChangeEvent(CType(e.Row,sp_recupera_horasextraRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_horasextraRow(ByVal row As sp_recupera_horasextraRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_horasextraDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_percepcionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_percepcionesRow)
        
        Private columnTipoPercepcion As Global.System.Data.DataColumn
        
        Private columnClaveP As Global.System.Data.DataColumn
        
        Private columnConceptoP As Global.System.Data.DataColumn
        
        Private columnImpGravadoP As Global.System.Data.DataColumn
        
        Private columnImpExentoP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_percepciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoPercepcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoPercepcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClavePColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConceptoPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConceptoP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGravadoPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGravadoP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpExentoPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpExentoP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_percepcionesRow
            Get
                Return CType(Me.Rows(index),sp_recupera_percepcionesRow)
            End Get
        End Property
        
        Public Event sp_recupera_percepcionesRowChanging As sp_recupera_percepcionesRowChangeEventHandler
        
        Public Event sp_recupera_percepcionesRowChanged As sp_recupera_percepcionesRowChangeEventHandler
        
        Public Event sp_recupera_percepcionesRowDeleting As sp_recupera_percepcionesRowChangeEventHandler
        
        Public Event sp_recupera_percepcionesRowDeleted As sp_recupera_percepcionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_percepcionesRow(ByVal row As sp_recupera_percepcionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_percepcionesRow(ByVal TipoPercepcion As Integer, ByVal ClaveP As String, ByVal ConceptoP As String, ByVal ImpGravadoP As Double, ByVal ImpExentoP As Double) As sp_recupera_percepcionesRow
            Dim rowsp_recupera_percepcionesRow As sp_recupera_percepcionesRow = CType(Me.NewRow,sp_recupera_percepcionesRow)
            Dim columnValuesArray() As Object = New Object() {TipoPercepcion, ClaveP, ConceptoP, ImpGravadoP, ImpExentoP}
            rowsp_recupera_percepcionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_percepcionesRow)
            Return rowsp_recupera_percepcionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_percepcionesDataTable = CType(MyBase.Clone,sp_recupera_percepcionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_percepcionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoPercepcion = MyBase.Columns("TipoPercepcion")
            Me.columnClaveP = MyBase.Columns("ClaveP")
            Me.columnConceptoP = MyBase.Columns("ConceptoP")
            Me.columnImpGravadoP = MyBase.Columns("ImpGravadoP")
            Me.columnImpExentoP = MyBase.Columns("ImpExentoP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoPercepcion = New Global.System.Data.DataColumn("TipoPercepcion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoPercepcion)
            Me.columnClaveP = New Global.System.Data.DataColumn("ClaveP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveP)
            Me.columnConceptoP = New Global.System.Data.DataColumn("ConceptoP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConceptoP)
            Me.columnImpGravadoP = New Global.System.Data.DataColumn("ImpGravadoP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGravadoP)
            Me.columnImpExentoP = New Global.System.Data.DataColumn("ImpExentoP", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpExentoP)
            Me.columnClaveP.MaxLength = 15
            Me.columnConceptoP.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_percepcionesRow() As sp_recupera_percepcionesRow
            Return CType(Me.NewRow,sp_recupera_percepcionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_percepcionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_percepcionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_percepcionesRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_percepcionesRowChanged(Me, New sp_recupera_percepcionesRowChangeEvent(CType(e.Row,sp_recupera_percepcionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_percepcionesRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_percepcionesRowChanging(Me, New sp_recupera_percepcionesRowChangeEvent(CType(e.Row,sp_recupera_percepcionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_percepcionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_percepcionesRowDeleted(Me, New sp_recupera_percepcionesRowChangeEvent(CType(e.Row,sp_recupera_percepcionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_percepcionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_percepcionesRowDeleting(Me, New sp_recupera_percepcionesRowChangeEvent(CType(e.Row,sp_recupera_percepcionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_percepcionesRow(ByVal row As sp_recupera_percepcionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_percepcionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_deduccionesDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_deduccionesRow)
        
        Private columnTipoDeduccion As Global.System.Data.DataColumn
        
        Private columnClaveD As Global.System.Data.DataColumn
        
        Private columnConceptoD As Global.System.Data.DataColumn
        
        Private columnImpGravadoD As Global.System.Data.DataColumn
        
        Private columnImpExentoD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_deducciones"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoDeduccionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoDeduccion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClaveD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConceptoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConceptoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpGravadoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpGravadoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpExentoDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpExentoD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_deduccionesRow
            Get
                Return CType(Me.Rows(index),sp_recupera_deduccionesRow)
            End Get
        End Property
        
        Public Event sp_recupera_deduccionesRowChanging As sp_recupera_deduccionesRowChangeEventHandler
        
        Public Event sp_recupera_deduccionesRowChanged As sp_recupera_deduccionesRowChangeEventHandler
        
        Public Event sp_recupera_deduccionesRowDeleting As sp_recupera_deduccionesRowChangeEventHandler
        
        Public Event sp_recupera_deduccionesRowDeleted As sp_recupera_deduccionesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_deduccionesRow(ByVal row As sp_recupera_deduccionesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_deduccionesRow(ByVal TipoDeduccion As Integer, ByVal ClaveD As String, ByVal ConceptoD As String, ByVal ImpGravadoD As Double, ByVal ImpExentoD As Double) As sp_recupera_deduccionesRow
            Dim rowsp_recupera_deduccionesRow As sp_recupera_deduccionesRow = CType(Me.NewRow,sp_recupera_deduccionesRow)
            Dim columnValuesArray() As Object = New Object() {TipoDeduccion, ClaveD, ConceptoD, ImpGravadoD, ImpExentoD}
            rowsp_recupera_deduccionesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_deduccionesRow)
            Return rowsp_recupera_deduccionesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_deduccionesDataTable = CType(MyBase.Clone,sp_recupera_deduccionesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_deduccionesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipoDeduccion = MyBase.Columns("TipoDeduccion")
            Me.columnClaveD = MyBase.Columns("ClaveD")
            Me.columnConceptoD = MyBase.Columns("ConceptoD")
            Me.columnImpGravadoD = MyBase.Columns("ImpGravadoD")
            Me.columnImpExentoD = MyBase.Columns("ImpExentoD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipoDeduccion = New Global.System.Data.DataColumn("TipoDeduccion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoDeduccion)
            Me.columnClaveD = New Global.System.Data.DataColumn("ClaveD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClaveD)
            Me.columnConceptoD = New Global.System.Data.DataColumn("ConceptoD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConceptoD)
            Me.columnImpGravadoD = New Global.System.Data.DataColumn("ImpGravadoD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpGravadoD)
            Me.columnImpExentoD = New Global.System.Data.DataColumn("ImpExentoD", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpExentoD)
            Me.columnClaveD.MaxLength = 15
            Me.columnConceptoD.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_deduccionesRow() As sp_recupera_deduccionesRow
            Return CType(Me.NewRow,sp_recupera_deduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_deduccionesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_deduccionesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_deduccionesRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_deduccionesRowChanged(Me, New sp_recupera_deduccionesRowChangeEvent(CType(e.Row,sp_recupera_deduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_deduccionesRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_deduccionesRowChanging(Me, New sp_recupera_deduccionesRowChangeEvent(CType(e.Row,sp_recupera_deduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_deduccionesRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_deduccionesRowDeleted(Me, New sp_recupera_deduccionesRowChangeEvent(CType(e.Row,sp_recupera_deduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_deduccionesRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_deduccionesRowDeleting(Me, New sp_recupera_deduccionesRowChangeEvent(CType(e.Row,sp_recupera_deduccionesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_deduccionesRow(ByVal row As sp_recupera_deduccionesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_deduccionesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_empleadoRECDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_empleadoRECRow)
        
        Private columnNumEmpleado As Global.System.Data.DataColumn
        
        Private columnNombreCompleto As Global.System.Data.DataColumn
        
        Private columnrRFC As Global.System.Data.DataColumn
        
        Private columnNumSeguridadSocial As Global.System.Data.DataColumn
        
        Private columnCURP As Global.System.Data.DataColumn
        
        Private columnDepartamento As Global.System.Data.DataColumn
        
        Private columnPuesto As Global.System.Data.DataColumn
        
        Private columnCLABE As Global.System.Data.DataColumn
        
        Private columnSalarioBaseCotAport As Global.System.Data.DataColumn
        
        Private columnSalarioDiarioIntegrado As Global.System.Data.DataColumn
        
        Private columnrCalle As Global.System.Data.DataColumn
        
        Private columnrDomicilio1 As Global.System.Data.DataColumn
        
        Private columnrDomicilio2 As Global.System.Data.DataColumn
        
        Private columnTipoRegimen As Global.System.Data.DataColumn
        
        Private columnTipoJornada As Global.System.Data.DataColumn
        
        Private columnTipoContrato As Global.System.Data.DataColumn
        
        Private columnPeriodicidadPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_empleadoREC"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumEmpleadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumEmpleado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCompletoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCompleto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rRFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumSeguridadSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumSeguridadSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CURPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCURP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DepartamentoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepartamento
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CLABEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCLABE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioBaseCotAportColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioBaseCotAport
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SalarioDiarioIntegradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSalarioDiarioIntegrado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoRegimenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoRegimen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoJornadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoJornada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoContratoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoContrato
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodicidadPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodicidadPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_empleadoRECRow
            Get
                Return CType(Me.Rows(index),sp_recupera_empleadoRECRow)
            End Get
        End Property
        
        Public Event sp_recupera_empleadoRECRowChanging As sp_recupera_empleadoRECRowChangeEventHandler
        
        Public Event sp_recupera_empleadoRECRowChanged As sp_recupera_empleadoRECRowChangeEventHandler
        
        Public Event sp_recupera_empleadoRECRowDeleting As sp_recupera_empleadoRECRowChangeEventHandler
        
        Public Event sp_recupera_empleadoRECRowDeleted As sp_recupera_empleadoRECRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_empleadoRECRow(ByVal row As sp_recupera_empleadoRECRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_empleadoRECRow( _
                    ByVal NumEmpleado As String,  _
                    ByVal NombreCompleto As String,  _
                    ByVal rRFC As String,  _
                    ByVal NumSeguridadSocial As String,  _
                    ByVal CURP As String,  _
                    ByVal Departamento As String,  _
                    ByVal Puesto As String,  _
                    ByVal CLABE As String,  _
                    ByVal SalarioBaseCotAport As Double,  _
                    ByVal SalarioDiarioIntegrado As Double,  _
                    ByVal rCalle As String,  _
                    ByVal rDomicilio1 As String,  _
                    ByVal rDomicilio2 As String,  _
                    ByVal TipoRegimen As String,  _
                    ByVal TipoJornada As String,  _
                    ByVal TipoContrato As String,  _
                    ByVal PeriodicidadPago As String) As sp_recupera_empleadoRECRow
            Dim rowsp_recupera_empleadoRECRow As sp_recupera_empleadoRECRow = CType(Me.NewRow,sp_recupera_empleadoRECRow)
            Dim columnValuesArray() As Object = New Object() {NumEmpleado, NombreCompleto, rRFC, NumSeguridadSocial, CURP, Departamento, Puesto, CLABE, SalarioBaseCotAport, SalarioDiarioIntegrado, rCalle, rDomicilio1, rDomicilio2, TipoRegimen, TipoJornada, TipoContrato, PeriodicidadPago}
            rowsp_recupera_empleadoRECRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_empleadoRECRow)
            Return rowsp_recupera_empleadoRECRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_empleadoRECDataTable = CType(MyBase.Clone,sp_recupera_empleadoRECDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_empleadoRECDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumEmpleado = MyBase.Columns("NumEmpleado")
            Me.columnNombreCompleto = MyBase.Columns("NombreCompleto")
            Me.columnrRFC = MyBase.Columns("rRFC")
            Me.columnNumSeguridadSocial = MyBase.Columns("NumSeguridadSocial")
            Me.columnCURP = MyBase.Columns("CURP")
            Me.columnDepartamento = MyBase.Columns("Departamento")
            Me.columnPuesto = MyBase.Columns("Puesto")
            Me.columnCLABE = MyBase.Columns("CLABE")
            Me.columnSalarioBaseCotAport = MyBase.Columns("SalarioBaseCotAport")
            Me.columnSalarioDiarioIntegrado = MyBase.Columns("SalarioDiarioIntegrado")
            Me.columnrCalle = MyBase.Columns("rCalle")
            Me.columnrDomicilio1 = MyBase.Columns("rDomicilio1")
            Me.columnrDomicilio2 = MyBase.Columns("rDomicilio2")
            Me.columnTipoRegimen = MyBase.Columns("TipoRegimen")
            Me.columnTipoJornada = MyBase.Columns("TipoJornada")
            Me.columnTipoContrato = MyBase.Columns("TipoContrato")
            Me.columnPeriodicidadPago = MyBase.Columns("PeriodicidadPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumEmpleado = New Global.System.Data.DataColumn("NumEmpleado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumEmpleado)
            Me.columnNombreCompleto = New Global.System.Data.DataColumn("NombreCompleto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCompleto)
            Me.columnrRFC = New Global.System.Data.DataColumn("rRFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrRFC)
            Me.columnNumSeguridadSocial = New Global.System.Data.DataColumn("NumSeguridadSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumSeguridadSocial)
            Me.columnCURP = New Global.System.Data.DataColumn("CURP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCURP)
            Me.columnDepartamento = New Global.System.Data.DataColumn("Departamento", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepartamento)
            Me.columnPuesto = New Global.System.Data.DataColumn("Puesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuesto)
            Me.columnCLABE = New Global.System.Data.DataColumn("CLABE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCLABE)
            Me.columnSalarioBaseCotAport = New Global.System.Data.DataColumn("SalarioBaseCotAport", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioBaseCotAport)
            Me.columnSalarioDiarioIntegrado = New Global.System.Data.DataColumn("SalarioDiarioIntegrado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSalarioDiarioIntegrado)
            Me.columnrCalle = New Global.System.Data.DataColumn("rCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrCalle)
            Me.columnrDomicilio1 = New Global.System.Data.DataColumn("rDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio1)
            Me.columnrDomicilio2 = New Global.System.Data.DataColumn("rDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio2)
            Me.columnTipoRegimen = New Global.System.Data.DataColumn("TipoRegimen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoRegimen)
            Me.columnTipoJornada = New Global.System.Data.DataColumn("TipoJornada", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoJornada)
            Me.columnTipoContrato = New Global.System.Data.DataColumn("TipoContrato", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoContrato)
            Me.columnPeriodicidadPago = New Global.System.Data.DataColumn("PeriodicidadPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodicidadPago)
            Me.columnNumEmpleado.MaxLength = 15
            Me.columnNombreCompleto.MaxLength = 200
            Me.columnrRFC.MaxLength = 32
            Me.columnNumSeguridadSocial.MaxLength = 30
            Me.columnCURP.MaxLength = 18
            Me.columnDepartamento.MaxLength = 30
            Me.columnPuesto.MaxLength = 30
            Me.columnCLABE.MaxLength = 18
            Me.columnrCalle.ReadOnly = true
            Me.columnrCalle.MaxLength = 150
            Me.columnrDomicilio1.ReadOnly = true
            Me.columnrDomicilio1.MaxLength = 92
            Me.columnrDomicilio2.ReadOnly = true
            Me.columnrDomicilio2.MaxLength = 82
            Me.columnTipoRegimen.ReadOnly = true
            Me.columnTipoRegimen.MaxLength = 128
            Me.columnTipoJornada.ReadOnly = true
            Me.columnTipoJornada.MaxLength = 128
            Me.columnTipoContrato.ReadOnly = true
            Me.columnTipoContrato.MaxLength = 128
            Me.columnPeriodicidadPago.ReadOnly = true
            Me.columnPeriodicidadPago.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_empleadoRECRow() As sp_recupera_empleadoRECRow
            Return CType(Me.NewRow,sp_recupera_empleadoRECRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_empleadoRECRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_empleadoRECRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_empleadoRECRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_empleadoRECRowChanged(Me, New sp_recupera_empleadoRECRowChangeEvent(CType(e.Row,sp_recupera_empleadoRECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_empleadoRECRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_empleadoRECRowChanging(Me, New sp_recupera_empleadoRECRowChangeEvent(CType(e.Row,sp_recupera_empleadoRECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_empleadoRECRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_empleadoRECRowDeleted(Me, New sp_recupera_empleadoRECRowChangeEvent(CType(e.Row,sp_recupera_empleadoRECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_empleadoRECRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_empleadoRECRowDeleting(Me, New sp_recupera_empleadoRECRowChangeEvent(CType(e.Row,sp_recupera_empleadoRECRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_empleadoRECRow(ByVal row As sp_recupera_empleadoRECRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_empleadoRECDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_reciboNominaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_reciboNominaRow)
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnRegimenFiscal As Global.System.Data.DataColumn
        
        Private columnFechaPago As Global.System.Data.DataColumn
        
        Private columnfechaRecibo As Global.System.Data.DataColumn
        
        Private columnformaDePago As Global.System.Data.DataColumn
        
        Private columnnoCertificado As Global.System.Data.DataColumn
        
        Private columnMONClave As Global.System.Data.DataColumn
        
        Private columnMetodoPago As Global.System.Data.DataColumn
        
        Private columnTipoBanco As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        Private columnNumNomina As Global.System.Data.DataColumn
        
        Private columnFechaInicialPago As Global.System.Data.DataColumn
        
        Private columnFechaFinalPago As Global.System.Data.DataColumn
        
        Private columnNumDiasPagados As Global.System.Data.DataColumn
        
        Private columnCompania As Global.System.Data.DataColumn
        
        Private columncRFC As Global.System.Data.DataColumn
        
        Private columnregistroPatronal As Global.System.Data.DataColumn
        
        Private columnriesgoPuesto As Global.System.Data.DataColumn
        
        Private columneCalle As Global.System.Data.DataColumn
        
        Private columneDomicilio1 As Global.System.Data.DataColumn
        
        Private columneDomicilio2 As Global.System.Data.DataColumn
        
        Private columnsCalle As Global.System.Data.DataColumn
        
        Private columnsDomicilio1 As Global.System.Data.DataColumn
        
        Private columnsDomicilio2 As Global.System.Data.DataColumn
        
        Private columncadenaOriginal As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnCBB As Global.System.Data.DataColumn
        
        Private columnUUID As Global.System.Data.DataColumn
        
        Private columnSelloSAT As Global.System.Data.DataColumn
        
        Private columnCertificadoSAT As Global.System.Data.DataColumn
        
        Private columnfechaTimbrado As Global.System.Data.DataColumn
        
        Private columnTotalNetoPagar As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_reciboNomina"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimenFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaReciboColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaRecibo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaDePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaDePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoBancoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoBanco
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumNominaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumNomina
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaInicialPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaInicialPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaFinalPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaFinalPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumDiasPagadosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumDiasPagados
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompaniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompania
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cRFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property registroPatronalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnregistroPatronal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property riesgoPuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnriesgoPuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cadenaOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncadenaOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelloSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CertificadoSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificadoSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaTimbradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaTimbrado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNetoPagarColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNetoPagar
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_reciboNominaRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_reciboNominaRow)
            End Get
        End Property
        
        Public Event sp_encabezado_reciboNominaRowChanging As sp_encabezado_reciboNominaRowChangeEventHandler
        
        Public Event sp_encabezado_reciboNominaRowChanged As sp_encabezado_reciboNominaRowChangeEventHandler
        
        Public Event sp_encabezado_reciboNominaRowDeleting As sp_encabezado_reciboNominaRowChangeEventHandler
        
        Public Event sp_encabezado_reciboNominaRowDeleted As sp_encabezado_reciboNominaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_reciboNominaRow(ByVal row As sp_encabezado_reciboNominaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_reciboNominaRow( _
                    ByVal Serie As String,  _
                    ByVal Folio As Double,  _
                    ByVal RegimenFiscal As String,  _
                    ByVal FechaPago As Date,  _
                    ByVal fechaRecibo As Date,  _
                    ByVal formaDePago As String,  _
                    ByVal noCertificado As String,  _
                    ByVal MONClave As String,  _
                    ByVal MetodoPago As String,  _
                    ByVal TipoBanco As Integer,  _
                    ByVal Referencia As String,  _
                    ByVal TipoCambio As Double,  _
                    ByVal NumNomina As String,  _
                    ByVal FechaInicialPago As Date,  _
                    ByVal FechaFinalPago As Date,  _
                    ByVal NumDiasPagados As Integer,  _
                    ByVal Compania As String,  _
                    ByVal cRFC As String,  _
                    ByVal registroPatronal As String,  _
                    ByVal riesgoPuesto As Integer,  _
                    ByVal eCalle As String,  _
                    ByVal eDomicilio1 As String,  _
                    ByVal eDomicilio2 As String,  _
                    ByVal sCalle As String,  _
                    ByVal sDomicilio1 As String,  _
                    ByVal sDomicilio2 As String,  _
                    ByVal cadenaOriginal As String,  _
                    ByVal Sello As String,  _
                    ByVal CBB() As Byte,  _
                    ByVal UUID As String,  _
                    ByVal SelloSAT As String,  _
                    ByVal CertificadoSAT As String,  _
                    ByVal fechaTimbrado As Date,  _
                    ByVal TotalNetoPagar As Double) As sp_encabezado_reciboNominaRow
            Dim rowsp_encabezado_reciboNominaRow As sp_encabezado_reciboNominaRow = CType(Me.NewRow,sp_encabezado_reciboNominaRow)
            Dim columnValuesArray() As Object = New Object() {Serie, Folio, RegimenFiscal, FechaPago, fechaRecibo, formaDePago, noCertificado, MONClave, MetodoPago, TipoBanco, Referencia, TipoCambio, NumNomina, FechaInicialPago, FechaFinalPago, NumDiasPagados, Compania, cRFC, registroPatronal, riesgoPuesto, eCalle, eDomicilio1, eDomicilio2, sCalle, sDomicilio1, sDomicilio2, cadenaOriginal, Sello, CBB, UUID, SelloSAT, CertificadoSAT, fechaTimbrado, TotalNetoPagar}
            rowsp_encabezado_reciboNominaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_reciboNominaRow)
            Return rowsp_encabezado_reciboNominaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_reciboNominaDataTable = CType(MyBase.Clone,sp_encabezado_reciboNominaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_reciboNominaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnRegimenFiscal = MyBase.Columns("RegimenFiscal")
            Me.columnFechaPago = MyBase.Columns("FechaPago")
            Me.columnfechaRecibo = MyBase.Columns("fechaRecibo")
            Me.columnformaDePago = MyBase.Columns("formaDePago")
            Me.columnnoCertificado = MyBase.Columns("noCertificado")
            Me.columnMONClave = MyBase.Columns("MONClave")
            Me.columnMetodoPago = MyBase.Columns("MetodoPago")
            Me.columnTipoBanco = MyBase.Columns("TipoBanco")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
            Me.columnNumNomina = MyBase.Columns("NumNomina")
            Me.columnFechaInicialPago = MyBase.Columns("FechaInicialPago")
            Me.columnFechaFinalPago = MyBase.Columns("FechaFinalPago")
            Me.columnNumDiasPagados = MyBase.Columns("NumDiasPagados")
            Me.columnCompania = MyBase.Columns("Compania")
            Me.columncRFC = MyBase.Columns("cRFC")
            Me.columnregistroPatronal = MyBase.Columns("registroPatronal")
            Me.columnriesgoPuesto = MyBase.Columns("riesgoPuesto")
            Me.columneCalle = MyBase.Columns("eCalle")
            Me.columneDomicilio1 = MyBase.Columns("eDomicilio1")
            Me.columneDomicilio2 = MyBase.Columns("eDomicilio2")
            Me.columnsCalle = MyBase.Columns("sCalle")
            Me.columnsDomicilio1 = MyBase.Columns("sDomicilio1")
            Me.columnsDomicilio2 = MyBase.Columns("sDomicilio2")
            Me.columncadenaOriginal = MyBase.Columns("cadenaOriginal")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnCBB = MyBase.Columns("CBB")
            Me.columnUUID = MyBase.Columns("UUID")
            Me.columnSelloSAT = MyBase.Columns("SelloSAT")
            Me.columnCertificadoSAT = MyBase.Columns("CertificadoSAT")
            Me.columnfechaTimbrado = MyBase.Columns("fechaTimbrado")
            Me.columnTotalNetoPagar = MyBase.Columns("TotalNetoPagar")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnRegimenFiscal = New Global.System.Data.DataColumn("RegimenFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimenFiscal)
            Me.columnFechaPago = New Global.System.Data.DataColumn("FechaPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaPago)
            Me.columnfechaRecibo = New Global.System.Data.DataColumn("fechaRecibo", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaRecibo)
            Me.columnformaDePago = New Global.System.Data.DataColumn("formaDePago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaDePago)
            Me.columnnoCertificado = New Global.System.Data.DataColumn("noCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoCertificado)
            Me.columnMONClave = New Global.System.Data.DataColumn("MONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONClave)
            Me.columnMetodoPago = New Global.System.Data.DataColumn("MetodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoPago)
            Me.columnTipoBanco = New Global.System.Data.DataColumn("TipoBanco", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoBanco)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnNumNomina = New Global.System.Data.DataColumn("NumNomina", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumNomina)
            Me.columnFechaInicialPago = New Global.System.Data.DataColumn("FechaInicialPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaInicialPago)
            Me.columnFechaFinalPago = New Global.System.Data.DataColumn("FechaFinalPago", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaFinalPago)
            Me.columnNumDiasPagados = New Global.System.Data.DataColumn("NumDiasPagados", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumDiasPagados)
            Me.columnCompania = New Global.System.Data.DataColumn("Compania", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompania)
            Me.columncRFC = New Global.System.Data.DataColumn("cRFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncRFC)
            Me.columnregistroPatronal = New Global.System.Data.DataColumn("registroPatronal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnregistroPatronal)
            Me.columnriesgoPuesto = New Global.System.Data.DataColumn("riesgoPuesto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnriesgoPuesto)
            Me.columneCalle = New Global.System.Data.DataColumn("eCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneCalle)
            Me.columneDomicilio1 = New Global.System.Data.DataColumn("eDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio1)
            Me.columneDomicilio2 = New Global.System.Data.DataColumn("eDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio2)
            Me.columnsCalle = New Global.System.Data.DataColumn("sCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCalle)
            Me.columnsDomicilio1 = New Global.System.Data.DataColumn("sDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio1)
            Me.columnsDomicilio2 = New Global.System.Data.DataColumn("sDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio2)
            Me.columncadenaOriginal = New Global.System.Data.DataColumn("cadenaOriginal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncadenaOriginal)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnCBB = New Global.System.Data.DataColumn("CBB", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBB)
            Me.columnUUID = New Global.System.Data.DataColumn("UUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUID)
            Me.columnSelloSAT = New Global.System.Data.DataColumn("SelloSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelloSAT)
            Me.columnCertificadoSAT = New Global.System.Data.DataColumn("CertificadoSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificadoSAT)
            Me.columnfechaTimbrado = New Global.System.Data.DataColumn("fechaTimbrado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaTimbrado)
            Me.columnTotalNetoPagar = New Global.System.Data.DataColumn("TotalNetoPagar", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNetoPagar)
            Me.columnSerie.MaxLength = 50
            Me.columnRegimenFiscal.MaxLength = 128
            Me.columnformaDePago.MaxLength = 40
            Me.columnnoCertificado.MaxLength = 50
            Me.columnMONClave.MaxLength = 20
            Me.columnMetodoPago.MaxLength = 50
            Me.columnReferencia.MaxLength = 20
            Me.columnNumNomina.MaxLength = 15
            Me.columnCompania.MaxLength = 60
            Me.columncRFC.MaxLength = 32
            Me.columnregistroPatronal.MaxLength = 20
            Me.columneCalle.ReadOnly = true
            Me.columneCalle.MaxLength = 150
            Me.columneDomicilio1.ReadOnly = true
            Me.columneDomicilio1.MaxLength = 92
            Me.columneDomicilio2.ReadOnly = true
            Me.columneDomicilio2.MaxLength = 82
            Me.columnsCalle.ReadOnly = true
            Me.columnsCalle.MaxLength = 150
            Me.columnsDomicilio1.ReadOnly = true
            Me.columnsDomicilio1.MaxLength = 92
            Me.columnsDomicilio2.ReadOnly = true
            Me.columnsDomicilio2.MaxLength = 82
            Me.columncadenaOriginal.MaxLength = 2147483647
            Me.columnSello.MaxLength = 2147483647
            Me.columnUUID.MaxLength = 50
            Me.columnSelloSAT.MaxLength = 2147483647
            Me.columnCertificadoSAT.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_reciboNominaRow() As sp_encabezado_reciboNominaRow
            Return CType(Me.NewRow,sp_encabezado_reciboNominaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_reciboNominaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_reciboNominaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_reciboNominaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_reciboNominaRowChanged(Me, New sp_encabezado_reciboNominaRowChangeEvent(CType(e.Row,sp_encabezado_reciboNominaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_reciboNominaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_reciboNominaRowChanging(Me, New sp_encabezado_reciboNominaRowChangeEvent(CType(e.Row,sp_encabezado_reciboNominaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_reciboNominaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_reciboNominaRowDeleted(Me, New sp_encabezado_reciboNominaRowChangeEvent(CType(e.Row,sp_encabezado_reciboNominaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_reciboNominaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_reciboNominaRowDeleting(Me, New sp_encabezado_reciboNominaRowChangeEvent(CType(e.Row,sp_encabezado_reciboNominaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_reciboNominaRow(ByVal row As sp_encabezado_reciboNominaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_reciboNominaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_obtener_surtidodetalleDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_obtener_surtidodetalleRow)
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNumParte As Global.System.Data.DataColumn
        
        Private columnGTIN As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnUBCClave As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_obtener_surtidodetalle"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumParteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumParte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GTINColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGTIN
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UBCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUBCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_obtener_surtidodetalleRow
            Get
                Return CType(Me.Rows(index),sp_obtener_surtidodetalleRow)
            End Get
        End Property
        
        Public Event sp_obtener_surtidodetalleRowChanging As sp_obtener_surtidodetalleRowChangeEventHandler
        
        Public Event sp_obtener_surtidodetalleRowChanged As sp_obtener_surtidodetalleRowChangeEventHandler
        
        Public Event sp_obtener_surtidodetalleRowDeleting As sp_obtener_surtidodetalleRowChangeEventHandler
        
        Public Event sp_obtener_surtidodetalleRowDeleted As sp_obtener_surtidodetalleRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_obtener_surtidodetalleRow(ByVal row As sp_obtener_surtidodetalleRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_obtener_surtidodetalleRow(ByVal Clave As String, ByVal NumParte As String, ByVal GTIN As String, ByVal Nombre As String, ByVal UBCClave As String, ByVal Cantidad As Double) As sp_obtener_surtidodetalleRow
            Dim rowsp_obtener_surtidodetalleRow As sp_obtener_surtidodetalleRow = CType(Me.NewRow,sp_obtener_surtidodetalleRow)
            Dim columnValuesArray() As Object = New Object() {Clave, NumParte, GTIN, Nombre, UBCClave, Cantidad}
            rowsp_obtener_surtidodetalleRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_obtener_surtidodetalleRow)
            Return rowsp_obtener_surtidodetalleRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_obtener_surtidodetalleDataTable = CType(MyBase.Clone,sp_obtener_surtidodetalleDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_obtener_surtidodetalleDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNumParte = MyBase.Columns("NumParte")
            Me.columnGTIN = MyBase.Columns("GTIN")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnUBCClave = MyBase.Columns("UBCClave")
            Me.columnCantidad = MyBase.Columns("Cantidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNumParte = New Global.System.Data.DataColumn("NumParte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumParte)
            Me.columnGTIN = New Global.System.Data.DataColumn("GTIN", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGTIN)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnUBCClave = New Global.System.Data.DataColumn("UBCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUBCClave)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnClave.MaxLength = 20
            Me.columnNumParte.MaxLength = 20
            Me.columnGTIN.ReadOnly = true
            Me.columnGTIN.MaxLength = 50
            Me.columnNombre.MaxLength = 50
            Me.columnUBCClave.AllowDBNull = false
            Me.columnUBCClave.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_obtener_surtidodetalleRow() As sp_obtener_surtidodetalleRow
            Return CType(Me.NewRow,sp_obtener_surtidodetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_obtener_surtidodetalleRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_obtener_surtidodetalleRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_obtener_surtidodetalleRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_obtener_surtidodetalleRowChanged(Me, New sp_obtener_surtidodetalleRowChangeEvent(CType(e.Row,sp_obtener_surtidodetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_obtener_surtidodetalleRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_obtener_surtidodetalleRowChanging(Me, New sp_obtener_surtidodetalleRowChangeEvent(CType(e.Row,sp_obtener_surtidodetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_obtener_surtidodetalleRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_obtener_surtidodetalleRowDeleted(Me, New sp_obtener_surtidodetalleRowChangeEvent(CType(e.Row,sp_obtener_surtidodetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_obtener_surtidodetalleRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_obtener_surtidodetalleRowDeleting(Me, New sp_obtener_surtidodetalleRowChangeEvent(CType(e.Row,sp_obtener_surtidodetalleRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_obtener_surtidodetalleRow(ByVal row As sp_obtener_surtidodetalleRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_obtener_surtidodetalleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_obtener_envioDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_obtener_envioRow)
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        Private columnRef As Global.System.Data.DataColumn
        
        Private columnObservaciones As Global.System.Data.DataColumn
        
        Private columnfechaPrevista As Global.System.Data.DataColumn
        
        Private columnfechaEfectiva As Global.System.Data.DataColumn
        
        Private columnRuta As Global.System.Data.DataColumn
        
        Private columnReferencia As Global.System.Data.DataColumn
        
        Private columnformaEnvio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_obtener_envio"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RefColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRef
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObservacionesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObservaciones
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaPrevistaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaPrevista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaEfectivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaEfectiva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferencia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_obtener_envioRow
            Get
                Return CType(Me.Rows(index),sp_obtener_envioRow)
            End Get
        End Property
        
        Public Event sp_obtener_envioRowChanging As sp_obtener_envioRowChangeEventHandler
        
        Public Event sp_obtener_envioRowChanged As sp_obtener_envioRowChangeEventHandler
        
        Public Event sp_obtener_envioRowDeleting As sp_obtener_envioRowChangeEventHandler
        
        Public Event sp_obtener_envioRowDeleted As sp_obtener_envioRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_obtener_envioRow(ByVal row As sp_obtener_envioRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_obtener_envioRow(ByVal Calle As String, ByVal Domicilio1 As String, ByVal Domicilio2 As String, ByVal Ref As String, ByVal Observaciones As String, ByVal fechaPrevista As Date, ByVal fechaEfectiva As Date, ByVal Ruta As String, ByVal Referencia As String, ByVal formaEnvio As String) As sp_obtener_envioRow
            Dim rowsp_obtener_envioRow As sp_obtener_envioRow = CType(Me.NewRow,sp_obtener_envioRow)
            Dim columnValuesArray() As Object = New Object() {Calle, Domicilio1, Domicilio2, Ref, Observaciones, fechaPrevista, fechaEfectiva, Ruta, Referencia, formaEnvio}
            rowsp_obtener_envioRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_obtener_envioRow)
            Return rowsp_obtener_envioRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_obtener_envioDataTable = CType(MyBase.Clone,sp_obtener_envioDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_obtener_envioDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
            Me.columnRef = MyBase.Columns("Ref")
            Me.columnObservaciones = MyBase.Columns("Observaciones")
            Me.columnfechaPrevista = MyBase.Columns("fechaPrevista")
            Me.columnfechaEfectiva = MyBase.Columns("fechaEfectiva")
            Me.columnRuta = MyBase.Columns("Ruta")
            Me.columnReferencia = MyBase.Columns("Referencia")
            Me.columnformaEnvio = MyBase.Columns("formaEnvio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.columnRef = New Global.System.Data.DataColumn("Ref", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRef)
            Me.columnObservaciones = New Global.System.Data.DataColumn("Observaciones", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObservaciones)
            Me.columnfechaPrevista = New Global.System.Data.DataColumn("fechaPrevista", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaPrevista)
            Me.columnfechaEfectiva = New Global.System.Data.DataColumn("fechaEfectiva", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaEfectiva)
            Me.columnRuta = New Global.System.Data.DataColumn("Ruta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRuta)
            Me.columnReferencia = New Global.System.Data.DataColumn("Referencia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferencia)
            Me.columnformaEnvio = New Global.System.Data.DataColumn("formaEnvio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaEnvio)
            Me.columnCalle.ReadOnly = true
            Me.columnCalle.MaxLength = 150
            Me.columnDomicilio1.ReadOnly = true
            Me.columnDomicilio1.MaxLength = 92
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
            Me.columnRef.MaxLength = 50
            Me.columnObservaciones.MaxLength = 500
            Me.columnRuta.MaxLength = 20
            Me.columnReferencia.MaxLength = 20
            Me.columnformaEnvio.ReadOnly = true
            Me.columnformaEnvio.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_obtener_envioRow() As sp_obtener_envioRow
            Return CType(Me.NewRow,sp_obtener_envioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_obtener_envioRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_obtener_envioRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_obtener_envioRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_obtener_envioRowChanged(Me, New sp_obtener_envioRowChangeEvent(CType(e.Row,sp_obtener_envioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_obtener_envioRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_obtener_envioRowChanging(Me, New sp_obtener_envioRowChangeEvent(CType(e.Row,sp_obtener_envioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_obtener_envioRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_obtener_envioRowDeleted(Me, New sp_obtener_envioRowChangeEvent(CType(e.Row,sp_obtener_envioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_obtener_envioRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_obtener_envioRowDeleting(Me, New sp_obtener_envioRowChangeEvent(CType(e.Row,sp_obtener_envioRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_obtener_envioRow(ByVal row As sp_obtener_envioRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_obtener_envioDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_cargoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_cargoRow)
        
        Private columnCARClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnTipoCF As Global.System.Data.DataColumn
        
        Private columnVersionCF As Global.System.Data.DataColumn
        
        Private columnRegimenFiscal As Global.System.Data.DataColumn
        
        Private columnSerie As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnCTEClave As Global.System.Data.DataColumn
        
        Private columnfecha As Global.System.Data.DataColumn
        
        Private columnformaDePago As Global.System.Data.DataColumn
        
        Private columnnoCertificado As Global.System.Data.DataColumn
        
        Private columnsubtotal As Global.System.Data.DataColumn
        
        Private columnimpuestoTot As Global.System.Data.DataColumn
        
        Private columntotal As Global.System.Data.DataColumn
        
        Private columnsaldo As Global.System.Data.DataColumn
        
        Private columnestado As Global.System.Data.DataColumn
        
        Private columntipo As Global.System.Data.DataColumn
        
        Private columnMONClave As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnrCalle As Global.System.Data.DataColumn
        
        Private columnrDomicilio1 As Global.System.Data.DataColumn
        
        Private columnrDomicilio2 As Global.System.Data.DataColumn
        
        Private columnsCalle As Global.System.Data.DataColumn
        
        Private columnsDomicilio1 As Global.System.Data.DataColumn
        
        Private columnsDomicilio2 As Global.System.Data.DataColumn
        
        Private columnCompania As Global.System.Data.DataColumn
        
        Private columncRFC As Global.System.Data.DataColumn
        
        Private columnTelefono As Global.System.Data.DataColumn
        
        Private columneCalle As Global.System.Data.DataColumn
        
        Private columneDomicilio1 As Global.System.Data.DataColumn
        
        Private columneDomicilio2 As Global.System.Data.DataColumn
        
        Private columnMoneda As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_cargo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionCFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersionCF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenFiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimenFiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SerieColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSerie
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaDePagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaDePago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property noCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnnoCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property subtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property impuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnimpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property totalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property saldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property estadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnestado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MONClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMONClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnrCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property rDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnrDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompaniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompania
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cRFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefono
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columneCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property eDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columneDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MonedaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoneda
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_cargoRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_cargoRow)
            End Get
        End Property
        
        Public Event sp_encabezado_cargoRowChanging As sp_encabezado_cargoRowChangeEventHandler
        
        Public Event sp_encabezado_cargoRowChanged As sp_encabezado_cargoRowChangeEventHandler
        
        Public Event sp_encabezado_cargoRowDeleting As sp_encabezado_cargoRowChangeEventHandler
        
        Public Event sp_encabezado_cargoRowDeleted As sp_encabezado_cargoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_cargoRow(ByVal row As sp_encabezado_cargoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_cargoRow( _
                    ByVal CARClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal TipoCF As Integer,  _
                    ByVal VersionCF As String,  _
                    ByVal RegimenFiscal As String,  _
                    ByVal Serie As String,  _
                    ByVal Folio As Double,  _
                    ByVal CAJClave As String,  _
                    ByVal CTEClave As String,  _
                    ByVal fecha As Date,  _
                    ByVal formaDePago As String,  _
                    ByVal noCertificado As String,  _
                    ByVal subtotal As Double,  _
                    ByVal impuestoTot As Double,  _
                    ByVal total As Double,  _
                    ByVal saldo As Double,  _
                    ByVal estado As Integer,  _
                    ByVal tipo As String,  _
                    ByVal MONClave As String,  _
                    ByVal TipoCambio As Double,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Notas As String,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal rCalle As String,  _
                    ByVal rDomicilio1 As String,  _
                    ByVal rDomicilio2 As String,  _
                    ByVal sCalle As String,  _
                    ByVal sDomicilio1 As String,  _
                    ByVal sDomicilio2 As String,  _
                    ByVal Compania As String,  _
                    ByVal cRFC As String,  _
                    ByVal Telefono As String,  _
                    ByVal eCalle As String,  _
                    ByVal eDomicilio1 As String,  _
                    ByVal eDomicilio2 As String,  _
                    ByVal Moneda As String) As sp_encabezado_cargoRow
            Dim rowsp_encabezado_cargoRow As sp_encabezado_cargoRow = CType(Me.NewRow,sp_encabezado_cargoRow)
            Dim columnValuesArray() As Object = New Object() {CARClave, Periodo, Mes, TipoCF, VersionCF, RegimenFiscal, Serie, Folio, CAJClave, CTEClave, fecha, formaDePago, noCertificado, subtotal, impuestoTot, total, saldo, estado, tipo, MONClave, TipoCambio, MFechaHora, MUsuarioId, Notas, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, rCalle, rDomicilio1, rDomicilio2, sCalle, sDomicilio1, sDomicilio2, Compania, cRFC, Telefono, eCalle, eDomicilio1, eDomicilio2, Moneda}
            rowsp_encabezado_cargoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_cargoRow)
            Return rowsp_encabezado_cargoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCARClave(ByVal CARClave As String) As sp_encabezado_cargoRow
            Return CType(Me.Rows.Find(New Object() {CARClave}),sp_encabezado_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_cargoDataTable = CType(MyBase.Clone,sp_encabezado_cargoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_cargoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCARClave = MyBase.Columns("CARClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnTipoCF = MyBase.Columns("TipoCF")
            Me.columnVersionCF = MyBase.Columns("VersionCF")
            Me.columnRegimenFiscal = MyBase.Columns("RegimenFiscal")
            Me.columnSerie = MyBase.Columns("Serie")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnCTEClave = MyBase.Columns("CTEClave")
            Me.columnfecha = MyBase.Columns("fecha")
            Me.columnformaDePago = MyBase.Columns("formaDePago")
            Me.columnnoCertificado = MyBase.Columns("noCertificado")
            Me.columnsubtotal = MyBase.Columns("subtotal")
            Me.columnimpuestoTot = MyBase.Columns("impuestoTot")
            Me.columntotal = MyBase.Columns("total")
            Me.columnsaldo = MyBase.Columns("saldo")
            Me.columnestado = MyBase.Columns("estado")
            Me.columntipo = MyBase.Columns("tipo")
            Me.columnMONClave = MyBase.Columns("MONClave")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnNotas = MyBase.Columns("Notas")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnrCalle = MyBase.Columns("rCalle")
            Me.columnrDomicilio1 = MyBase.Columns("rDomicilio1")
            Me.columnrDomicilio2 = MyBase.Columns("rDomicilio2")
            Me.columnsCalle = MyBase.Columns("sCalle")
            Me.columnsDomicilio1 = MyBase.Columns("sDomicilio1")
            Me.columnsDomicilio2 = MyBase.Columns("sDomicilio2")
            Me.columnCompania = MyBase.Columns("Compania")
            Me.columncRFC = MyBase.Columns("cRFC")
            Me.columnTelefono = MyBase.Columns("Telefono")
            Me.columneCalle = MyBase.Columns("eCalle")
            Me.columneDomicilio1 = MyBase.Columns("eDomicilio1")
            Me.columneDomicilio2 = MyBase.Columns("eDomicilio2")
            Me.columnMoneda = MyBase.Columns("Moneda")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCARClave = New Global.System.Data.DataColumn("CARClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnTipoCF = New Global.System.Data.DataColumn("TipoCF", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCF)
            Me.columnVersionCF = New Global.System.Data.DataColumn("VersionCF", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersionCF)
            Me.columnRegimenFiscal = New Global.System.Data.DataColumn("RegimenFiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimenFiscal)
            Me.columnSerie = New Global.System.Data.DataColumn("Serie", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSerie)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnCTEClave = New Global.System.Data.DataColumn("CTEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTEClave)
            Me.columnfecha = New Global.System.Data.DataColumn("fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfecha)
            Me.columnformaDePago = New Global.System.Data.DataColumn("formaDePago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaDePago)
            Me.columnnoCertificado = New Global.System.Data.DataColumn("noCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnnoCertificado)
            Me.columnsubtotal = New Global.System.Data.DataColumn("subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsubtotal)
            Me.columnimpuestoTot = New Global.System.Data.DataColumn("impuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnimpuestoTot)
            Me.columntotal = New Global.System.Data.DataColumn("total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntotal)
            Me.columnsaldo = New Global.System.Data.DataColumn("saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsaldo)
            Me.columnestado = New Global.System.Data.DataColumn("estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnestado)
            Me.columntipo = New Global.System.Data.DataColumn("tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipo)
            Me.columnMONClave = New Global.System.Data.DataColumn("MONClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMONClave)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnrCalle = New Global.System.Data.DataColumn("rCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrCalle)
            Me.columnrDomicilio1 = New Global.System.Data.DataColumn("rDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio1)
            Me.columnrDomicilio2 = New Global.System.Data.DataColumn("rDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnrDomicilio2)
            Me.columnsCalle = New Global.System.Data.DataColumn("sCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCalle)
            Me.columnsDomicilio1 = New Global.System.Data.DataColumn("sDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio1)
            Me.columnsDomicilio2 = New Global.System.Data.DataColumn("sDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio2)
            Me.columnCompania = New Global.System.Data.DataColumn("Compania", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompania)
            Me.columncRFC = New Global.System.Data.DataColumn("cRFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncRFC)
            Me.columnTelefono = New Global.System.Data.DataColumn("Telefono", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefono)
            Me.columneCalle = New Global.System.Data.DataColumn("eCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneCalle)
            Me.columneDomicilio1 = New Global.System.Data.DataColumn("eDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio1)
            Me.columneDomicilio2 = New Global.System.Data.DataColumn("eDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columneDomicilio2)
            Me.columnMoneda = New Global.System.Data.DataColumn("Moneda", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoneda)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCARClave}, true))
            Me.columnCARClave.AllowDBNull = false
            Me.columnCARClave.Unique = true
            Me.columnCARClave.MaxLength = 20
            Me.columnVersionCF.MaxLength = 50
            Me.columnRegimenFiscal.MaxLength = 128
            Me.columnSerie.MaxLength = 10
            Me.columnCAJClave.MaxLength = 20
            Me.columnCTEClave.MaxLength = 20
            Me.columnformaDePago.MaxLength = 40
            Me.columnnoCertificado.MaxLength = 50
            Me.columntipo.MaxLength = 10
            Me.columnMONClave.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnNotas.MaxLength = 500
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnrCalle.ReadOnly = true
            Me.columnrCalle.MaxLength = 150
            Me.columnrDomicilio1.ReadOnly = true
            Me.columnrDomicilio1.MaxLength = 92
            Me.columnrDomicilio2.ReadOnly = true
            Me.columnrDomicilio2.MaxLength = 82
            Me.columnsCalle.ReadOnly = true
            Me.columnsCalle.MaxLength = 150
            Me.columnsDomicilio1.ReadOnly = true
            Me.columnsDomicilio1.MaxLength = 92
            Me.columnsDomicilio2.ReadOnly = true
            Me.columnsDomicilio2.MaxLength = 82
            Me.columnCompania.MaxLength = 60
            Me.columncRFC.MaxLength = 32
            Me.columnTelefono.MaxLength = 20
            Me.columneCalle.ReadOnly = true
            Me.columneCalle.MaxLength = 150
            Me.columneDomicilio1.ReadOnly = true
            Me.columneDomicilio1.MaxLength = 92
            Me.columneDomicilio2.ReadOnly = true
            Me.columneDomicilio2.MaxLength = 82
            Me.columnMoneda.ReadOnly = true
            Me.columnMoneda.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_cargoRow() As sp_encabezado_cargoRow
            Return CType(Me.NewRow,sp_encabezado_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_cargoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_cargoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_cargoRowChanged(Me, New sp_encabezado_cargoRowChangeEvent(CType(e.Row,sp_encabezado_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_cargoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_cargoRowChanging(Me, New sp_encabezado_cargoRowChangeEvent(CType(e.Row,sp_encabezado_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_cargoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_cargoRowDeleted(Me, New sp_encabezado_cargoRowChangeEvent(CType(e.Row,sp_encabezado_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_cargoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_cargoRowDeleting(Me, New sp_encabezado_cargoRowChangeEvent(CType(e.Row,sp_encabezado_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_cargoRow(ByVal row As sp_encabezado_cargoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_cargoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_cargoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_cargoRow)
        
        Private columnDCRClave As Global.System.Data.DataColumn
        
        Private columnCARClave As Global.System.Data.DataColumn
        
        Private columnPrecioBruto As Global.System.Data.DataColumn
        
        Private columnImpuestoImp As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnSubTotalPartida As Global.System.Data.DataColumn
        
        Private columnTotalPartida As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        Private columnDescripción As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_cargo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DCRClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDCRClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripción
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_cargoRow
            Get
                Return CType(Me.Rows(index),sp_detalle_cargoRow)
            End Get
        End Property
        
        Public Event sp_detalle_cargoRowChanging As sp_detalle_cargoRowChangeEventHandler
        
        Public Event sp_detalle_cargoRowChanged As sp_detalle_cargoRowChangeEventHandler
        
        Public Event sp_detalle_cargoRowDeleting As sp_detalle_cargoRowChangeEventHandler
        
        Public Event sp_detalle_cargoRowDeleted As sp_detalle_cargoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_cargoRow(ByVal row As sp_detalle_cargoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_cargoRow(ByVal DCRClave As String, ByVal CARClave As String, ByVal PrecioBruto As Double, ByVal ImpuestoImp As Double, ByVal Cantidad As Double, ByVal SubTotalPartida As Double, ByVal TotalPartida As Double, ByVal Unidad As String, ByVal Descripción As String) As sp_detalle_cargoRow
            Dim rowsp_detalle_cargoRow As sp_detalle_cargoRow = CType(Me.NewRow,sp_detalle_cargoRow)
            Dim columnValuesArray() As Object = New Object() {DCRClave, CARClave, PrecioBruto, ImpuestoImp, Cantidad, SubTotalPartida, TotalPartida, Unidad, Descripción}
            rowsp_detalle_cargoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_cargoRow)
            Return rowsp_detalle_cargoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDCRClave(ByVal DCRClave As String) As sp_detalle_cargoRow
            Return CType(Me.Rows.Find(New Object() {DCRClave}),sp_detalle_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_cargoDataTable = CType(MyBase.Clone,sp_detalle_cargoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_cargoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDCRClave = MyBase.Columns("DCRClave")
            Me.columnCARClave = MyBase.Columns("CARClave")
            Me.columnPrecioBruto = MyBase.Columns("PrecioBruto")
            Me.columnImpuestoImp = MyBase.Columns("ImpuestoImp")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnSubTotalPartida = MyBase.Columns("SubTotalPartida")
            Me.columnTotalPartida = MyBase.Columns("TotalPartida")
            Me.columnUnidad = MyBase.Columns("Unidad")
            Me.columnDescripción = MyBase.Columns("Descripción")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDCRClave = New Global.System.Data.DataColumn("DCRClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDCRClave)
            Me.columnCARClave = New Global.System.Data.DataColumn("CARClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARClave)
            Me.columnPrecioBruto = New Global.System.Data.DataColumn("PrecioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioBruto)
            Me.columnImpuestoImp = New Global.System.Data.DataColumn("ImpuestoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoImp)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnSubTotalPartida = New Global.System.Data.DataColumn("SubTotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalPartida)
            Me.columnTotalPartida = New Global.System.Data.DataColumn("TotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPartida)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.columnDescripción = New Global.System.Data.DataColumn("Descripción", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripción)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDCRClave}, true))
            Me.columnDCRClave.AllowDBNull = false
            Me.columnDCRClave.Unique = true
            Me.columnDCRClave.MaxLength = 20
            Me.columnCARClave.MaxLength = 20
            Me.columnUnidad.MaxLength = 20
            Me.columnDescripción.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_cargoRow() As sp_detalle_cargoRow
            Return CType(Me.NewRow,sp_detalle_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_cargoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_cargoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_cargoRowChanged(Me, New sp_detalle_cargoRowChangeEvent(CType(e.Row,sp_detalle_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_cargoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_cargoRowChanging(Me, New sp_detalle_cargoRowChangeEvent(CType(e.Row,sp_detalle_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_cargoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_cargoRowDeleted(Me, New sp_detalle_cargoRowChangeEvent(CType(e.Row,sp_detalle_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_cargoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_cargoRowDeleting(Me, New sp_detalle_cargoRowChangeEvent(CType(e.Row,sp_detalle_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_cargoRow(ByVal row As sp_detalle_cargoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_cargoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_impuestos_cargoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_impuestos_cargoRow)
        
        Private columnCARClave As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columnTasa As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        Private columnTipoCambio As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_impuestos_cargo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TasaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTasa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoCambioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoCambio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_impuestos_cargoRow
            Get
                Return CType(Me.Rows(index),sp_impuestos_cargoRow)
            End Get
        End Property
        
        Public Event sp_impuestos_cargoRowChanging As sp_impuestos_cargoRowChangeEventHandler
        
        Public Event sp_impuestos_cargoRowChanged As sp_impuestos_cargoRowChangeEventHandler
        
        Public Event sp_impuestos_cargoRowDeleting As sp_impuestos_cargoRowChangeEventHandler
        
        Public Event sp_impuestos_cargoRowDeleted As sp_impuestos_cargoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_impuestos_cargoRow(ByVal row As sp_impuestos_cargoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_impuestos_cargoRow(ByVal CARClave As String, ByVal Impuesto As String, ByVal Tasa As Double, ByVal Importe As Double, ByVal TipoCambio As Double) As sp_impuestos_cargoRow
            Dim rowsp_impuestos_cargoRow As sp_impuestos_cargoRow = CType(Me.NewRow,sp_impuestos_cargoRow)
            Dim columnValuesArray() As Object = New Object() {CARClave, Impuesto, Tasa, Importe, TipoCambio}
            rowsp_impuestos_cargoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_impuestos_cargoRow)
            Return rowsp_impuestos_cargoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_impuestos_cargoDataTable = CType(MyBase.Clone,sp_impuestos_cargoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_impuestos_cargoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCARClave = MyBase.Columns("CARClave")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columnTasa = MyBase.Columns("Tasa")
            Me.columnImporte = MyBase.Columns("Importe")
            Me.columnTipoCambio = MyBase.Columns("TipoCambio")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCARClave = New Global.System.Data.DataColumn("CARClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARClave)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columnTasa = New Global.System.Data.DataColumn("Tasa", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTasa)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.columnTipoCambio = New Global.System.Data.DataColumn("TipoCambio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoCambio)
            Me.columnCARClave.MaxLength = 20
            Me.columnImpuesto.MaxLength = 50
            Me.columnImporte.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_impuestos_cargoRow() As sp_impuestos_cargoRow
            Return CType(Me.NewRow,sp_impuestos_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_impuestos_cargoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_impuestos_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_impuestos_cargoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_cargoRowChanged(Me, New sp_impuestos_cargoRowChangeEvent(CType(e.Row,sp_impuestos_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_impuestos_cargoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_cargoRowChanging(Me, New sp_impuestos_cargoRowChangeEvent(CType(e.Row,sp_impuestos_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_impuestos_cargoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_cargoRowDeleted(Me, New sp_impuestos_cargoRowChangeEvent(CType(e.Row,sp_impuestos_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_impuestos_cargoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_impuestos_cargoRowDeleting(Me, New sp_impuestos_cargoRowChangeEvent(CType(e.Row,sp_impuestos_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_impuestos_cargoRow(ByVal row As sp_impuestos_cargoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_impuestos_cargoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_sello_cargoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_sello_cargoRow)
        
        Private columnCARClave As Global.System.Data.DataColumn
        
        Private columncadenaOriginal As Global.System.Data.DataColumn
        
        Private columnSello As Global.System.Data.DataColumn
        
        Private columnCertificado64 As Global.System.Data.DataColumn
        
        Private columnCBB As Global.System.Data.DataColumn
        
        Private columnUUID As Global.System.Data.DataColumn
        
        Private columnCertificadoSAT As Global.System.Data.DataColumn
        
        Private columnfechaTimbrado As Global.System.Data.DataColumn
        
        Private columnSelloSAT As Global.System.Data.DataColumn
        
        Private columnversionSAT As Global.System.Data.DataColumn
        
        Private columnTipoPAC As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_sello_cargo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CARClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCARClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property cadenaOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncadenaOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSello
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Certificado64Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificado64
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CBBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCBB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CertificadoSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCertificadoSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaTimbradoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaTimbrado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelloSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property versionSATColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnversionSAT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoPACColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipoPAC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_sello_cargoRow
            Get
                Return CType(Me.Rows(index),sp_sello_cargoRow)
            End Get
        End Property
        
        Public Event sp_sello_cargoRowChanging As sp_sello_cargoRowChangeEventHandler
        
        Public Event sp_sello_cargoRowChanged As sp_sello_cargoRowChangeEventHandler
        
        Public Event sp_sello_cargoRowDeleting As sp_sello_cargoRowChangeEventHandler
        
        Public Event sp_sello_cargoRowDeleted As sp_sello_cargoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_sello_cargoRow(ByVal row As sp_sello_cargoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_sello_cargoRow(ByVal CARClave As String, ByVal cadenaOriginal As String, ByVal Sello As String, ByVal Certificado64 As String, ByVal CBB() As Byte, ByVal UUID As String, ByVal CertificadoSAT As String, ByVal fechaTimbrado As Date, ByVal SelloSAT As String, ByVal versionSAT As String, ByVal TipoPAC As Integer) As sp_sello_cargoRow
            Dim rowsp_sello_cargoRow As sp_sello_cargoRow = CType(Me.NewRow,sp_sello_cargoRow)
            Dim columnValuesArray() As Object = New Object() {CARClave, cadenaOriginal, Sello, Certificado64, CBB, UUID, CertificadoSAT, fechaTimbrado, SelloSAT, versionSAT, TipoPAC}
            rowsp_sello_cargoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_sello_cargoRow)
            Return rowsp_sello_cargoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCARClave(ByVal CARClave As String) As sp_sello_cargoRow
            Return CType(Me.Rows.Find(New Object() {CARClave}),sp_sello_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_sello_cargoDataTable = CType(MyBase.Clone,sp_sello_cargoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_sello_cargoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCARClave = MyBase.Columns("CARClave")
            Me.columncadenaOriginal = MyBase.Columns("cadenaOriginal")
            Me.columnSello = MyBase.Columns("Sello")
            Me.columnCertificado64 = MyBase.Columns("Certificado64")
            Me.columnCBB = MyBase.Columns("CBB")
            Me.columnUUID = MyBase.Columns("UUID")
            Me.columnCertificadoSAT = MyBase.Columns("CertificadoSAT")
            Me.columnfechaTimbrado = MyBase.Columns("fechaTimbrado")
            Me.columnSelloSAT = MyBase.Columns("SelloSAT")
            Me.columnversionSAT = MyBase.Columns("versionSAT")
            Me.columnTipoPAC = MyBase.Columns("TipoPAC")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCARClave = New Global.System.Data.DataColumn("CARClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCARClave)
            Me.columncadenaOriginal = New Global.System.Data.DataColumn("cadenaOriginal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncadenaOriginal)
            Me.columnSello = New Global.System.Data.DataColumn("Sello", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSello)
            Me.columnCertificado64 = New Global.System.Data.DataColumn("Certificado64", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificado64)
            Me.columnCBB = New Global.System.Data.DataColumn("CBB", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCBB)
            Me.columnUUID = New Global.System.Data.DataColumn("UUID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUUID)
            Me.columnCertificadoSAT = New Global.System.Data.DataColumn("CertificadoSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCertificadoSAT)
            Me.columnfechaTimbrado = New Global.System.Data.DataColumn("fechaTimbrado", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaTimbrado)
            Me.columnSelloSAT = New Global.System.Data.DataColumn("SelloSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelloSAT)
            Me.columnversionSAT = New Global.System.Data.DataColumn("versionSAT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnversionSAT)
            Me.columnTipoPAC = New Global.System.Data.DataColumn("TipoPAC", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipoPAC)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCARClave}, true))
            Me.columnCARClave.AllowDBNull = false
            Me.columnCARClave.Unique = true
            Me.columnCARClave.MaxLength = 20
            Me.columncadenaOriginal.MaxLength = 2147483647
            Me.columnSello.MaxLength = 2147483647
            Me.columnCertificado64.MaxLength = 2147483647
            Me.columnUUID.MaxLength = 50
            Me.columnCertificadoSAT.MaxLength = 50
            Me.columnSelloSAT.MaxLength = 2147483647
            Me.columnversionSAT.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_sello_cargoRow() As sp_sello_cargoRow
            Return CType(Me.NewRow,sp_sello_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_sello_cargoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_sello_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_sello_cargoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_sello_cargoRowChanged(Me, New sp_sello_cargoRowChangeEvent(CType(e.Row,sp_sello_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_sello_cargoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_sello_cargoRowChanging(Me, New sp_sello_cargoRowChangeEvent(CType(e.Row,sp_sello_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_sello_cargoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_sello_cargoRowDeleted(Me, New sp_sello_cargoRowChangeEvent(CType(e.Row,sp_sello_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_sello_cargoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_sello_cargoRowDeleting(Me, New sp_sello_cargoRowChangeEvent(CType(e.Row,sp_sello_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_sello_cargoRow(ByVal row As sp_sello_cargoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_sello_cargoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_metodopago_cargoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_metodopago_cargoRow)
        
        Private columnMetodoPago As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_metodopago_cargo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_metodopago_cargoRow
            Get
                Return CType(Me.Rows(index),sp_metodopago_cargoRow)
            End Get
        End Property
        
        Public Event sp_metodopago_cargoRowChanging As sp_metodopago_cargoRowChangeEventHandler
        
        Public Event sp_metodopago_cargoRowChanged As sp_metodopago_cargoRowChangeEventHandler
        
        Public Event sp_metodopago_cargoRowDeleting As sp_metodopago_cargoRowChangeEventHandler
        
        Public Event sp_metodopago_cargoRowDeleted As sp_metodopago_cargoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_metodopago_cargoRow(ByVal row As sp_metodopago_cargoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_metodopago_cargoRow(ByVal MetodoPago As String) As sp_metodopago_cargoRow
            Dim rowsp_metodopago_cargoRow As sp_metodopago_cargoRow = CType(Me.NewRow,sp_metodopago_cargoRow)
            Dim columnValuesArray() As Object = New Object() {MetodoPago}
            rowsp_metodopago_cargoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_metodopago_cargoRow)
            Return rowsp_metodopago_cargoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_metodopago_cargoDataTable = CType(MyBase.Clone,sp_metodopago_cargoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_metodopago_cargoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMetodoPago = MyBase.Columns("MetodoPago")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMetodoPago = New Global.System.Data.DataColumn("MetodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoPago)
            Me.columnMetodoPago.ReadOnly = true
            Me.columnMetodoPago.MaxLength = 153
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_metodopago_cargoRow() As sp_metodopago_cargoRow
            Return CType(Me.NewRow,sp_metodopago_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_metodopago_cargoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_metodopago_cargoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_metodopago_cargoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_cargoRowChanged(Me, New sp_metodopago_cargoRowChangeEvent(CType(e.Row,sp_metodopago_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_metodopago_cargoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_cargoRowChanging(Me, New sp_metodopago_cargoRowChangeEvent(CType(e.Row,sp_metodopago_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_metodopago_cargoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_cargoRowDeleted(Me, New sp_metodopago_cargoRowChangeEvent(CType(e.Row,sp_metodopago_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_metodopago_cargoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_metodopago_cargoRowDeleting(Me, New sp_metodopago_cargoRowChangeEvent(CType(e.Row,sp_metodopago_cargoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_metodopago_cargoRow(ByVal row As sp_metodopago_cargoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_metodopago_cargoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_devDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_devRow)
        
        Private columnDEVClave As Global.System.Data.DataColumn
        
        Private columnVENClave As Global.System.Data.DataColumn
        
        Private columnCTEClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnAtendio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnImpuestoTot As Global.System.Data.DataColumn
        
        Private columnDescuentoTot As Global.System.Data.DataColumn
        
        Private columnPuntosTot As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_dev"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AtendioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAtendio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_devRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_devRow)
            End Get
        End Property
        
        Public Event sp_encabezado_devRowChanging As sp_encabezado_devRowChangeEventHandler
        
        Public Event sp_encabezado_devRowChanged As sp_encabezado_devRowChangeEventHandler
        
        Public Event sp_encabezado_devRowDeleting As sp_encabezado_devRowChangeEventHandler
        
        Public Event sp_encabezado_devRowDeleted As sp_encabezado_devRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_devRow(ByVal row As sp_encabezado_devRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_devRow( _
                    ByVal DEVClave As String,  _
                    ByVal VENClave As String,  _
                    ByVal CTEClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Folio As String,  _
                    ByVal CAJClave As String,  _
                    ByVal Atendio As String,  _
                    ByVal Fecha As Date,  _
                    ByVal Motivo As String,  _
                    ByVal Costo As Double,  _
                    ByVal Subtotal As Double,  _
                    ByVal ImpuestoTot As Double,  _
                    ByVal DescuentoTot As Double,  _
                    ByVal PuntosTot As Double,  _
                    ByVal Total As Double,  _
                    ByVal Estado As Integer,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal Vendedor As String,  _
                    ByVal Calle As String,  _
                    ByVal Domicilio1 As String,  _
                    ByVal Domicilio2 As String) As sp_encabezado_devRow
            Dim rowsp_encabezado_devRow As sp_encabezado_devRow = CType(Me.NewRow,sp_encabezado_devRow)
            Dim columnValuesArray() As Object = New Object() {DEVClave, VENClave, CTEClave, Periodo, Folio, CAJClave, Atendio, Fecha, Motivo, Costo, Subtotal, ImpuestoTot, DescuentoTot, PuntosTot, Total, Estado, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, Vendedor, Calle, Domicilio1, Domicilio2}
            rowsp_encabezado_devRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_devRow)
            Return rowsp_encabezado_devRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDEVClave(ByVal DEVClave As String) As sp_encabezado_devRow
            Return CType(Me.Rows.Find(New Object() {DEVClave}),sp_encabezado_devRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_devDataTable = CType(MyBase.Clone,sp_encabezado_devDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_devDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDEVClave = MyBase.Columns("DEVClave")
            Me.columnVENClave = MyBase.Columns("VENClave")
            Me.columnCTEClave = MyBase.Columns("CTEClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnAtendio = MyBase.Columns("Atendio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnImpuestoTot = MyBase.Columns("ImpuestoTot")
            Me.columnDescuentoTot = MyBase.Columns("DescuentoTot")
            Me.columnPuntosTot = MyBase.Columns("PuntosTot")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDEVClave = New Global.System.Data.DataColumn("DEVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVClave)
            Me.columnVENClave = New Global.System.Data.DataColumn("VENClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENClave)
            Me.columnCTEClave = New Global.System.Data.DataColumn("CTEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTEClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnAtendio = New Global.System.Data.DataColumn("Atendio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAtendio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnImpuestoTot = New Global.System.Data.DataColumn("ImpuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTot)
            Me.columnDescuentoTot = New Global.System.Data.DataColumn("DescuentoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoTot)
            Me.columnPuntosTot = New Global.System.Data.DataColumn("PuntosTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosTot)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDEVClave}, true))
            Me.columnDEVClave.AllowDBNull = false
            Me.columnDEVClave.Unique = true
            Me.columnDEVClave.MaxLength = 20
            Me.columnVENClave.ReadOnly = true
            Me.columnVENClave.MaxLength = 50
            Me.columnCTEClave.MaxLength = 20
            Me.columnFolio.MaxLength = 20
            Me.columnCAJClave.MaxLength = 20
            Me.columnAtendio.MaxLength = 20
            Me.columnMotivo.ReadOnly = true
            Me.columnMotivo.MaxLength = 128
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnVendedor.MaxLength = 50
            Me.columnCalle.ReadOnly = true
            Me.columnCalle.MaxLength = 150
            Me.columnDomicilio1.ReadOnly = true
            Me.columnDomicilio1.MaxLength = 92
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_devRow() As sp_encabezado_devRow
            Return CType(Me.NewRow,sp_encabezado_devRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_devRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_devRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_devRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_devRowChanged(Me, New sp_encabezado_devRowChangeEvent(CType(e.Row,sp_encabezado_devRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_devRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_devRowChanging(Me, New sp_encabezado_devRowChangeEvent(CType(e.Row,sp_encabezado_devRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_devRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_devRowDeleted(Me, New sp_encabezado_devRowChangeEvent(CType(e.Row,sp_encabezado_devRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_devRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_devRowDeleting(Me, New sp_encabezado_devRowChangeEvent(CType(e.Row,sp_encabezado_devRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_devRow(ByVal row As sp_encabezado_devRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_devDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_devolucion_detDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_devolucion_detRow)
        
        Private columnDDEVClave As Global.System.Data.DataColumn
        
        Private columnDEVClave As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnPrecioBruto As Global.System.Data.DataColumn
        
        Private columnDescuentoImp As Global.System.Data.DataColumn
        
        Private columnImpuestoImp As Global.System.Data.DataColumn
        
        Private columnPuntosImp As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnSubtotalPartida As Global.System.Data.DataColumn
        
        Private columnTotalPartida As Global.System.Data.DataColumn
        
        Private columnPrecio As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNumParte As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_devolucion_det"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DDEVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDDEVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DEVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDEVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumParteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumParte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_devolucion_detRow
            Get
                Return CType(Me.Rows(index),sp_devolucion_detRow)
            End Get
        End Property
        
        Public Event sp_devolucion_detRowChanging As sp_devolucion_detRowChangeEventHandler
        
        Public Event sp_devolucion_detRowChanged As sp_devolucion_detRowChangeEventHandler
        
        Public Event sp_devolucion_detRowDeleting As sp_devolucion_detRowChangeEventHandler
        
        Public Event sp_devolucion_detRowDeleted As sp_devolucion_detRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_devolucion_detRow(ByVal row As sp_devolucion_detRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_devolucion_detRow( _
                    ByVal DDEVClave As String,  _
                    ByVal DEVClave As String,  _
                    ByVal PROClave As String,  _
                    ByVal TProducto As Integer,  _
                    ByVal Costo As Double,  _
                    ByVal PrecioBruto As Double,  _
                    ByVal DescuentoImp As Double,  _
                    ByVal ImpuestoImp As Double,  _
                    ByVal PuntosImp As Double,  _
                    ByVal Cantidad As Double,  _
                    ByVal SubtotalPartida As Double,  _
                    ByVal TotalPartida As Double,  _
                    ByVal Precio As Double,  _
                    ByVal Clave As String,  _
                    ByVal NumParte As String,  _
                    ByVal Nombre As String,  _
                    ByVal Descripcion As String) As sp_devolucion_detRow
            Dim rowsp_devolucion_detRow As sp_devolucion_detRow = CType(Me.NewRow,sp_devolucion_detRow)
            Dim columnValuesArray() As Object = New Object() {DDEVClave, DEVClave, PROClave, TProducto, Costo, PrecioBruto, DescuentoImp, ImpuestoImp, PuntosImp, Cantidad, SubtotalPartida, TotalPartida, Precio, Clave, NumParte, Nombre, Descripcion}
            rowsp_devolucion_detRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_devolucion_detRow)
            Return rowsp_devolucion_detRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDDEVClave(ByVal DDEVClave As String) As sp_devolucion_detRow
            Return CType(Me.Rows.Find(New Object() {DDEVClave}),sp_devolucion_detRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_devolucion_detDataTable = CType(MyBase.Clone,sp_devolucion_detDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_devolucion_detDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDDEVClave = MyBase.Columns("DDEVClave")
            Me.columnDEVClave = MyBase.Columns("DEVClave")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnPrecioBruto = MyBase.Columns("PrecioBruto")
            Me.columnDescuentoImp = MyBase.Columns("DescuentoImp")
            Me.columnImpuestoImp = MyBase.Columns("ImpuestoImp")
            Me.columnPuntosImp = MyBase.Columns("PuntosImp")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnSubtotalPartida = MyBase.Columns("SubtotalPartida")
            Me.columnTotalPartida = MyBase.Columns("TotalPartida")
            Me.columnPrecio = MyBase.Columns("Precio")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNumParte = MyBase.Columns("NumParte")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDDEVClave = New Global.System.Data.DataColumn("DDEVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDDEVClave)
            Me.columnDEVClave = New Global.System.Data.DataColumn("DEVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDEVClave)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnPrecioBruto = New Global.System.Data.DataColumn("PrecioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioBruto)
            Me.columnDescuentoImp = New Global.System.Data.DataColumn("DescuentoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoImp)
            Me.columnImpuestoImp = New Global.System.Data.DataColumn("ImpuestoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoImp)
            Me.columnPuntosImp = New Global.System.Data.DataColumn("PuntosImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosImp)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnSubtotalPartida = New Global.System.Data.DataColumn("SubtotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotalPartida)
            Me.columnTotalPartida = New Global.System.Data.DataColumn("TotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPartida)
            Me.columnPrecio = New Global.System.Data.DataColumn("Precio", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecio)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNumParte = New Global.System.Data.DataColumn("NumParte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumParte)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDDEVClave}, true))
            Me.columnDDEVClave.AllowDBNull = false
            Me.columnDDEVClave.Unique = true
            Me.columnDDEVClave.MaxLength = 20
            Me.columnDEVClave.MaxLength = 20
            Me.columnPROClave.MaxLength = 20
            Me.columnPrecio.ReadOnly = true
            Me.columnClave.MaxLength = 20
            Me.columnNumParte.MaxLength = 20
            Me.columnNombre.MaxLength = 60
            Me.columnDescripcion.MaxLength = 120
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_devolucion_detRow() As sp_devolucion_detRow
            Return CType(Me.NewRow,sp_devolucion_detRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_devolucion_detRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_devolucion_detRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_devolucion_detRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_devolucion_detRowChanged(Me, New sp_devolucion_detRowChangeEvent(CType(e.Row,sp_devolucion_detRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_devolucion_detRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_devolucion_detRowChanging(Me, New sp_devolucion_detRowChangeEvent(CType(e.Row,sp_devolucion_detRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_devolucion_detRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_devolucion_detRowDeleted(Me, New sp_devolucion_detRowChangeEvent(CType(e.Row,sp_devolucion_detRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_devolucion_detRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_devolucion_detRowDeleting(Me, New sp_devolucion_detRowChangeEvent(CType(e.Row,sp_devolucion_detRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_devolucion_detRow(ByVal row As sp_devolucion_detRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_devolucion_detDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_trasladoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_trasladoRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnUnidad As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_traslado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UnidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_trasladoRow
            Get
                Return CType(Me.Rows(index),sp_detalle_trasladoRow)
            End Get
        End Property
        
        Public Event sp_detalle_trasladoRowChanging As sp_detalle_trasladoRowChangeEventHandler
        
        Public Event sp_detalle_trasladoRowChanged As sp_detalle_trasladoRowChangeEventHandler
        
        Public Event sp_detalle_trasladoRowDeleting As sp_detalle_trasladoRowChangeEventHandler
        
        Public Event sp_detalle_trasladoRowDeleted As sp_detalle_trasladoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_trasladoRow(ByVal row As sp_detalle_trasladoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_trasladoRow(ByVal ID As String, ByVal PROClave As String, ByVal TProducto As Integer, ByVal Costo As Double, ByVal Total As Double, ByVal Cantidad As Double, ByVal Clave As String, ByVal Nombre As String, ByVal Unidad As String) As sp_detalle_trasladoRow
            Dim rowsp_detalle_trasladoRow As sp_detalle_trasladoRow = CType(Me.NewRow,sp_detalle_trasladoRow)
            Dim columnValuesArray() As Object = New Object() {ID, PROClave, TProducto, Costo, Total, Cantidad, Clave, Nombre, Unidad}
            rowsp_detalle_trasladoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_trasladoRow)
            Return rowsp_detalle_trasladoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIDPROClave(ByVal ID As String, ByVal PROClave As String) As sp_detalle_trasladoRow
            Return CType(Me.Rows.Find(New Object() {ID, PROClave}),sp_detalle_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_trasladoDataTable = CType(MyBase.Clone,sp_detalle_trasladoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_trasladoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnUnidad = MyBase.Columns("Unidad")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnUnidad = New Global.System.Data.DataColumn("Unidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnidad)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID, Me.columnPROClave}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.MaxLength = 20
            Me.columnPROClave.AllowDBNull = false
            Me.columnPROClave.MaxLength = 20
            Me.columnTotal.ReadOnly = true
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 60
            Me.columnUnidad.ReadOnly = true
            Me.columnUnidad.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_trasladoRow() As sp_detalle_trasladoRow
            Return CType(Me.NewRow,sp_detalle_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_trasladoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_trasladoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_trasladoRowChanged(Me, New sp_detalle_trasladoRowChangeEvent(CType(e.Row,sp_detalle_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_trasladoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_trasladoRowChanging(Me, New sp_detalle_trasladoRowChangeEvent(CType(e.Row,sp_detalle_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_trasladoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_trasladoRowDeleted(Me, New sp_detalle_trasladoRowChangeEvent(CType(e.Row,sp_detalle_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_trasladoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_trasladoRowDeleting(Me, New sp_detalle_trasladoRowChangeEvent(CType(e.Row,sp_detalle_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_trasladoRow(ByVal row As sp_detalle_trasladoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_trasladoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_surtidoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_surtidoRow)
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnPICClave As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_surtido"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPICClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_surtidoRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_surtidoRow)
            End Get
        End Property
        
        Public Event sp_encabezado_surtidoRowChanging As sp_encabezado_surtidoRowChangeEventHandler
        
        Public Event sp_encabezado_surtidoRowChanged As sp_encabezado_surtidoRowChangeEventHandler
        
        Public Event sp_encabezado_surtidoRowDeleting As sp_encabezado_surtidoRowChangeEventHandler
        
        Public Event sp_encabezado_surtidoRowDeleted As sp_encabezado_surtidoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_surtidoRow(ByVal row As sp_encabezado_surtidoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_surtidoRow(ByVal Tipo As String, ByVal Folio As String, ByVal Fecha As Date, ByVal PICClave As String, ByVal Estado As Integer, ByVal Clave As String, ByVal RazonSocial As String, ByVal id_Fiscal As String, ByVal Vendedor As String, ByVal Calle As String, ByVal Domicilio1 As String, ByVal Domicilio2 As String) As sp_encabezado_surtidoRow
            Dim rowsp_encabezado_surtidoRow As sp_encabezado_surtidoRow = CType(Me.NewRow,sp_encabezado_surtidoRow)
            Dim columnValuesArray() As Object = New Object() {Tipo, Folio, Fecha, PICClave, Estado, Clave, RazonSocial, id_Fiscal, Vendedor, Calle, Domicilio1, Domicilio2}
            rowsp_encabezado_surtidoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_surtidoRow)
            Return rowsp_encabezado_surtidoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_surtidoDataTable = CType(MyBase.Clone,sp_encabezado_surtidoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_surtidoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnPICClave = MyBase.Columns("PICClave")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnPICClave = New Global.System.Data.DataColumn("PICClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPICClave)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.columnTipo.ReadOnly = true
            Me.columnTipo.MaxLength = 5
            Me.columnFolio.MaxLength = 50
            Me.columnPICClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnVendedor.MaxLength = 50
            Me.columnCalle.ReadOnly = true
            Me.columnCalle.MaxLength = 150
            Me.columnDomicilio1.ReadOnly = true
            Me.columnDomicilio1.MaxLength = 92
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_surtidoRow() As sp_encabezado_surtidoRow
            Return CType(Me.NewRow,sp_encabezado_surtidoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_surtidoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_surtidoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_surtidoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_surtidoRowChanged(Me, New sp_encabezado_surtidoRowChangeEvent(CType(e.Row,sp_encabezado_surtidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_surtidoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_surtidoRowChanging(Me, New sp_encabezado_surtidoRowChangeEvent(CType(e.Row,sp_encabezado_surtidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_surtidoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_surtidoRowDeleted(Me, New sp_encabezado_surtidoRowChangeEvent(CType(e.Row,sp_encabezado_surtidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_surtidoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_surtidoRowDeleting(Me, New sp_encabezado_surtidoRowChangeEvent(CType(e.Row,sp_encabezado_surtidoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_surtidoRow(ByVal row As sp_encabezado_surtidoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_surtidoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_ordenDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_ordenRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnSurtido As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnPorcIVA As Global.System.Data.DataColumn
        
        Private columnIVA As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnImpuesto As Global.System.Data.DataColumn
        
        Private columnImporte As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_orden"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SurtidoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSurtido
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcIVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IVAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIVA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImporteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImporte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_ordenRow
            Get
                Return CType(Me.Rows(index),sp_detalle_ordenRow)
            End Get
        End Property
        
        Public Event sp_detalle_ordenRowChanging As sp_detalle_ordenRowChangeEventHandler
        
        Public Event sp_detalle_ordenRowChanged As sp_detalle_ordenRowChangeEventHandler
        
        Public Event sp_detalle_ordenRowDeleting As sp_detalle_ordenRowChangeEventHandler
        
        Public Event sp_detalle_ordenRowDeleted As sp_detalle_ordenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_ordenRow(ByVal row As sp_detalle_ordenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_ordenRow(ByVal ID As String, ByVal Cantidad As Double, ByVal Surtido As Double, ByVal Clave As String, ByVal Nombre As String, ByVal Costo As Double, ByVal PorcIVA As Double, ByVal IVA As Double, ByVal TProducto As Integer, ByVal Subtotal As Double, ByVal Impuesto As Double, ByVal Importe As Double) As sp_detalle_ordenRow
            Dim rowsp_detalle_ordenRow As sp_detalle_ordenRow = CType(Me.NewRow,sp_detalle_ordenRow)
            Dim columnValuesArray() As Object = New Object() {ID, Cantidad, Surtido, Clave, Nombre, Costo, PorcIVA, IVA, TProducto, Subtotal, Impuesto, Importe}
            rowsp_detalle_ordenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_ordenRow)
            Return rowsp_detalle_ordenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As String) As sp_detalle_ordenRow
            Return CType(Me.Rows.Find(New Object() {ID}),sp_detalle_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_ordenDataTable = CType(MyBase.Clone,sp_detalle_ordenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_ordenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnSurtido = MyBase.Columns("Surtido")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnPorcIVA = MyBase.Columns("PorcIVA")
            Me.columnIVA = MyBase.Columns("IVA")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnImpuesto = MyBase.Columns("Impuesto")
            Me.columnImporte = MyBase.Columns("Importe")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnSurtido = New Global.System.Data.DataColumn("Surtido", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSurtido)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnPorcIVA = New Global.System.Data.DataColumn("PorcIVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcIVA)
            Me.columnIVA = New Global.System.Data.DataColumn("IVA", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIVA)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnImpuesto = New Global.System.Data.DataColumn("Impuesto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuesto)
            Me.columnImporte = New Global.System.Data.DataColumn("Importe", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImporte)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnID.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnNombre.MaxLength = 60
            Me.columnSubtotal.ReadOnly = true
            Me.columnImpuesto.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_ordenRow() As sp_detalle_ordenRow
            Return CType(Me.NewRow,sp_detalle_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_ordenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_ordenRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_ordenRowChanged(Me, New sp_detalle_ordenRowChangeEvent(CType(e.Row,sp_detalle_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_ordenRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_ordenRowChanging(Me, New sp_detalle_ordenRowChangeEvent(CType(e.Row,sp_detalle_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_ordenRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_ordenRowDeleted(Me, New sp_detalle_ordenRowChangeEvent(CType(e.Row,sp_detalle_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_ordenRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_ordenRowDeleting(Me, New sp_detalle_ordenRowChangeEvent(CType(e.Row,sp_detalle_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_ordenRow(ByVal row As sp_detalle_ordenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_ordenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_recupera_ordenDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_recupera_ordenRow)
        
        Private columnORDClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnSolicita As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnImpuestoTot As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnRegistro As Global.System.Data.DataColumn
        
        Private columnPRVClave As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnBaja As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnSUCClave As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        Private columnNEstado As Global.System.Data.DataColumn
        
        Private columnCProveedor As Global.System.Data.DataColumn
        
        Private columnNProveedor As Global.System.Data.DataColumn
        
        Private columnDiasCredito As Global.System.Data.DataColumn
        
        Private columnDiasEntrega As Global.System.Data.DataColumn
        
        Private columnDisponible As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnTImpuesto As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_recupera_orden"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSolicita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NProveedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNProveedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DiasEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDiasEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisponibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisponible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TImpuestoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTImpuesto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_recupera_ordenRow
            Get
                Return CType(Me.Rows(index),sp_recupera_ordenRow)
            End Get
        End Property
        
        Public Event sp_recupera_ordenRowChanging As sp_recupera_ordenRowChangeEventHandler
        
        Public Event sp_recupera_ordenRowChanged As sp_recupera_ordenRowChangeEventHandler
        
        Public Event sp_recupera_ordenRowDeleting As sp_recupera_ordenRowChangeEventHandler
        
        Public Event sp_recupera_ordenRowDeleted As sp_recupera_ordenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_recupera_ordenRow(ByVal row As sp_recupera_ordenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_recupera_ordenRow( _
                    ByVal ORDClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal ALMClave As String,  _
                    ByVal Folio As String,  _
                    ByVal Solicita As String,  _
                    ByVal Subtotal As Double,  _
                    ByVal ImpuestoTot As Double,  _
                    ByVal Total As Double,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Registro As String,  _
                    ByVal PRVClave As String,  _
                    ByVal Estado As Integer,  _
                    ByVal Baja As Boolean,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal SUCClave As String,  _
                    ByVal Motivo As String,  _
                    ByVal Nota As String,  _
                    ByVal NEstado As String,  _
                    ByVal CProveedor As String,  _
                    ByVal NProveedor As String,  _
                    ByVal DiasCredito As Integer,  _
                    ByVal DiasEntrega As Integer,  _
                    ByVal Disponible As Double,  _
                    ByVal id_Fiscal As String,  _
                    ByVal TImpuesto As Integer) As sp_recupera_ordenRow
            Dim rowsp_recupera_ordenRow As sp_recupera_ordenRow = CType(Me.NewRow,sp_recupera_ordenRow)
            Dim columnValuesArray() As Object = New Object() {ORDClave, Periodo, Mes, ALMClave, Folio, Solicita, Subtotal, ImpuestoTot, Total, FechaRegistro, Registro, PRVClave, Estado, Baja, MFechaHora, MUsuarioId, SUCClave, Motivo, Nota, NEstado, CProveedor, NProveedor, DiasCredito, DiasEntrega, Disponible, id_Fiscal, TImpuesto}
            rowsp_recupera_ordenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_recupera_ordenRow)
            Return rowsp_recupera_ordenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDClave(ByVal ORDClave As String) As sp_recupera_ordenRow
            Return CType(Me.Rows.Find(New Object() {ORDClave}),sp_recupera_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_recupera_ordenDataTable = CType(MyBase.Clone,sp_recupera_ordenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_recupera_ordenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDClave = MyBase.Columns("ORDClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnSolicita = MyBase.Columns("Solicita")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnImpuestoTot = MyBase.Columns("ImpuestoTot")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnRegistro = MyBase.Columns("Registro")
            Me.columnPRVClave = MyBase.Columns("PRVClave")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnBaja = MyBase.Columns("Baja")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnSUCClave = MyBase.Columns("SUCClave")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnNota = MyBase.Columns("Nota")
            Me.columnNEstado = MyBase.Columns("NEstado")
            Me.columnCProveedor = MyBase.Columns("CProveedor")
            Me.columnNProveedor = MyBase.Columns("NProveedor")
            Me.columnDiasCredito = MyBase.Columns("DiasCredito")
            Me.columnDiasEntrega = MyBase.Columns("DiasEntrega")
            Me.columnDisponible = MyBase.Columns("Disponible")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnTImpuesto = MyBase.Columns("TImpuesto")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDClave = New Global.System.Data.DataColumn("ORDClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnSolicita = New Global.System.Data.DataColumn("Solicita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicita)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnImpuestoTot = New Global.System.Data.DataColumn("ImpuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTot)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnRegistro = New Global.System.Data.DataColumn("Registro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistro)
            Me.columnPRVClave = New Global.System.Data.DataColumn("PRVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRVClave)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnBaja = New Global.System.Data.DataColumn("Baja", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaja)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnSUCClave = New Global.System.Data.DataColumn("SUCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCClave)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.columnNEstado = New Global.System.Data.DataColumn("NEstado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEstado)
            Me.columnCProveedor = New Global.System.Data.DataColumn("CProveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCProveedor)
            Me.columnNProveedor = New Global.System.Data.DataColumn("NProveedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNProveedor)
            Me.columnDiasCredito = New Global.System.Data.DataColumn("DiasCredito", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasCredito)
            Me.columnDiasEntrega = New Global.System.Data.DataColumn("DiasEntrega", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDiasEntrega)
            Me.columnDisponible = New Global.System.Data.DataColumn("Disponible", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisponible)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnTImpuesto = New Global.System.Data.DataColumn("TImpuesto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTImpuesto)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDClave}, true))
            Me.columnORDClave.AllowDBNull = false
            Me.columnORDClave.Unique = true
            Me.columnORDClave.MaxLength = 20
            Me.columnALMClave.AllowDBNull = false
            Me.columnALMClave.MaxLength = 20
            Me.columnFolio.MaxLength = 50
            Me.columnSolicita.MaxLength = 100
            Me.columnRegistro.MaxLength = 20
            Me.columnPRVClave.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnSUCClave.MaxLength = 20
            Me.columnMotivo.MaxLength = 100
            Me.columnNota.MaxLength = 100
            Me.columnNEstado.MaxLength = 128
            Me.columnCProveedor.MaxLength = 20
            Me.columnNProveedor.MaxLength = 200
            Me.columnDisponible.ReadOnly = true
            Me.columnid_Fiscal.MaxLength = 32
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_recupera_ordenRow() As sp_recupera_ordenRow
            Return CType(Me.NewRow,sp_recupera_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_recupera_ordenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_recupera_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_recupera_ordenRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_ordenRowChanged(Me, New sp_recupera_ordenRowChangeEvent(CType(e.Row,sp_recupera_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_recupera_ordenRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_ordenRowChanging(Me, New sp_recupera_ordenRowChangeEvent(CType(e.Row,sp_recupera_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_recupera_ordenRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_recupera_ordenRowDeleted(Me, New sp_recupera_ordenRowChangeEvent(CType(e.Row,sp_recupera_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_recupera_ordenRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_recupera_ordenRowDeleting(Me, New sp_recupera_ordenRowChangeEvent(CType(e.Row,sp_recupera_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_recupera_ordenRow(ByVal row As sp_recupera_ordenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_recupera_ordenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_ordenDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_ordenRow)
        
        Private columnORDClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnSolicita As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnImpuestoTot As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnRegistro As Global.System.Data.DataColumn
        
        Private columnPRVClave As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnBaja As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnSUCClave As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        Private columnNEstado As Global.System.Data.DataColumn
        
        Private columnNAlmacen As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNombreCorto As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnNoCliente As Global.System.Data.DataColumn
        
        Private columnpCalle As Global.System.Data.DataColumn
        
        Private columnpDomicilio1 As Global.System.Data.DataColumn
        
        Private columnpDomicilio2 As Global.System.Data.DataColumn
        
        Private columnsCalle As Global.System.Data.DataColumn
        
        Private columnsDomicilio1 As Global.System.Data.DataColumn
        
        Private columnsDomicilio2 As Global.System.Data.DataColumn
        
        Private columnCompania As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_orden"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ORDClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnORDClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSolicita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PRVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPRVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NEstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NAlmacenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNAlmacen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreCortoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreCorto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NoClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNoCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnpCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnpDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property pDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnpDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sCalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property sDomicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnsDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompaniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompania
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_ordenRow
            Get
                Return CType(Me.Rows(index),sp_rep_ordenRow)
            End Get
        End Property
        
        Public Event sp_rep_ordenRowChanging As sp_rep_ordenRowChangeEventHandler
        
        Public Event sp_rep_ordenRowChanged As sp_rep_ordenRowChangeEventHandler
        
        Public Event sp_rep_ordenRowDeleting As sp_rep_ordenRowChangeEventHandler
        
        Public Event sp_rep_ordenRowDeleted As sp_rep_ordenRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_ordenRow(ByVal row As sp_rep_ordenRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_ordenRow( _
                    ByVal ORDClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal ALMClave As String,  _
                    ByVal Folio As String,  _
                    ByVal Solicita As String,  _
                    ByVal Subtotal As Double,  _
                    ByVal ImpuestoTot As Double,  _
                    ByVal Total As Double,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Registro As String,  _
                    ByVal PRVClave As String,  _
                    ByVal Estado As Integer,  _
                    ByVal Baja As Boolean,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal SUCClave As String,  _
                    ByVal Motivo As String,  _
                    ByVal Nota As String,  _
                    ByVal NEstado As String,  _
                    ByVal NAlmacen As String,  _
                    ByVal Clave As String,  _
                    ByVal NombreCorto As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal NoCliente As String,  _
                    ByVal pCalle As String,  _
                    ByVal pDomicilio1 As String,  _
                    ByVal pDomicilio2 As String,  _
                    ByVal sCalle As String,  _
                    ByVal sDomicilio1 As String,  _
                    ByVal sDomicilio2 As String,  _
                    ByVal Compania As String) As sp_rep_ordenRow
            Dim rowsp_rep_ordenRow As sp_rep_ordenRow = CType(Me.NewRow,sp_rep_ordenRow)
            Dim columnValuesArray() As Object = New Object() {ORDClave, Periodo, Mes, ALMClave, Folio, Solicita, Subtotal, ImpuestoTot, Total, FechaRegistro, Registro, PRVClave, Estado, Baja, MFechaHora, MUsuarioId, SUCClave, Motivo, Nota, NEstado, NAlmacen, Clave, NombreCorto, RazonSocial, NoCliente, pCalle, pDomicilio1, pDomicilio2, sCalle, sDomicilio1, sDomicilio2, Compania}
            rowsp_rep_ordenRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_ordenRow)
            Return rowsp_rep_ordenRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByORDClave(ByVal ORDClave As String) As sp_rep_ordenRow
            Return CType(Me.Rows.Find(New Object() {ORDClave}),sp_rep_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_ordenDataTable = CType(MyBase.Clone,sp_rep_ordenDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_ordenDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnORDClave = MyBase.Columns("ORDClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnSolicita = MyBase.Columns("Solicita")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnImpuestoTot = MyBase.Columns("ImpuestoTot")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnRegistro = MyBase.Columns("Registro")
            Me.columnPRVClave = MyBase.Columns("PRVClave")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnBaja = MyBase.Columns("Baja")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnSUCClave = MyBase.Columns("SUCClave")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnNota = MyBase.Columns("Nota")
            Me.columnNEstado = MyBase.Columns("NEstado")
            Me.columnNAlmacen = MyBase.Columns("NAlmacen")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNombreCorto = MyBase.Columns("NombreCorto")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnNoCliente = MyBase.Columns("NoCliente")
            Me.columnpCalle = MyBase.Columns("pCalle")
            Me.columnpDomicilio1 = MyBase.Columns("pDomicilio1")
            Me.columnpDomicilio2 = MyBase.Columns("pDomicilio2")
            Me.columnsCalle = MyBase.Columns("sCalle")
            Me.columnsDomicilio1 = MyBase.Columns("sDomicilio1")
            Me.columnsDomicilio2 = MyBase.Columns("sDomicilio2")
            Me.columnCompania = MyBase.Columns("Compania")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnORDClave = New Global.System.Data.DataColumn("ORDClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnORDClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnSolicita = New Global.System.Data.DataColumn("Solicita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicita)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnImpuestoTot = New Global.System.Data.DataColumn("ImpuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTot)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnRegistro = New Global.System.Data.DataColumn("Registro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistro)
            Me.columnPRVClave = New Global.System.Data.DataColumn("PRVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPRVClave)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnBaja = New Global.System.Data.DataColumn("Baja", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaja)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnSUCClave = New Global.System.Data.DataColumn("SUCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCClave)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.columnNEstado = New Global.System.Data.DataColumn("NEstado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNEstado)
            Me.columnNAlmacen = New Global.System.Data.DataColumn("NAlmacen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNAlmacen)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNombreCorto = New Global.System.Data.DataColumn("NombreCorto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreCorto)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnNoCliente = New Global.System.Data.DataColumn("NoCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNoCliente)
            Me.columnpCalle = New Global.System.Data.DataColumn("pCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpCalle)
            Me.columnpDomicilio1 = New Global.System.Data.DataColumn("pDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpDomicilio1)
            Me.columnpDomicilio2 = New Global.System.Data.DataColumn("pDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnpDomicilio2)
            Me.columnsCalle = New Global.System.Data.DataColumn("sCalle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsCalle)
            Me.columnsDomicilio1 = New Global.System.Data.DataColumn("sDomicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio1)
            Me.columnsDomicilio2 = New Global.System.Data.DataColumn("sDomicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsDomicilio2)
            Me.columnCompania = New Global.System.Data.DataColumn("Compania", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompania)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnORDClave}, true))
            Me.columnORDClave.AllowDBNull = false
            Me.columnORDClave.Unique = true
            Me.columnORDClave.MaxLength = 20
            Me.columnALMClave.AllowDBNull = false
            Me.columnALMClave.MaxLength = 20
            Me.columnFolio.MaxLength = 50
            Me.columnSolicita.MaxLength = 100
            Me.columnRegistro.MaxLength = 20
            Me.columnPRVClave.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnSUCClave.MaxLength = 20
            Me.columnMotivo.MaxLength = 100
            Me.columnNota.MaxLength = 100
            Me.columnNEstado.MaxLength = 128
            Me.columnNAlmacen.MaxLength = 50
            Me.columnClave.MaxLength = 20
            Me.columnNombreCorto.MaxLength = 64
            Me.columnRazonSocial.MaxLength = 200
            Me.columnNoCliente.MaxLength = 50
            Me.columnpCalle.ReadOnly = true
            Me.columnpCalle.MaxLength = 150
            Me.columnpDomicilio1.ReadOnly = true
            Me.columnpDomicilio1.MaxLength = 92
            Me.columnpDomicilio2.ReadOnly = true
            Me.columnpDomicilio2.MaxLength = 132
            Me.columnsCalle.ReadOnly = true
            Me.columnsCalle.MaxLength = 150
            Me.columnsDomicilio1.ReadOnly = true
            Me.columnsDomicilio1.MaxLength = 92
            Me.columnsDomicilio2.ReadOnly = true
            Me.columnsDomicilio2.MaxLength = 122
            Me.columnCompania.MaxLength = 60
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_ordenRow() As sp_rep_ordenRow
            Return CType(Me.NewRow,sp_rep_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_ordenRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_ordenRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_ordenRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ordenRowChanged(Me, New sp_rep_ordenRowChangeEvent(CType(e.Row,sp_rep_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_ordenRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ordenRowChanging(Me, New sp_rep_ordenRowChangeEvent(CType(e.Row,sp_rep_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_ordenRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_ordenRowDeleted(Me, New sp_rep_ordenRowChangeEvent(CType(e.Row,sp_rep_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_ordenRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_ordenRowDeleting(Me, New sp_rep_ordenRowChangeEvent(CType(e.Row,sp_rep_ordenRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_ordenRow(ByVal row As sp_rep_ordenRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_ordenDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_transferenciaDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_transferenciaRow)
        
        Private columnMVAClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnALMDestino As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnRegistro As Global.System.Data.DataColumn
        
        Private columnAutorizo As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnCNFClave As Global.System.Data.DataColumn
        
        Private columnSUCClave As Global.System.Data.DataColumn
        
        Private columnPICClave As Global.System.Data.DataColumn
        
        Private columnfechaEfectiva As Global.System.Data.DataColumn
        
        Private columnPrioridad As Global.System.Data.DataColumn
        
        Private columnSolicita As Global.System.Data.DataColumn
        
        Private columnCEstado As Global.System.Data.DataColumn
        
        Private columnCTipo As Global.System.Data.DataColumn
        
        Private columnCAlmacenO As Global.System.Data.DataColumn
        
        Private columnCAlmacenD As Global.System.Data.DataColumn
        
        Private columnCRegistro As Global.System.Data.DataColumn
        
        Private columnCAutorizo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_transferencia"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MVAClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMVAClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNFClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNFClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPICClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaEfectivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaEfectiva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrioridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrioridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSolicita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CTipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAlmacenOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAlmacenO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAlmacenDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAlmacenD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_transferenciaRow
            Get
                Return CType(Me.Rows(index),sp_rep_transferenciaRow)
            End Get
        End Property
        
        Public Event sp_rep_transferenciaRowChanging As sp_rep_transferenciaRowChangeEventHandler
        
        Public Event sp_rep_transferenciaRowChanged As sp_rep_transferenciaRowChangeEventHandler
        
        Public Event sp_rep_transferenciaRowDeleting As sp_rep_transferenciaRowChangeEventHandler
        
        Public Event sp_rep_transferenciaRowDeleted As sp_rep_transferenciaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_transferenciaRow(ByVal row As sp_rep_transferenciaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_transferenciaRow( _
                    ByVal MVAClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal Tipo As Integer,  _
                    ByVal Motivo As String,  _
                    ByVal ALMClave As String,  _
                    ByVal ALMDestino As String,  _
                    ByVal Folio As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Registro As String,  _
                    ByVal Autorizo As String,  _
                    ByVal Notas As String,  _
                    ByVal Estado As Integer,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Total As Double,  _
                    ByVal CNFClave As String,  _
                    ByVal SUCClave As String,  _
                    ByVal PICClave As String,  _
                    ByVal fechaEfectiva As Date,  _
                    ByVal Prioridad As Integer,  _
                    ByVal Solicita As String,  _
                    ByVal CEstado As String,  _
                    ByVal CTipo As String,  _
                    ByVal CAlmacenO As String,  _
                    ByVal CAlmacenD As String,  _
                    ByVal CRegistro As String,  _
                    ByVal CAutorizo As String) As sp_rep_transferenciaRow
            Dim rowsp_rep_transferenciaRow As sp_rep_transferenciaRow = CType(Me.NewRow,sp_rep_transferenciaRow)
            Dim columnValuesArray() As Object = New Object() {MVAClave, Periodo, Mes, Tipo, Motivo, ALMClave, ALMDestino, Folio, FechaRegistro, Registro, Autorizo, Notas, Estado, MFechaHora, MUsuarioId, Total, CNFClave, SUCClave, PICClave, fechaEfectiva, Prioridad, Solicita, CEstado, CTipo, CAlmacenO, CAlmacenD, CRegistro, CAutorizo}
            rowsp_rep_transferenciaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_transferenciaRow)
            Return rowsp_rep_transferenciaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMVAClave(ByVal MVAClave As String) As sp_rep_transferenciaRow
            Return CType(Me.Rows.Find(New Object() {MVAClave}),sp_rep_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_transferenciaDataTable = CType(MyBase.Clone,sp_rep_transferenciaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_transferenciaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMVAClave = MyBase.Columns("MVAClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnALMDestino = MyBase.Columns("ALMDestino")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnRegistro = MyBase.Columns("Registro")
            Me.columnAutorizo = MyBase.Columns("Autorizo")
            Me.columnNotas = MyBase.Columns("Notas")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnCNFClave = MyBase.Columns("CNFClave")
            Me.columnSUCClave = MyBase.Columns("SUCClave")
            Me.columnPICClave = MyBase.Columns("PICClave")
            Me.columnfechaEfectiva = MyBase.Columns("fechaEfectiva")
            Me.columnPrioridad = MyBase.Columns("Prioridad")
            Me.columnSolicita = MyBase.Columns("Solicita")
            Me.columnCEstado = MyBase.Columns("CEstado")
            Me.columnCTipo = MyBase.Columns("CTipo")
            Me.columnCAlmacenO = MyBase.Columns("CAlmacenO")
            Me.columnCAlmacenD = MyBase.Columns("CAlmacenD")
            Me.columnCRegistro = MyBase.Columns("CRegistro")
            Me.columnCAutorizo = MyBase.Columns("CAutorizo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMVAClave = New Global.System.Data.DataColumn("MVAClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMVAClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnALMDestino = New Global.System.Data.DataColumn("ALMDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMDestino)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnRegistro = New Global.System.Data.DataColumn("Registro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistro)
            Me.columnAutorizo = New Global.System.Data.DataColumn("Autorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizo)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnCNFClave = New Global.System.Data.DataColumn("CNFClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNFClave)
            Me.columnSUCClave = New Global.System.Data.DataColumn("SUCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCClave)
            Me.columnPICClave = New Global.System.Data.DataColumn("PICClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPICClave)
            Me.columnfechaEfectiva = New Global.System.Data.DataColumn("fechaEfectiva", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaEfectiva)
            Me.columnPrioridad = New Global.System.Data.DataColumn("Prioridad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrioridad)
            Me.columnSolicita = New Global.System.Data.DataColumn("Solicita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicita)
            Me.columnCEstado = New Global.System.Data.DataColumn("CEstado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEstado)
            Me.columnCTipo = New Global.System.Data.DataColumn("CTipo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCTipo)
            Me.columnCAlmacenO = New Global.System.Data.DataColumn("CAlmacenO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAlmacenO)
            Me.columnCAlmacenD = New Global.System.Data.DataColumn("CAlmacenD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAlmacenD)
            Me.columnCRegistro = New Global.System.Data.DataColumn("CRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRegistro)
            Me.columnCAutorizo = New Global.System.Data.DataColumn("CAutorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAutorizo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMVAClave}, true))
            Me.columnMVAClave.AllowDBNull = false
            Me.columnMVAClave.Unique = true
            Me.columnMVAClave.MaxLength = 20
            Me.columnMotivo.MaxLength = 100
            Me.columnALMClave.AllowDBNull = false
            Me.columnALMClave.MaxLength = 20
            Me.columnALMDestino.MaxLength = 20
            Me.columnFolio.MaxLength = 50
            Me.columnRegistro.MaxLength = 20
            Me.columnAutorizo.MaxLength = 20
            Me.columnNotas.MaxLength = 200
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnCNFClave.MaxLength = 20
            Me.columnSUCClave.MaxLength = 20
            Me.columnPICClave.MaxLength = 20
            Me.columnSolicita.MaxLength = 100
            Me.columnCEstado.ReadOnly = true
            Me.columnCEstado.MaxLength = 128
            Me.columnCTipo.ReadOnly = true
            Me.columnCTipo.MaxLength = 128
            Me.columnCAlmacenO.ReadOnly = true
            Me.columnCAlmacenO.MaxLength = 50
            Me.columnCAlmacenD.ReadOnly = true
            Me.columnCAlmacenD.MaxLength = 50
            Me.columnCRegistro.ReadOnly = true
            Me.columnCRegistro.MaxLength = 50
            Me.columnCAutorizo.ReadOnly = true
            Me.columnCAutorizo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_transferenciaRow() As sp_rep_transferenciaRow
            Return CType(Me.NewRow,sp_rep_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_transferenciaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_transferenciaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_transferenciaRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_transferenciaRowChanged(Me, New sp_rep_transferenciaRowChangeEvent(CType(e.Row,sp_rep_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_transferenciaRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_transferenciaRowChanging(Me, New sp_rep_transferenciaRowChangeEvent(CType(e.Row,sp_rep_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_transferenciaRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_transferenciaRowDeleted(Me, New sp_rep_transferenciaRowChangeEvent(CType(e.Row,sp_rep_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_transferenciaRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_transferenciaRowDeleting(Me, New sp_rep_transferenciaRowChangeEvent(CType(e.Row,sp_rep_transferenciaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_transferenciaRow(ByVal row As sp_rep_transferenciaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_transferenciaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_rep_trasladoDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_rep_trasladoRow)
        
        Private columnTRSClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnFechaRegistro As Global.System.Data.DataColumn
        
        Private columnMotivo As Global.System.Data.DataColumn
        
        Private columnNotas As Global.System.Data.DataColumn
        
        Private columnSUCClave As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnSUCDestino As Global.System.Data.DataColumn
        
        Private columnALMDestino As Global.System.Data.DataColumn
        
        Private columnRegistro As Global.System.Data.DataColumn
        
        Private columnAutorizo As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnCNFClave As Global.System.Data.DataColumn
        
        Private columnfechaPrevista As Global.System.Data.DataColumn
        
        Private columnPICClave As Global.System.Data.DataColumn
        
        Private columnfechaEfectiva As Global.System.Data.DataColumn
        
        Private columntipoEntrega As Global.System.Data.DataColumn
        
        Private columnformaEnvio As Global.System.Data.DataColumn
        
        Private columnPrioridad As Global.System.Data.DataColumn
        
        Private columnSolicita As Global.System.Data.DataColumn
        
        Private columnCEstado As Global.System.Data.DataColumn
        
        Private columnCSucursalO As Global.System.Data.DataColumn
        
        Private columnCSucursalD As Global.System.Data.DataColumn
        
        Private columnCAlmacenO As Global.System.Data.DataColumn
        
        Private columnCAlmacenD As Global.System.Data.DataColumn
        
        Private columnCRegistro As Global.System.Data.DataColumn
        
        Private columnCAutorizo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_rep_traslado"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TRSClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTRSClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFechaRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MotivoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMotivo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotasColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNotas
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SUCDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSUCDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMDestinoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMDestino
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CNFClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCNFClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaPrevistaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaPrevista
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPICClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property fechaEfectivaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfechaEfectiva
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property tipoEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntipoEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property formaEnvioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnformaEnvio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrioridadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrioridad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSolicita
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CEstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSucursalOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSucursalO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSucursalDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSucursalD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAlmacenOColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAlmacenO
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAlmacenDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAlmacenD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CRegistroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCRegistro
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAutorizoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAutorizo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_rep_trasladoRow
            Get
                Return CType(Me.Rows(index),sp_rep_trasladoRow)
            End Get
        End Property
        
        Public Event sp_rep_trasladoRowChanging As sp_rep_trasladoRowChangeEventHandler
        
        Public Event sp_rep_trasladoRowChanged As sp_rep_trasladoRowChangeEventHandler
        
        Public Event sp_rep_trasladoRowDeleting As sp_rep_trasladoRowChangeEventHandler
        
        Public Event sp_rep_trasladoRowDeleted As sp_rep_trasladoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_rep_trasladoRow(ByVal row As sp_rep_trasladoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_rep_trasladoRow( _
                    ByVal TRSClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal Folio As String,  _
                    ByVal FechaRegistro As Date,  _
                    ByVal Motivo As String,  _
                    ByVal Notas As String,  _
                    ByVal SUCClave As String,  _
                    ByVal ALMClave As String,  _
                    ByVal SUCDestino As String,  _
                    ByVal ALMDestino As String,  _
                    ByVal Registro As String,  _
                    ByVal Autorizo As String,  _
                    ByVal Estado As Integer,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal Total As Double,  _
                    ByVal CNFClave As String,  _
                    ByVal fechaPrevista As Date,  _
                    ByVal PICClave As String,  _
                    ByVal fechaEfectiva As Date,  _
                    ByVal tipoEntrega As Integer,  _
                    ByVal formaEnvio As Integer,  _
                    ByVal Prioridad As Integer,  _
                    ByVal Solicita As String,  _
                    ByVal CEstado As String,  _
                    ByVal CSucursalO As String,  _
                    ByVal CSucursalD As String,  _
                    ByVal CAlmacenO As String,  _
                    ByVal CAlmacenD As String,  _
                    ByVal CRegistro As String,  _
                    ByVal CAutorizo As String) As sp_rep_trasladoRow
            Dim rowsp_rep_trasladoRow As sp_rep_trasladoRow = CType(Me.NewRow,sp_rep_trasladoRow)
            Dim columnValuesArray() As Object = New Object() {TRSClave, Periodo, Mes, Folio, FechaRegistro, Motivo, Notas, SUCClave, ALMClave, SUCDestino, ALMDestino, Registro, Autorizo, Estado, MFechaHora, MUsuarioId, Total, CNFClave, fechaPrevista, PICClave, fechaEfectiva, tipoEntrega, formaEnvio, Prioridad, Solicita, CEstado, CSucursalO, CSucursalD, CAlmacenO, CAlmacenD, CRegistro, CAutorizo}
            rowsp_rep_trasladoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_rep_trasladoRow)
            Return rowsp_rep_trasladoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTRSClave(ByVal TRSClave As String) As sp_rep_trasladoRow
            Return CType(Me.Rows.Find(New Object() {TRSClave}),sp_rep_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_rep_trasladoDataTable = CType(MyBase.Clone,sp_rep_trasladoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_rep_trasladoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTRSClave = MyBase.Columns("TRSClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnFechaRegistro = MyBase.Columns("FechaRegistro")
            Me.columnMotivo = MyBase.Columns("Motivo")
            Me.columnNotas = MyBase.Columns("Notas")
            Me.columnSUCClave = MyBase.Columns("SUCClave")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnSUCDestino = MyBase.Columns("SUCDestino")
            Me.columnALMDestino = MyBase.Columns("ALMDestino")
            Me.columnRegistro = MyBase.Columns("Registro")
            Me.columnAutorizo = MyBase.Columns("Autorizo")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnCNFClave = MyBase.Columns("CNFClave")
            Me.columnfechaPrevista = MyBase.Columns("fechaPrevista")
            Me.columnPICClave = MyBase.Columns("PICClave")
            Me.columnfechaEfectiva = MyBase.Columns("fechaEfectiva")
            Me.columntipoEntrega = MyBase.Columns("tipoEntrega")
            Me.columnformaEnvio = MyBase.Columns("formaEnvio")
            Me.columnPrioridad = MyBase.Columns("Prioridad")
            Me.columnSolicita = MyBase.Columns("Solicita")
            Me.columnCEstado = MyBase.Columns("CEstado")
            Me.columnCSucursalO = MyBase.Columns("CSucursalO")
            Me.columnCSucursalD = MyBase.Columns("CSucursalD")
            Me.columnCAlmacenO = MyBase.Columns("CAlmacenO")
            Me.columnCAlmacenD = MyBase.Columns("CAlmacenD")
            Me.columnCRegistro = MyBase.Columns("CRegistro")
            Me.columnCAutorizo = MyBase.Columns("CAutorizo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTRSClave = New Global.System.Data.DataColumn("TRSClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTRSClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnFechaRegistro = New Global.System.Data.DataColumn("FechaRegistro", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFechaRegistro)
            Me.columnMotivo = New Global.System.Data.DataColumn("Motivo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMotivo)
            Me.columnNotas = New Global.System.Data.DataColumn("Notas", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNotas)
            Me.columnSUCClave = New Global.System.Data.DataColumn("SUCClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCClave)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnSUCDestino = New Global.System.Data.DataColumn("SUCDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSUCDestino)
            Me.columnALMDestino = New Global.System.Data.DataColumn("ALMDestino", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMDestino)
            Me.columnRegistro = New Global.System.Data.DataColumn("Registro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistro)
            Me.columnAutorizo = New Global.System.Data.DataColumn("Autorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAutorizo)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnCNFClave = New Global.System.Data.DataColumn("CNFClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCNFClave)
            Me.columnfechaPrevista = New Global.System.Data.DataColumn("fechaPrevista", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaPrevista)
            Me.columnPICClave = New Global.System.Data.DataColumn("PICClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPICClave)
            Me.columnfechaEfectiva = New Global.System.Data.DataColumn("fechaEfectiva", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfechaEfectiva)
            Me.columntipoEntrega = New Global.System.Data.DataColumn("tipoEntrega", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntipoEntrega)
            Me.columnformaEnvio = New Global.System.Data.DataColumn("formaEnvio", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnformaEnvio)
            Me.columnPrioridad = New Global.System.Data.DataColumn("Prioridad", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrioridad)
            Me.columnSolicita = New Global.System.Data.DataColumn("Solicita", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicita)
            Me.columnCEstado = New Global.System.Data.DataColumn("CEstado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCEstado)
            Me.columnCSucursalO = New Global.System.Data.DataColumn("CSucursalO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSucursalO)
            Me.columnCSucursalD = New Global.System.Data.DataColumn("CSucursalD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSucursalD)
            Me.columnCAlmacenO = New Global.System.Data.DataColumn("CAlmacenO", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAlmacenO)
            Me.columnCAlmacenD = New Global.System.Data.DataColumn("CAlmacenD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAlmacenD)
            Me.columnCRegistro = New Global.System.Data.DataColumn("CRegistro", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCRegistro)
            Me.columnCAutorizo = New Global.System.Data.DataColumn("CAutorizo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAutorizo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTRSClave}, true))
            Me.columnTRSClave.AllowDBNull = false
            Me.columnTRSClave.Unique = true
            Me.columnTRSClave.MaxLength = 20
            Me.columnFolio.MaxLength = 50
            Me.columnMotivo.MaxLength = 100
            Me.columnNotas.MaxLength = 200
            Me.columnSUCClave.AllowDBNull = false
            Me.columnSUCClave.MaxLength = 20
            Me.columnALMClave.AllowDBNull = false
            Me.columnALMClave.MaxLength = 20
            Me.columnSUCDestino.MaxLength = 20
            Me.columnALMDestino.AllowDBNull = false
            Me.columnALMDestino.MaxLength = 20
            Me.columnRegistro.MaxLength = 20
            Me.columnAutorizo.MaxLength = 20
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnCNFClave.MaxLength = 20
            Me.columnPICClave.MaxLength = 20
            Me.columnSolicita.MaxLength = 100
            Me.columnCEstado.ReadOnly = true
            Me.columnCEstado.MaxLength = 128
            Me.columnCSucursalO.ReadOnly = true
            Me.columnCSucursalO.MaxLength = 50
            Me.columnCSucursalD.ReadOnly = true
            Me.columnCSucursalD.MaxLength = 50
            Me.columnCAlmacenO.ReadOnly = true
            Me.columnCAlmacenO.MaxLength = 50
            Me.columnCAlmacenD.ReadOnly = true
            Me.columnCAlmacenD.MaxLength = 50
            Me.columnCRegistro.ReadOnly = true
            Me.columnCRegistro.MaxLength = 50
            Me.columnCAutorizo.ReadOnly = true
            Me.columnCAutorizo.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_rep_trasladoRow() As sp_rep_trasladoRow
            Return CType(Me.NewRow,sp_rep_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_rep_trasladoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_rep_trasladoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_rep_trasladoRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_rep_trasladoRowChanged(Me, New sp_rep_trasladoRowChangeEvent(CType(e.Row,sp_rep_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_rep_trasladoRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_rep_trasladoRowChanging(Me, New sp_rep_trasladoRowChangeEvent(CType(e.Row,sp_rep_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_rep_trasladoRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_rep_trasladoRowDeleted(Me, New sp_rep_trasladoRowChangeEvent(CType(e.Row,sp_rep_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_rep_trasladoRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_rep_trasladoRowDeleting(Me, New sp_rep_trasladoRowChangeEvent(CType(e.Row,sp_rep_trasladoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_rep_trasladoRow(ByVal row As sp_rep_trasladoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_rep_trasladoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_encabezado_pedDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_encabezado_pedRow)
        
        Private columnVENClave As Global.System.Data.DataColumn
        
        Private columnPeriodo As Global.System.Data.DataColumn
        
        Private columnMes As Global.System.Data.DataColumn
        
        Private columnPDVClave As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnTipo As Global.System.Data.DataColumn
        
        Private columnCliente As Global.System.Data.DataColumn
        
        Private columnCajero As Global.System.Data.DataColumn
        
        Private columnCAJClave As Global.System.Data.DataColumn
        
        Private columnCostoTot As Global.System.Data.DataColumn
        
        Private columnSubtotal As Global.System.Data.DataColumn
        
        Private columnImpuestoTot As Global.System.Data.DataColumn
        
        Private columnDescuentoTot As Global.System.Data.DataColumn
        
        Private columnRedondeoImp As Global.System.Data.DataColumn
        
        Private columnPuntosTot As Global.System.Data.DataColumn
        
        Private columnTotal As Global.System.Data.DataColumn
        
        Private columnSaldo As Global.System.Data.DataColumn
        
        Private columnFecha As Global.System.Data.DataColumn
        
        Private columnFacturaId As Global.System.Data.DataColumn
        
        Private columnEstado As Global.System.Data.DataColumn
        
        Private columnBaja As Global.System.Data.DataColumn
        
        Private columnAcreditada As Global.System.Data.DataColumn
        
        Private columnNota As Global.System.Data.DataColumn
        
        Private columnMFechaHora As Global.System.Data.DataColumn
        
        Private columnMUsuarioId As Global.System.Data.DataColumn
        
        Private columnPICClave As Global.System.Data.DataColumn
        
        Private columnALMClave As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnid_Fiscal As Global.System.Data.DataColumn
        
        Private columnLimiteCredito As Global.System.Data.DataColumn
        
        Private columnSaldoCte As Global.System.Data.DataColumn
        
        Private columnVendedor As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnDomicilio1 As Global.System.Data.DataColumn
        
        Private columnDomicilio2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_encabezado_ped"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDVClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDVClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TipoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CajeroColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCajero
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CAJClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCAJClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCostoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubtotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubtotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RedondeoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRedondeoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosTotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosTot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FechaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFecha
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FacturaIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFacturaId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EstadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEstado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BajaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBaja
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AcreditadaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAcreditada
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NotaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNota
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MUsuarioIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMUsuarioId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PICClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPICClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ALMClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnALMClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property id_FiscalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnid_Fiscal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LimiteCreditoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLimiteCredito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SaldoCteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSaldoCte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VendedorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendedor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Domicilio2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomicilio2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_encabezado_pedRow
            Get
                Return CType(Me.Rows(index),sp_encabezado_pedRow)
            End Get
        End Property
        
        Public Event sp_encabezado_pedRowChanging As sp_encabezado_pedRowChangeEventHandler
        
        Public Event sp_encabezado_pedRowChanged As sp_encabezado_pedRowChangeEventHandler
        
        Public Event sp_encabezado_pedRowDeleting As sp_encabezado_pedRowChangeEventHandler
        
        Public Event sp_encabezado_pedRowDeleted As sp_encabezado_pedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_encabezado_pedRow(ByVal row As sp_encabezado_pedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_encabezado_pedRow( _
                    ByVal VENClave As String,  _
                    ByVal Periodo As Integer,  _
                    ByVal Mes As Integer,  _
                    ByVal PDVClave As String,  _
                    ByVal Folio As String,  _
                    ByVal Tipo As Integer,  _
                    ByVal Cliente As String,  _
                    ByVal Cajero As String,  _
                    ByVal CAJClave As String,  _
                    ByVal CostoTot As Double,  _
                    ByVal Subtotal As Double,  _
                    ByVal ImpuestoTot As Double,  _
                    ByVal DescuentoTot As Double,  _
                    ByVal RedondeoImp As Double,  _
                    ByVal PuntosTot As Double,  _
                    ByVal Total As Double,  _
                    ByVal Saldo As Double,  _
                    ByVal Fecha As Date,  _
                    ByVal FacturaId As String,  _
                    ByVal Estado As Integer,  _
                    ByVal Baja As Boolean,  _
                    ByVal Acreditada As Boolean,  _
                    ByVal Nota As String,  _
                    ByVal MFechaHora As Date,  _
                    ByVal MUsuarioId As String,  _
                    ByVal PICClave As String,  _
                    ByVal ALMClave As String,  _
                    ByVal Clave As String,  _
                    ByVal RazonSocial As String,  _
                    ByVal id_Fiscal As String,  _
                    ByVal LimiteCredito As Double,  _
                    ByVal SaldoCte As Double,  _
                    ByVal Vendedor As String,  _
                    ByVal Calle As String,  _
                    ByVal Domicilio1 As String,  _
                    ByVal Domicilio2 As String) As sp_encabezado_pedRow
            Dim rowsp_encabezado_pedRow As sp_encabezado_pedRow = CType(Me.NewRow,sp_encabezado_pedRow)
            Dim columnValuesArray() As Object = New Object() {VENClave, Periodo, Mes, PDVClave, Folio, Tipo, Cliente, Cajero, CAJClave, CostoTot, Subtotal, ImpuestoTot, DescuentoTot, RedondeoImp, PuntosTot, Total, Saldo, Fecha, FacturaId, Estado, Baja, Acreditada, Nota, MFechaHora, MUsuarioId, PICClave, ALMClave, Clave, RazonSocial, id_Fiscal, LimiteCredito, SaldoCte, Vendedor, Calle, Domicilio1, Domicilio2}
            rowsp_encabezado_pedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_encabezado_pedRow)
            Return rowsp_encabezado_pedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByVENClave(ByVal VENClave As String) As sp_encabezado_pedRow
            Return CType(Me.Rows.Find(New Object() {VENClave}),sp_encabezado_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_encabezado_pedDataTable = CType(MyBase.Clone,sp_encabezado_pedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_encabezado_pedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnVENClave = MyBase.Columns("VENClave")
            Me.columnPeriodo = MyBase.Columns("Periodo")
            Me.columnMes = MyBase.Columns("Mes")
            Me.columnPDVClave = MyBase.Columns("PDVClave")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnTipo = MyBase.Columns("Tipo")
            Me.columnCliente = MyBase.Columns("Cliente")
            Me.columnCajero = MyBase.Columns("Cajero")
            Me.columnCAJClave = MyBase.Columns("CAJClave")
            Me.columnCostoTot = MyBase.Columns("CostoTot")
            Me.columnSubtotal = MyBase.Columns("Subtotal")
            Me.columnImpuestoTot = MyBase.Columns("ImpuestoTot")
            Me.columnDescuentoTot = MyBase.Columns("DescuentoTot")
            Me.columnRedondeoImp = MyBase.Columns("RedondeoImp")
            Me.columnPuntosTot = MyBase.Columns("PuntosTot")
            Me.columnTotal = MyBase.Columns("Total")
            Me.columnSaldo = MyBase.Columns("Saldo")
            Me.columnFecha = MyBase.Columns("Fecha")
            Me.columnFacturaId = MyBase.Columns("FacturaId")
            Me.columnEstado = MyBase.Columns("Estado")
            Me.columnBaja = MyBase.Columns("Baja")
            Me.columnAcreditada = MyBase.Columns("Acreditada")
            Me.columnNota = MyBase.Columns("Nota")
            Me.columnMFechaHora = MyBase.Columns("MFechaHora")
            Me.columnMUsuarioId = MyBase.Columns("MUsuarioId")
            Me.columnPICClave = MyBase.Columns("PICClave")
            Me.columnALMClave = MyBase.Columns("ALMClave")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnid_Fiscal = MyBase.Columns("id_Fiscal")
            Me.columnLimiteCredito = MyBase.Columns("LimiteCredito")
            Me.columnSaldoCte = MyBase.Columns("SaldoCte")
            Me.columnVendedor = MyBase.Columns("Vendedor")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnDomicilio1 = MyBase.Columns("Domicilio1")
            Me.columnDomicilio2 = MyBase.Columns("Domicilio2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnVENClave = New Global.System.Data.DataColumn("VENClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENClave)
            Me.columnPeriodo = New Global.System.Data.DataColumn("Periodo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodo)
            Me.columnMes = New Global.System.Data.DataColumn("Mes", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMes)
            Me.columnPDVClave = New Global.System.Data.DataColumn("PDVClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDVClave)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnTipo = New Global.System.Data.DataColumn("Tipo", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo)
            Me.columnCliente = New Global.System.Data.DataColumn("Cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCliente)
            Me.columnCajero = New Global.System.Data.DataColumn("Cajero", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCajero)
            Me.columnCAJClave = New Global.System.Data.DataColumn("CAJClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCAJClave)
            Me.columnCostoTot = New Global.System.Data.DataColumn("CostoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCostoTot)
            Me.columnSubtotal = New Global.System.Data.DataColumn("Subtotal", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubtotal)
            Me.columnImpuestoTot = New Global.System.Data.DataColumn("ImpuestoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoTot)
            Me.columnDescuentoTot = New Global.System.Data.DataColumn("DescuentoTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoTot)
            Me.columnRedondeoImp = New Global.System.Data.DataColumn("RedondeoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRedondeoImp)
            Me.columnPuntosTot = New Global.System.Data.DataColumn("PuntosTot", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosTot)
            Me.columnTotal = New Global.System.Data.DataColumn("Total", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotal)
            Me.columnSaldo = New Global.System.Data.DataColumn("Saldo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldo)
            Me.columnFecha = New Global.System.Data.DataColumn("Fecha", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFecha)
            Me.columnFacturaId = New Global.System.Data.DataColumn("FacturaId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFacturaId)
            Me.columnEstado = New Global.System.Data.DataColumn("Estado", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstado)
            Me.columnBaja = New Global.System.Data.DataColumn("Baja", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBaja)
            Me.columnAcreditada = New Global.System.Data.DataColumn("Acreditada", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAcreditada)
            Me.columnNota = New Global.System.Data.DataColumn("Nota", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNota)
            Me.columnMFechaHora = New Global.System.Data.DataColumn("MFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMFechaHora)
            Me.columnMUsuarioId = New Global.System.Data.DataColumn("MUsuarioId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMUsuarioId)
            Me.columnPICClave = New Global.System.Data.DataColumn("PICClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPICClave)
            Me.columnALMClave = New Global.System.Data.DataColumn("ALMClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnALMClave)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnid_Fiscal = New Global.System.Data.DataColumn("id_Fiscal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnid_Fiscal)
            Me.columnLimiteCredito = New Global.System.Data.DataColumn("LimiteCredito", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLimiteCredito)
            Me.columnSaldoCte = New Global.System.Data.DataColumn("SaldoCte", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSaldoCte)
            Me.columnVendedor = New Global.System.Data.DataColumn("Vendedor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendedor)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnDomicilio1 = New Global.System.Data.DataColumn("Domicilio1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio1)
            Me.columnDomicilio2 = New Global.System.Data.DataColumn("Domicilio2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomicilio2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnVENClave}, true))
            Me.columnVENClave.AllowDBNull = false
            Me.columnVENClave.Unique = true
            Me.columnVENClave.MaxLength = 20
            Me.columnPDVClave.AllowDBNull = false
            Me.columnPDVClave.MaxLength = 20
            Me.columnFolio.MaxLength = 50
            Me.columnCliente.MaxLength = 20
            Me.columnCajero.MaxLength = 20
            Me.columnCAJClave.MaxLength = 20
            Me.columnFacturaId.MaxLength = 20
            Me.columnNota.MaxLength = 50
            Me.columnMUsuarioId.MaxLength = 20
            Me.columnPICClave.MaxLength = 20
            Me.columnALMClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnRazonSocial.MaxLength = 200
            Me.columnid_Fiscal.MaxLength = 32
            Me.columnVendedor.MaxLength = 50
            Me.columnCalle.ReadOnly = true
            Me.columnCalle.MaxLength = 150
            Me.columnDomicilio1.ReadOnly = true
            Me.columnDomicilio1.MaxLength = 92
            Me.columnDomicilio2.ReadOnly = true
            Me.columnDomicilio2.MaxLength = 82
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_encabezado_pedRow() As sp_encabezado_pedRow
            Return CType(Me.NewRow,sp_encabezado_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_encabezado_pedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_encabezado_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_encabezado_pedRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_pedRowChanged(Me, New sp_encabezado_pedRowChangeEvent(CType(e.Row,sp_encabezado_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_encabezado_pedRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_pedRowChanging(Me, New sp_encabezado_pedRowChangeEvent(CType(e.Row,sp_encabezado_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_encabezado_pedRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_pedRowDeleted(Me, New sp_encabezado_pedRowChangeEvent(CType(e.Row,sp_encabezado_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_encabezado_pedRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_encabezado_pedRowDeleting(Me, New sp_encabezado_pedRowChangeEvent(CType(e.Row,sp_encabezado_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_encabezado_pedRow(ByVal row As sp_encabezado_pedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_encabezado_pedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class sp_detalle_pedDataTable
        Inherits Global.System.Data.TypedTableBase(Of sp_detalle_pedRow)
        
        Private columnDVEClave As Global.System.Data.DataColumn
        
        Private columnVENClave As Global.System.Data.DataColumn
        
        Private columnPROClave As Global.System.Data.DataColumn
        
        Private columnTProducto As Global.System.Data.DataColumn
        
        Private columnCosto As Global.System.Data.DataColumn
        
        Private columnPrecioBruto As Global.System.Data.DataColumn
        
        Private columnPuntosImp As Global.System.Data.DataColumn
        
        Private columnDescuentoImp As Global.System.Data.DataColumn
        
        Private columnPorcImp As Global.System.Data.DataColumn
        
        Private columnImpuestoImp As Global.System.Data.DataColumn
        
        Private columnCantidad As Global.System.Data.DataColumn
        
        Private columnCantDev As Global.System.Data.DataColumn
        
        Private columnSubTotalPartida As Global.System.Data.DataColumn
        
        Private columnTotalPartida As Global.System.Data.DataColumn
        
        Private columnModificador As Global.System.Data.DataColumn
        
        Private columnSolicitado As Global.System.Data.DataColumn
        
        Private columnUndKilo As Global.System.Data.DataColumn
        
        Private columnPREClave As Global.System.Data.DataColumn
        
        Private columnApartado As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnNumParte As Global.System.Data.DataColumn
        
        Private columnNombre As Global.System.Data.DataColumn
        
        Private columnDescripcion As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "sp_detalle_ped"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DVEClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDVEClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VENClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVENClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPROClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TProductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTProducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CostoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCosto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecioBrutoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecioBruto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PuntosImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPuntosImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescuentoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescuentoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PorcImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPorcImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpuestoImpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpuestoImp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CantDevColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCantDev
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalPartidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalPartida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModificadorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModificador
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SolicitadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSolicitado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UndKiloColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUndKilo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PREClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPREClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApartadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApartado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumParteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumParte
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescripcionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescripcion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As sp_detalle_pedRow
            Get
                Return CType(Me.Rows(index),sp_detalle_pedRow)
            End Get
        End Property
        
        Public Event sp_detalle_pedRowChanging As sp_detalle_pedRowChangeEventHandler
        
        Public Event sp_detalle_pedRowChanged As sp_detalle_pedRowChangeEventHandler
        
        Public Event sp_detalle_pedRowDeleting As sp_detalle_pedRowChangeEventHandler
        
        Public Event sp_detalle_pedRowDeleted As sp_detalle_pedRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub Addsp_detalle_pedRow(ByVal row As sp_detalle_pedRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function Addsp_detalle_pedRow( _
                    ByVal DVEClave As String,  _
                    ByVal VENClave As String,  _
                    ByVal PROClave As String,  _
                    ByVal TProducto As Integer,  _
                    ByVal Costo As Double,  _
                    ByVal PrecioBruto As Double,  _
                    ByVal PuntosImp As Double,  _
                    ByVal DescuentoImp As Double,  _
                    ByVal PorcImp As Double,  _
                    ByVal ImpuestoImp As Double,  _
                    ByVal Cantidad As Double,  _
                    ByVal CantDev As Double,  _
                    ByVal SubTotalPartida As Double,  _
                    ByVal TotalPartida As Double,  _
                    ByVal Modificador As String,  _
                    ByVal Solicitado As Double,  _
                    ByVal UndKilo As Double,  _
                    ByVal PREClave As String,  _
                    ByVal Apartado As Double,  _
                    ByVal Clave As String,  _
                    ByVal NumParte As String,  _
                    ByVal Nombre As String,  _
                    ByVal Descripcion As String) As sp_detalle_pedRow
            Dim rowsp_detalle_pedRow As sp_detalle_pedRow = CType(Me.NewRow,sp_detalle_pedRow)
            Dim columnValuesArray() As Object = New Object() {DVEClave, VENClave, PROClave, TProducto, Costo, PrecioBruto, PuntosImp, DescuentoImp, PorcImp, ImpuestoImp, Cantidad, CantDev, SubTotalPartida, TotalPartida, Modificador, Solicitado, UndKilo, PREClave, Apartado, Clave, NumParte, Nombre, Descripcion}
            rowsp_detalle_pedRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowsp_detalle_pedRow)
            Return rowsp_detalle_pedRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDVEClave(ByVal DVEClave As String) As sp_detalle_pedRow
            Return CType(Me.Rows.Find(New Object() {DVEClave}),sp_detalle_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As sp_detalle_pedDataTable = CType(MyBase.Clone,sp_detalle_pedDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New sp_detalle_pedDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDVEClave = MyBase.Columns("DVEClave")
            Me.columnVENClave = MyBase.Columns("VENClave")
            Me.columnPROClave = MyBase.Columns("PROClave")
            Me.columnTProducto = MyBase.Columns("TProducto")
            Me.columnCosto = MyBase.Columns("Costo")
            Me.columnPrecioBruto = MyBase.Columns("PrecioBruto")
            Me.columnPuntosImp = MyBase.Columns("PuntosImp")
            Me.columnDescuentoImp = MyBase.Columns("DescuentoImp")
            Me.columnPorcImp = MyBase.Columns("PorcImp")
            Me.columnImpuestoImp = MyBase.Columns("ImpuestoImp")
            Me.columnCantidad = MyBase.Columns("Cantidad")
            Me.columnCantDev = MyBase.Columns("CantDev")
            Me.columnSubTotalPartida = MyBase.Columns("SubTotalPartida")
            Me.columnTotalPartida = MyBase.Columns("TotalPartida")
            Me.columnModificador = MyBase.Columns("Modificador")
            Me.columnSolicitado = MyBase.Columns("Solicitado")
            Me.columnUndKilo = MyBase.Columns("UndKilo")
            Me.columnPREClave = MyBase.Columns("PREClave")
            Me.columnApartado = MyBase.Columns("Apartado")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnNumParte = MyBase.Columns("NumParte")
            Me.columnNombre = MyBase.Columns("Nombre")
            Me.columnDescripcion = MyBase.Columns("Descripcion")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDVEClave = New Global.System.Data.DataColumn("DVEClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDVEClave)
            Me.columnVENClave = New Global.System.Data.DataColumn("VENClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVENClave)
            Me.columnPROClave = New Global.System.Data.DataColumn("PROClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROClave)
            Me.columnTProducto = New Global.System.Data.DataColumn("TProducto", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTProducto)
            Me.columnCosto = New Global.System.Data.DataColumn("Costo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCosto)
            Me.columnPrecioBruto = New Global.System.Data.DataColumn("PrecioBruto", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecioBruto)
            Me.columnPuntosImp = New Global.System.Data.DataColumn("PuntosImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPuntosImp)
            Me.columnDescuentoImp = New Global.System.Data.DataColumn("DescuentoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescuentoImp)
            Me.columnPorcImp = New Global.System.Data.DataColumn("PorcImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPorcImp)
            Me.columnImpuestoImp = New Global.System.Data.DataColumn("ImpuestoImp", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpuestoImp)
            Me.columnCantidad = New Global.System.Data.DataColumn("Cantidad", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantidad)
            Me.columnCantDev = New Global.System.Data.DataColumn("CantDev", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCantDev)
            Me.columnSubTotalPartida = New Global.System.Data.DataColumn("SubTotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTotalPartida)
            Me.columnTotalPartida = New Global.System.Data.DataColumn("TotalPartida", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalPartida)
            Me.columnModificador = New Global.System.Data.DataColumn("Modificador", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModificador)
            Me.columnSolicitado = New Global.System.Data.DataColumn("Solicitado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSolicitado)
            Me.columnUndKilo = New Global.System.Data.DataColumn("UndKilo", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUndKilo)
            Me.columnPREClave = New Global.System.Data.DataColumn("PREClave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPREClave)
            Me.columnApartado = New Global.System.Data.DataColumn("Apartado", GetType(Double), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApartado)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnNumParte = New Global.System.Data.DataColumn("NumParte", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumParte)
            Me.columnNombre = New Global.System.Data.DataColumn("Nombre", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre)
            Me.columnDescripcion = New Global.System.Data.DataColumn("Descripcion", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescripcion)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDVEClave}, true))
            Me.columnDVEClave.AllowDBNull = false
            Me.columnDVEClave.Unique = true
            Me.columnDVEClave.MaxLength = 20
            Me.columnVENClave.MaxLength = 20
            Me.columnPROClave.MaxLength = 20
            Me.columnModificador.MaxLength = 10
            Me.columnPREClave.MaxLength = 20
            Me.columnClave.MaxLength = 20
            Me.columnNumParte.MaxLength = 20
            Me.columnNombre.ReadOnly = true
            Me.columnNombre.MaxLength = 94
            Me.columnDescripcion.MaxLength = 180
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Newsp_detalle_pedRow() As sp_detalle_pedRow
            Return CType(Me.NewRow,sp_detalle_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New sp_detalle_pedRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(sp_detalle_pedRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.sp_detalle_pedRowChangedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_pedRowChanged(Me, New sp_detalle_pedRowChangeEvent(CType(e.Row,sp_detalle_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.sp_detalle_pedRowChangingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_pedRowChanging(Me, New sp_detalle_pedRowChangeEvent(CType(e.Row,sp_detalle_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.sp_detalle_pedRowDeletedEvent) Is Nothing) Then
                RaiseEvent sp_detalle_pedRowDeleted(Me, New sp_detalle_pedRowChangeEvent(CType(e.Row,sp_detalle_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.sp_detalle_pedRowDeletingEvent) Is Nothing) Then
                RaiseEvent sp_detalle_pedRowDeleting(Me, New sp_detalle_pedRowChangeEvent(CType(e.Row,sp_detalle_pedRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Removesp_detalle_pedRow(ByVal row As sp_detalle_pedRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As pvtaDataSet = New pvtaDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "sp_detalle_pedDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_recRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_rec As sp_detalle_recDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_rec = CType(Me.Table,sp_detalle_recDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property abnclave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_rec.abnclaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'abnclave' de la tabla 'sp_detalle_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_rec.abnclaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_rec.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_detalle_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_rec.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TIPO() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_rec.TIPOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TIPO' de la tabla 'sp_detalle_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_rec.TIPOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_rec.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_detalle_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_rec.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_rec.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_detalle_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_rec.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsabnclaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_rec.abnclaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetabnclaveNull()
            Me(Me.tablesp_detalle_rec.abnclaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_rec.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_detalle_rec.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTIPONull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_rec.TIPOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTIPONull()
            Me(Me.tablesp_detalle_rec.TIPOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_rec.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_detalle_rec.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_rec.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_detalle_rec.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_edocta_detalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_edocta_detalle As sp_edocta_detalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_edocta_detalle = CType(Me.Table,sp_edocta_detalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_detalle.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_edocta_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_detalle.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_detalle.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_edocta_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_detalle.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripción() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_detalle.DescripciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripción' de la tabla 'sp_edocta_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_detalle.DescripciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cargo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_detalle.CargoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cargo' de la tabla 'sp_edocta_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_detalle.CargoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abono() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_detalle.AbonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abono' de la tabla 'sp_edocta_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_detalle.AbonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_detalle.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_edocta_detalle.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_detalle.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_edocta_detalle.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripciónNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_detalle.DescripciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripciónNull()
            Me(Me.tablesp_edocta_detalle.DescripciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_detalle.CargoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoNull()
            Me(Me.tablesp_edocta_detalle.CargoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbonoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_detalle.AbonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbonoNull()
            Me(Me.tablesp_edocta_detalle.AbonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_edocta_encRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_edocta_enc As sp_edocta_encDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_edocta_enc = CType(Me.Table,sp_edocta_encDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCredito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.DiasCreditoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasCredito' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.DiasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puntos() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.PuntosColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puntos' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.PuntosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.Tel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel1' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.Tel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.Tel2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel2' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.Tel2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edocta_enc.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Email' de la tabla 'sp_edocta_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edocta_enc.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_edocta_enc.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_edocta_enc.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_edocta_enc.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_edocta_enc.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_edocta_enc.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_edocta_enc.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_edocta_enc.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_edocta_enc.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.DiasCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCreditoNull()
            Me(Me.tablesp_edocta_enc.DiasCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.PuntosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosNull()
            Me(Me.tablesp_edocta_enc.PuntosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel1Null() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.Tel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel1Null()
            Me(Me.tablesp_edocta_enc.Tel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel2Null() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.Tel2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel2Null()
            Me(Me.tablesp_edocta_enc.Tel2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablesp_edocta_enc.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablesp_edocta_enc.EmailColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_edoprv_detalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_edoprv_detalle As sp_edoprv_detalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_edoprv_detalle = CType(Me.Table,sp_edoprv_detalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_detalle.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_edoprv_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_detalle.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_detalle.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_edoprv_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_detalle.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripción() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_detalle.DescripciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripción' de la tabla 'sp_edoprv_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_detalle.DescripciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cargo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_detalle.CargoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cargo' de la tabla 'sp_edoprv_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_detalle.CargoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Abono() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_detalle.AbonoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Abono' de la tabla 'sp_edoprv_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_detalle.AbonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_detalle.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_edoprv_detalle.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_detalle.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_edoprv_detalle.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripciónNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_detalle.DescripciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripciónNull()
            Me(Me.tablesp_edoprv_detalle.DescripciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_detalle.CargoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargoNull()
            Me(Me.tablesp_edoprv_detalle.CargoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAbonoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_detalle.AbonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAbonoNull()
            Me(Me.tablesp_edoprv_detalle.AbonoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_edoprv_encRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_edoprv_enc As sp_edoprv_encDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_edoprv_enc = CType(Me.Table,sp_edoprv_encDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRVClave() As String
            Get
                Return CType(Me(Me.tablesp_edoprv_enc.PRVClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.PRVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoPrv() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.SaldoPrvColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoPrv' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.SaldoPrvColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCredito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.DiasCreditoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasCredito' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.DiasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.Tel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel1' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.Tel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tel2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.Tel2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tel2' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.Tel2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Email' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contacto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_edoprv_enc.ContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Contacto' de la tabla 'sp_edoprv_enc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_edoprv_enc.ContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_edoprv_enc.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_edoprv_enc.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_edoprv_enc.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_edoprv_enc.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoPrvNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.SaldoPrvColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoPrvNull()
            Me(Me.tablesp_edoprv_enc.SaldoPrvColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_edoprv_enc.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_edoprv_enc.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_edoprv_enc.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.DiasCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCreditoNull()
            Me(Me.tablesp_edoprv_enc.DiasCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel1Null() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.Tel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel1Null()
            Me(Me.tablesp_edoprv_enc.Tel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTel2Null() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.Tel2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTel2Null()
            Me(Me.tablesp_edoprv_enc.Tel2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tablesp_edoprv_enc.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactoNull() As Boolean
            Return Me.IsNull(Me.tablesp_edoprv_enc.ContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactoNull()
            Me(Me.tablesp_edoprv_enc.ContactoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_muestra_loteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_muestra_lote As sp_muestra_loteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_muestra_lote = CType(Me.Table,sp_muestra_loteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CveCte() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.CveCteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CveCte' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.CveCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CvePro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.CveProColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CvePro' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.CveProColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lote() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.LoteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Lote' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.LoteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entrada() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.EntradaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Entrada' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.EntradaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Salida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_muestra_lote.SalidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Salida' de la tabla 'sp_muestra_lote' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_muestra_lote.SalidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_muestra_lote.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCveCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.CveCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCveCteNull()
            Me(Me.tablesp_muestra_lote.CveCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_muestra_lote.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCveProNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.CveProColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCveProNull()
            Me(Me.tablesp_muestra_lote.CveProColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_muestra_lote.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_muestra_lote.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLoteNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.LoteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLoteNull()
            Me(Me.tablesp_muestra_lote.LoteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_muestra_lote.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntradaNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.EntradaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntradaNull()
            Me(Me.tablesp_muestra_lote.EntradaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_muestra_lote.SalidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalidaNull()
            Me(Me.tablesp_muestra_lote.SalidaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_listaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_lista As sp_rep_listaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_lista = CType(Me.Table,sp_rep_listaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NLista() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_lista.NListaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NLista' de la tabla 'sp_rep_lista' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_lista.NListaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNListaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_lista.NListaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNListaNull()
            Me(Me.tablesp_rep_lista.NListaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_rangoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_rango As sp_rep_rangoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_rango = CType(Me.Table,sp_rep_rangoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inicial() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_rango.InicialColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Inicial' de la tabla 'sp_rep_rango' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_rango.InicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Final() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_rango.FinalColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Final' de la tabla 'sp_rep_rango' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_rango.FinalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInicialNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_rango.InicialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInicialNull()
            Me(Me.tablesp_rep_rango.InicialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_rango.FinalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalNull()
            Me(Me.tablesp_rep_rango.FinalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_preciosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_precios As sp_rep_preciosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_precios = CType(Me.Table,sp_rep_preciosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLAClave() As Integer
            Get
                Return CType(Me(Me.tablesp_rep_precios.CLAClaveColumn),Integer)
            End Get
            Set
                Me(Me.tablesp_rep_precios.CLAClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLNombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.CLNombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLNombre' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.CLNombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_precios.PROClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_precios.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumParte() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.NumParteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumParte' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.NumParteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TOrigen() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.TOrigenColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TOrigen' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.TOrigenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_precios.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Precio' de la tabla 'sp_rep_precios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_precios.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.CLNombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLNombreNull()
            Me(Me.tablesp_rep_precios.CLNombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_rep_precios.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_rep_precios.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumParteNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.NumParteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumParteNull()
            Me(Me.tablesp_rep_precios.NumParteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_rep_precios.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_rep_precios.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTOrigenNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.TOrigenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTOrigenNull()
            Me(Me.tablesp_rep_precios.TOrigenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_precios.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_rep_precios.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_ingresoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_ingreso As sp_rep_ingresoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_ingreso = CType(Me.Table,sp_rep_ingresoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INGClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_ingreso.INGClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.INGClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.ALMClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALMClave' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Referencia' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.FechaRegistroColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRegistro' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.RegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Registro' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.RegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.AutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Autorizo' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.AutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Notas' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEstado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.CEstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEstado' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.CEstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAlmacen() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.CAlmacenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAlmacen' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.CAlmacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRegistro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.CRegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CRegistro' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.CRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAutorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_ingreso.CAutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAutorizo' de la tabla 'sp_rep_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_ingreso.CAutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_rep_ingreso.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_rep_ingreso.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALMClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.ALMClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALMClaveNull()
            Me(Me.tablesp_rep_ingreso.ALMClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tablesp_rep_ingreso.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.FechaRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRegistroNull()
            Me(Me.tablesp_rep_ingreso.FechaRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.RegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroNull()
            Me(Me.tablesp_rep_ingreso.RegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.AutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutorizoNull()
            Me(Me.tablesp_rep_ingreso.AutorizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tablesp_rep_ingreso.NotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_rep_ingreso.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_rep_ingreso.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_rep_ingreso.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.CEstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEstadoNull()
            Me(Me.tablesp_rep_ingreso.CEstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAlmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.CAlmacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAlmacenNull()
            Me(Me.tablesp_rep_ingreso.CAlmacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.CRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRegistroNull()
            Me(Me.tablesp_rep_ingreso.CRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_ingreso.CAutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAutorizoNull()
            Me(Me.tablesp_rep_ingreso.CAutorizoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_detalle_ingresoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_detalle_ingreso As sp_rep_detalle_ingresoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_detalle_ingreso = CType(Me.Table,sp_rep_detalle_ingresoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ingreso.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ingreso.PROClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_rep_detalle_ingreso' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GTIN() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.GTINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GTIN' de la tabla 'sp_rep_detalle_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.GTINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UNDClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ingreso.UNDClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.UNDClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_rep_detalle_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_rep_detalle_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_rep_detalle_ingreso' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_rep_detalle_ingreso' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ingreso.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_rep_detalle_ingreso' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ingreso.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_rep_detalle_ingreso.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGTINNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.GTINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGTINNull()
            Me(Me.tablesp_rep_detalle_ingreso.GTINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_rep_detalle_ingreso.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_rep_detalle_ingreso.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_rep_detalle_ingreso.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_rep_detalle_ingreso.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ingreso.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_rep_detalle_ingreso.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_logo_companiaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_logo_compania As sp_logo_companiaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_logo_compania = CType(Me.Table,sp_logo_companiaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property logo() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_logo_compania.logoColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'logo' de la tabla 'sp_logo_compania' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_logo_compania.logoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IslogoNull() As Boolean
            Return Me.IsNull(Me.tablesp_logo_compania.logoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetlogoNull()
            Me(Me.tablesp_logo_compania.logoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_publicidadRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_publicidad As sp_recupera_publicidadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_publicidad = CType(Me.Table,sp_recupera_publicidadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Publicidad() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_publicidad.PublicidadColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Publicidad' de la tabla 'sp_recupera_publicidad' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_publicidad.PublicidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPublicidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_publicidad.PublicidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPublicidadNull()
            Me(Me.tablesp_recupera_publicidad.PublicidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_recRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_rec As sp_encabezado_recDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_rec = CType(Me.Table,sp_encabezado_recDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ABNClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_rec.ABNClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.ABNClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTEClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.CTEClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTEClave' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.CTEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPago() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.TipoPagoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoPago' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.TipoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.SaldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BNKClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.BNKClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BNKClave' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.BNKClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Referencia' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Baja() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.BajaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Baja' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.BajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_rec' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormaPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.FormaPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FormaPago' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.FormaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_rec.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_encabezado_rec' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_rec.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_rec.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTEClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.CTEClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTEClaveNull()
            Me(Me.tablesp_encabezado_rec.CTEClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_rec.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_encabezado_rec.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.TipoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoPagoNull()
            Me(Me.tablesp_encabezado_rec.TipoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tablesp_encabezado_rec.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_encabezado_rec.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tablesp_encabezado_rec.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBNKClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.BNKClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBNKClaveNull()
            Me(Me.tablesp_encabezado_rec.BNKClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tablesp_encabezado_rec.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_encabezado_rec.NotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.BajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBajaNull()
            Me(Me.tablesp_encabezado_rec.BajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_encabezado_rec.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_encabezado_rec.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_rec.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_rec.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_rec.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_rec.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_rec.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormaPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.FormaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormaPagoNull()
            Me(Me.tablesp_encabezado_rec.FormaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_encabezado_rec.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_encabezado_rec.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_rec.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_encabezado_rec.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_transferenciaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_transferencia As sp_detalle_transferenciaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_transferencia = CType(Me.Table,sp_detalle_transferenciaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_detalle_transferencia.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Return CType(Me(Me.tablesp_detalle_transferencia.PROClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_detalle_transferencia' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_detalle_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_detalle_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_transferencia' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_detalle_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_detalle_transferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_transferencia.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'sp_detalle_transferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_transferencia.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_detalle_transferencia.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_detalle_transferencia.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_detalle_transferencia.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_transferencia.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_detalle_transferencia.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_detalle_transferencia.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_transferencia.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablesp_detalle_transferencia.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_referencia_facturaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_referencia_factura As sp_referencia_facturaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_referencia_factura = CType(Me.Table,sp_referencia_facturaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCClave() As String
            Get
                Return CType(Me(Me.tablesp_referencia_factura.NCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_referencia_factura.NCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_referencia_factura.SerieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie' de la tabla 'sp_referencia_factura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_referencia_factura.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_referencia_factura.FolioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_referencia_factura' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_referencia_factura.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerieNull() As Boolean
            Return Me.IsNull(Me.tablesp_referencia_factura.SerieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerieNull()
            Me(Me.tablesp_referencia_factura.SerieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_referencia_factura.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_referencia_factura.FolioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_detalle_ubcingRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_detalle_ubcing As sp_rep_detalle_ubcingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_detalle_ubcing = CType(Me.Table,sp_rep_detalle_ubcingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ubcing.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UBCClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ubcing.UBCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.UBCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Posicion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ubcing.PosicionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Posicion' de la tabla 'sp_rep_detalle_ubcing' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.PosicionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Columna() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ubcing.ColumnaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Columna' de la tabla 'sp_rep_detalle_ubcing' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.ColumnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nivel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_detalle_ubcing.NivelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nivel' de la tabla 'sp_rep_detalle_ubcing' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.NivelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESTClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_detalle_ubcing.ESTClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_detalle_ubcing.ESTClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosicionNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ubcing.PosicionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosicionNull()
            Me(Me.tablesp_rep_detalle_ubcing.PosicionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ubcing.ColumnaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnaNull()
            Me(Me.tablesp_rep_detalle_ubcing.ColumnaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNivelNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_detalle_ubcing.NivelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNivelNull()
            Me(Me.tablesp_rep_detalle_ubcing.NivelColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_busca_prod_ubcRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_busca_prod_ubc As sp_busca_prod_ubcDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_busca_prod_ubc = CType(Me.Table,sp_busca_prod_ubcDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_busca_prod_ubc.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property C_BARRAS() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.C_BARRASColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'C_BARRAS' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.C_BARRASColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.ExistenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Existencia' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.ExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Apartado() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.ApartadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Apartado' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.ApartadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Minimo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.MinimoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Minimo' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.MinimoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Maximo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.MaximoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Maximo' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.MaximoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reorden() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_busca_prod_ubc.ReordenColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Reorden' de la tabla 'sp_busca_prod_ubc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_busca_prod_ubc.ReordenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsC_BARRASNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.C_BARRASColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetC_BARRASNull()
            Me(Me.tablesp_busca_prod_ubc.C_BARRASColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_busca_prod_ubc.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_busca_prod_ubc.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.ExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciaNull()
            Me(Me.tablesp_busca_prod_ubc.ExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApartadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.ApartadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApartadoNull()
            Me(Me.tablesp_busca_prod_ubc.ApartadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinimoNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.MinimoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinimoNull()
            Me(Me.tablesp_busca_prod_ubc.MinimoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaximoNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.MaximoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaximoNull()
            Me(Me.tablesp_busca_prod_ubc.MaximoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReordenNull() As Boolean
            Return Me.IsNull(Me.tablesp_busca_prod_ubc.ReordenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReordenNull()
            Me(Me.tablesp_busca_prod_ubc.ReordenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_ubaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_uba As sp_rep_ubaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_uba = CType(Me.Table,sp_rep_ubaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_uba.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_rep_uba' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_uba.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_uba.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_rep_uba' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_uba.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EST() As String
            Get
                Return CType(Me(Me.tablesp_rep_uba.ESTColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_uba.ESTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Columna() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_uba.ColumnaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Columna' de la tabla 'sp_rep_uba' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_uba.ColumnaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nivel() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_uba.NivelColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nivel' de la tabla 'sp_rep_uba' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_uba.NivelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Posicion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_uba.PosicionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Posicion' de la tabla 'sp_rep_uba' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_uba.PosicionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ubicación() As String
            Get
                Return CType(Me(Me.tablesp_rep_uba.UbicaciónColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_uba.UbicaciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_uba.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_rep_uba.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_uba.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_rep_uba.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColumnaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_uba.ColumnaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColumnaNull()
            Me(Me.tablesp_rep_uba.ColumnaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNivelNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_uba.NivelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNivelNull()
            Me(Me.tablesp_rep_uba.NivelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPosicionNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_uba.PosicionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPosicionNull()
            Me(Me.tablesp_rep_uba.PosicionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_sello_facRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_sello_fac As sp_sello_facDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_sello_fac = CType(Me.Table,sp_sello_facDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACClave() As String
            Get
                Return CType(Me(Me.tablesp_sello_fac.FACClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_sello_fac.FACClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cadenaOriginal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.cadenaOriginalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cadenaOriginal' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.cadenaOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.SelloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sello' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Certificado64() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.Certificado64Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Certificado64' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.Certificado64Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBB() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.CBBColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CBB' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.CBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UUID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.UUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UUID' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.UUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelloSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.SelloSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SelloSAT' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.SelloSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadoSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.CertificadoSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CertificadoSAT' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.CertificadoSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaTimbrado() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_fac.fechaTimbradoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaTimbrado' de la tabla 'sp_sello_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_fac.fechaTimbradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscadenaOriginalNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.cadenaOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcadenaOriginalNull()
            Me(Me.tablesp_sello_fac.cadenaOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tablesp_sello_fac.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificado64Null() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.Certificado64Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificado64Null()
            Me(Me.tablesp_sello_fac.Certificado64Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBBNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.CBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBBNull()
            Me(Me.tablesp_sello_fac.CBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUUIDNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.UUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUUIDNull()
            Me(Me.tablesp_sello_fac.UUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.SelloSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloSATNull()
            Me(Me.tablesp_sello_fac.SelloSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificadoSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.CertificadoSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificadoSATNull()
            Me(Me.tablesp_sello_fac.CertificadoSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaTimbradoNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_fac.fechaTimbradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaTimbradoNull()
            Me(Me.tablesp_sello_fac.fechaTimbradoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_sello_ncRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_sello_nc As sp_sello_ncDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_sello_nc = CType(Me.Table,sp_sello_ncDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCClave() As String
            Get
                Return CType(Me(Me.tablesp_sello_nc.NCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_sello_nc.NCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cadenaOriginal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.cadenaOriginalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cadenaOriginal' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.cadenaOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.SelloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sello' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Certificado64() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.Certificado64Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Certificado64' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.Certificado64Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBB() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.CBBColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CBB' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.CBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UUID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.UUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UUID' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.UUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelloSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.SelloSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SelloSAT' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.SelloSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadoSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.CertificadoSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CertificadoSAT' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.CertificadoSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaTimbrado() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_nc.fechaTimbradoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaTimbrado' de la tabla 'sp_sello_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_nc.fechaTimbradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscadenaOriginalNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.cadenaOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcadenaOriginalNull()
            Me(Me.tablesp_sello_nc.cadenaOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tablesp_sello_nc.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificado64Null() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.Certificado64Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificado64Null()
            Me(Me.tablesp_sello_nc.Certificado64Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBBNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.CBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBBNull()
            Me(Me.tablesp_sello_nc.CBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUUIDNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.UUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUUIDNull()
            Me(Me.tablesp_sello_nc.UUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.SelloSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloSATNull()
            Me(Me.tablesp_sello_nc.SelloSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificadoSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.CertificadoSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificadoSATNull()
            Me(Me.tablesp_sello_nc.CertificadoSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaTimbradoNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_nc.fechaTimbradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaTimbradoNull()
            Me(Me.tablesp_sello_nc.fechaTimbradoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_ncRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_nc As sp_encabezado_ncDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_nc = CType(Me.Table,sp_encabezado_ncDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_nc.NCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.NCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.FACClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FACClave' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.FACClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTEClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.CTEClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTEClave' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.CTEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.TipoCFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCF' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.TipoCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VersionCF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.VersionCFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VersionCF' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.VersionCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegimenFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.RegimenFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegimenFiscal' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.RegimenFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.SerieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.FolioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Atendio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.AtendioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Atendio' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.AtendioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.fechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noAprobacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.noAprobacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noAprobacion' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.noAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anoAprobacion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.anoAprobacionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anoAprobacion' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.anoAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.fechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaAprobacion' de la tabla 'sp_encabezado_nc' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.fechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaDePago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.formaDePagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaDePago' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.formaDePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property metodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.metodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'metodoPago' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.metodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.noCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noCertificado' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.noCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property motivo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.motivoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'motivo' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.motivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property porcDesc() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.porcDescColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'porcDesc' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.porcDescColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.descripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descripcion' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.descripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.costoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costo' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.costoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.subTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property impuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.impuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'impuestoTot' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.impuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descuentoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.descuentoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descuentoTot' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.descuentoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.totalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'total' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.tipoCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoCertificado' de la tabla 'sp_encabezado_nc' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.tipoCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.TipoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.MONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONClave' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.MONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vendedor' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.rCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rCalle' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.rCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.rDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio1' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.rDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.rDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio2' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.rDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.sCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sCalle' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.sCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.sDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio1' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.sDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.sDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio2' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.sDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compania() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.CompaniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Compania' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.CompaniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cRFC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.cRFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cRFC' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.cRFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.eCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eCalle' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.eCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.eDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio1' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.eDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.eDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio2' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.eDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_nc.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'sp_encabezado_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_nc.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFACClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.FACClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFACClaveNull()
            Me(Me.tablesp_encabezado_nc.FACClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTEClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.CTEClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTEClaveNull()
            Me(Me.tablesp_encabezado_nc.CTEClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_nc.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_encabezado_nc.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.TipoCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCFNull()
            Me(Me.tablesp_encabezado_nc.TipoCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.VersionCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionCFNull()
            Me(Me.tablesp_encabezado_nc.VersionCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenFiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.RegimenFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenFiscalNull()
            Me(Me.tablesp_encabezado_nc.RegimenFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerieNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.SerieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerieNull()
            Me(Me.tablesp_encabezado_nc.SerieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_nc.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_nc.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtendioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.AtendioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtendioNull()
            Me(Me.tablesp_encabezado_nc.AtendioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.fechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaNull()
            Me(Me.tablesp_encabezado_nc.fechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.noAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoAprobacionNull()
            Me(Me.tablesp_encabezado_nc.noAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanoAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.anoAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanoAprobacionNull()
            Me(Me.tablesp_encabezado_nc.anoAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.fechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaAprobacionNull()
            Me(Me.tablesp_encabezado_nc.fechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaDePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.formaDePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaDePagoNull()
            Me(Me.tablesp_encabezado_nc.formaDePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.metodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmetodoPagoNull()
            Me(Me.tablesp_encabezado_nc.metodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.noCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoCertificadoNull()
            Me(Me.tablesp_encabezado_nc.noCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.motivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmotivoNull()
            Me(Me.tablesp_encabezado_nc.motivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsporcDescNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.porcDescColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetporcDescNull()
            Me(Me.tablesp_encabezado_nc.porcDescColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.descripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescripcionNull()
            Me(Me.tablesp_encabezado_nc.descripcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.costoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcostoNull()
            Me(Me.tablesp_encabezado_nc.costoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tablesp_encabezado_nc.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.impuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimpuestoTotNull()
            Me(Me.tablesp_encabezado_nc.impuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescuentoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.descuentoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescuentoTotNull()
            Me(Me.tablesp_encabezado_nc.descuentoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tablesp_encabezado_nc.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.tipoCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoCertificadoNull()
            Me(Me.tablesp_encabezado_nc.tipoCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tablesp_encabezado_nc.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_encabezado_nc.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.MONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONClaveNull()
            Me(Me.tablesp_encabezado_nc.MONClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_encabezado_nc.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_encabezado_nc.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_encabezado_nc.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_nc.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_nc.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_nc.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_nc.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_nc.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_encabezado_nc.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.rCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrCalleNull()
            Me(Me.tablesp_encabezado_nc.rCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.rDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio1Null()
            Me(Me.tablesp_encabezado_nc.rDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.rDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio2Null()
            Me(Me.tablesp_encabezado_nc.rDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.sCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsCalleNull()
            Me(Me.tablesp_encabezado_nc.sCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.sDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio1Null()
            Me(Me.tablesp_encabezado_nc.sDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.sDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio2Null()
            Me(Me.tablesp_encabezado_nc.sDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompaniaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.CompaniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompaniaNull()
            Me(Me.tablesp_encabezado_nc.CompaniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscRFCNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.cRFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcRFCNull()
            Me(Me.tablesp_encabezado_nc.cRFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tablesp_encabezado_nc.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.eCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteCalleNull()
            Me(Me.tablesp_encabezado_nc.eCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.eDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio1Null()
            Me(Me.tablesp_encabezado_nc.eDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.eDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio2Null()
            Me(Me.tablesp_encabezado_nc.eDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_nc.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tablesp_encabezado_nc.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_impuestos_facRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_impuestos_fac As sp_impuestos_facDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_impuestos_fac = CType(Me.Table,sp_impuestos_facDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_fac.FACClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FACClave' de la tabla 'sp_impuestos_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_fac.FACClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_fac.ImpuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Impuesto' de la tabla 'sp_impuestos_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_fac.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tasa() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_fac.TasaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tasa' de la tabla 'sp_impuestos_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_fac.TasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_fac.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_impuestos_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_fac.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_fac.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_impuestos_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_fac.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFACClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_fac.FACClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFACClaveNull()
            Me(Me.tablesp_impuestos_fac.FACClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_fac.ImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoNull()
            Me(Me.tablesp_impuestos_fac.ImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_fac.TasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaNull()
            Me(Me.tablesp_impuestos_fac.TasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_fac.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_impuestos_fac.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_fac.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_impuestos_fac.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_nc_impuestosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_nc_impuestos As sp_nc_impuestosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_nc_impuestos = CType(Me.Table,sp_nc_impuestosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_impuestos.NCClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NCClave' de la tabla 'sp_nc_impuestos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_impuestos.NCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_impuestos.ImpuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Impuesto' de la tabla 'sp_nc_impuestos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_impuestos.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tasa() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_impuestos.TasaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tasa' de la tabla 'sp_nc_impuestos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_impuestos.TasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_impuestos.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_nc_impuestos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_impuestos.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_impuestos.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_nc_impuestos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_impuestos.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_impuestos.NCClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCClaveNull()
            Me(Me.tablesp_nc_impuestos.NCClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_impuestos.ImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoNull()
            Me(Me.tablesp_nc_impuestos.ImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_impuestos.TasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaNull()
            Me(Me.tablesp_nc_impuestos.TasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_impuestos.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_nc_impuestos.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_impuestos.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_nc_impuestos.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_metodopago_facRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_metodopago_fac As sp_metodopago_facDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_metodopago_fac = CType(Me.Table,sp_metodopago_facDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_metodopago_fac.MetodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MetodoPago' de la tabla 'sp_metodopago_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_metodopago_fac.MetodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_metodopago_fac.MetodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoPagoNull()
            Me(Me.tablesp_metodopago_fac.MetodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_metodopago_ncRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_metodopago_nc As sp_metodopago_ncDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_metodopago_nc = CType(Me.Table,sp_metodopago_ncDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_metodopago_nc.MetodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MetodoPago' de la tabla 'sp_metodopago_nc' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_metodopago_nc.MetodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_metodopago_nc.MetodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoPagoNull()
            Me(Me.tablesp_metodopago_nc.MetodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_liq_generalRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_liq_general As sp_liq_generalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_liq_general = CType(Me.Table,sp_liq_generalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiaTrabajo() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.DiaTrabajoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiaTrabajo' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.DiaTrabajoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaApertura() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.FechaAperturaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaApertura' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.FechaAperturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaCierre() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.FechaCierreColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaCierre' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.FechaCierreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Liquidacion() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.LiquidacionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Liquidacion' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.LiquidacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.SaldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.ClaveUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveUsuario' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.ClaveUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreUsuario() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.NombreUsuarioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreUsuario' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.NombreUsuarioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveCaja() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.ClaveCajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveCaja' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.ClaveCajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCaja() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_general.NombreCajaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCaja' de la tabla 'sp_liq_general' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_general.NombreCajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_liq_general.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiaTrabajoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.DiaTrabajoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiaTrabajoNull()
            Me(Me.tablesp_liq_general.DiaTrabajoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaAperturaNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.FechaAperturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaAperturaNull()
            Me(Me.tablesp_liq_general.FechaAperturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaCierreNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.FechaCierreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaCierreNull()
            Me(Me.tablesp_liq_general.FechaCierreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLiquidacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.LiquidacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLiquidacionNull()
            Me(Me.tablesp_liq_general.LiquidacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tablesp_liq_general.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.ClaveUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveUsuarioNull()
            Me(Me.tablesp_liq_general.ClaveUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreUsuarioNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.NombreUsuarioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreUsuarioNull()
            Me(Me.tablesp_liq_general.NombreUsuarioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveCajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.ClaveCajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveCajaNull()
            Me(Me.tablesp_liq_general.ClaveCajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_general.NombreCajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCajaNull()
            Me(Me.tablesp_liq_general.NombreCajaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_liq_corteRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_liq_corte As sp_liq_corteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_liq_corte = CType(Me.Table,sp_liq_corteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_corte.ConceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Concepto' de la tabla 'sp_liq_corte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_corte.ConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_corte.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_liq_corte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_corte.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ingreso() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_corte.IngresoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ingreso' de la tabla 'sp_liq_corte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_corte.IngresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Egreso() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_corte.EgresoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Egreso' de la tabla 'sp_liq_corte' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_corte.EgresoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConceptoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_corte.ConceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConceptoNull()
            Me(Me.tablesp_liq_corte.ConceptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_corte.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_liq_corte.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIngresoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_corte.IngresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIngresoNull()
            Me(Me.tablesp_liq_corte.IngresoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEgresoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_corte.EgresoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEgresoNull()
            Me(Me.tablesp_liq_corte.EgresoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_liq_pagosRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_liq_pagos As sp_liq_pagosDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_liq_pagos = CType(Me.Table,sp_liq_pagosDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Concepto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_pagos.ConceptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Concepto' de la tabla 'sp_liq_pagos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_pagos.ConceptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_pagos.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_liq_pagos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_pagos.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConceptoNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_pagos.ConceptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConceptoNull()
            Me(Me.tablesp_liq_pagos.ConceptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_pagos.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_liq_pagos.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_movimientos_liqRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_movimientos_liq As sp_movimientos_liqDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_movimientos_liq = CType(Me.Table,sp_movimientos_liqDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Inicial() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.InicialColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Inicial' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.InicialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cargas() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.CargasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cargas' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.CargasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descargas() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.DescargasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descargas' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.DescargasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ventas() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.VentasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ventas' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.VentasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Devoluciones() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.DevolucionesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Devoluciones' de la tabla 'sp_movimientos_liq' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.DevolucionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Existencia() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_movimientos_liq.ExistenciaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Existencia' de la tabla 'sp_movimientos_liq' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_movimientos_liq.ExistenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_movimientos_liq.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_movimientos_liq.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInicialNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.InicialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInicialNull()
            Me(Me.tablesp_movimientos_liq.InicialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCargasNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.CargasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCargasNull()
            Me(Me.tablesp_movimientos_liq.CargasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescargasNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.DescargasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescargasNull()
            Me(Me.tablesp_movimientos_liq.DescargasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVentasNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.VentasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVentasNull()
            Me(Me.tablesp_movimientos_liq.VentasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDevolucionesNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.DevolucionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDevolucionesNull()
            Me(Me.tablesp_movimientos_liq.DevolucionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExistenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_movimientos_liq.ExistenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExistenciaNull()
            Me(Me.tablesp_movimientos_liq.ExistenciaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_liq_comision_prodRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_liq_comision_prod As sp_liq_comision_prodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_liq_comision_prod = CType(Me.Table,sp_liq_comision_prodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_liq_comision_prod' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_liq_comision_prod' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveComision() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.ClaveComisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveComision' de la tabla 'sp_liq_comision_prod' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.ClaveComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_liq_comision_prod' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Devoluciones() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.DevolucionesColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Devoluciones' de la tabla 'sp_liq_comision_prod' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.DevolucionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Porcentaje' de la tabla 'sp_liq_comision_prod' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comision() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_prod.ComisionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Comision' de la tabla 'sp_liq_comision_prod' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_prod.ComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_liq_comision_prod.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_liq_comision_prod.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveComisionNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.ClaveComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveComisionNull()
            Me(Me.tablesp_liq_comision_prod.ClaveComisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_liq_comision_prod.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDevolucionesNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.DevolucionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDevolucionesNull()
            Me(Me.tablesp_liq_comision_prod.DevolucionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tablesp_liq_comision_prod.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_prod.ComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNull()
            Me(Me.tablesp_liq_comision_prod.ComisionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_liq_comision_vtaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_liq_comision_vta As sp_liq_comision_vtaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_liq_comision_vta = CType(Me.Table,sp_liq_comision_vtaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Venta() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_vta.VentaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Venta' de la tabla 'sp_liq_comision_vta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_vta.VentaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveComision() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_vta.ClaveComisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveComision' de la tabla 'sp_liq_comision_vta' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_vta.ClaveComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Porcentaje() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_vta.PorcentajeColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Porcentaje' de la tabla 'sp_liq_comision_vta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_vta.PorcentajeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Comision() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_liq_comision_vta.ComisionColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Comision' de la tabla 'sp_liq_comision_vta' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_liq_comision_vta.ComisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVentaNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_vta.VentaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVentaNull()
            Me(Me.tablesp_liq_comision_vta.VentaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveComisionNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_vta.ClaveComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveComisionNull()
            Me(Me.tablesp_liq_comision_vta.ClaveComisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcentajeNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_vta.PorcentajeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcentajeNull()
            Me(Me.tablesp_liq_comision_vta.PorcentajeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsComisionNull() As Boolean
            Return Me.IsNull(Me.tablesp_liq_comision_vta.ComisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetComisionNull()
            Me(Me.tablesp_liq_comision_vta.ComisionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_facRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_fac As sp_detalle_facDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_fac = CType(Me.Table,sp_detalle_facDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DFAClave() As String
            Get
                Return CType(Me(Me.tablesp_detalle_fac.DFAClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_fac.DFAClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.FACClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FACClave' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.FACClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.PROClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROClave' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioBruto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.PrecioBrutoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioBruto' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.PrecioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.DescuentoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoImp' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.DescuentoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.ImpuestoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoImp' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.ImpuestoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantDev() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.CantDevColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantDev' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.CantDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.SubTotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubTotalPartida' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.SubTotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.TotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPartida' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.TotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.PuntosImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosImp' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.PuntosImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripción() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.DescripciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripción' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.DescripciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.DetalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Detalle' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.DetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_fac.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_detalle_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_fac.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFACClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.FACClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFACClaveNull()
            Me(Me.tablesp_detalle_fac.FACClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.PROClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROClaveNull()
            Me(Me.tablesp_detalle_fac.PROClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_detalle_fac.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_detalle_fac.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioBrutoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.PrecioBrutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioBrutoNull()
            Me(Me.tablesp_detalle_fac.PrecioBrutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.DescuentoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoImpNull()
            Me(Me.tablesp_detalle_fac.DescuentoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.ImpuestoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoImpNull()
            Me(Me.tablesp_detalle_fac.ImpuestoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_fac.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantDevNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.CantDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantDevNull()
            Me(Me.tablesp_detalle_fac.CantDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.SubTotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalPartidaNull()
            Me(Me.tablesp_detalle_fac.SubTotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.TotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPartidaNull()
            Me(Me.tablesp_detalle_fac.TotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.PuntosImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosImpNull()
            Me(Me.tablesp_detalle_fac.PuntosImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablesp_detalle_fac.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_detalle_fac.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripciónNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.DescripciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripciónNull()
            Me(Me.tablesp_detalle_fac.DescripciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.DetalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetalleNull()
            Me(Me.tablesp_detalle_fac.DetalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_fac.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_detalle_fac.NotaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_nc_detalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_nc_detalle As sp_nc_detalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_nc_detalle = CType(Me.Table,sp_nc_detalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DNCClave() As String
            Get
                Return CType(Me(Me.tablesp_nc_detalle.DNCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_nc_detalle.DNCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NCClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.NCClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NCClave' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.NCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.PROClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROClave' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioBruto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.PrecioBrutoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioBruto' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.PrecioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.DescuentoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoImp' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.DescuentoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.ImpuestoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoImp' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.ImpuestoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.PuntosImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosImp' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.PuntosImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubtotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.SubtotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubtotalPartida' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.SubtotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.TotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPartida' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.TotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripción() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.DescripciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripción' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.DescripciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Detalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.DetalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Detalle' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.DetalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_nc_detalle.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_nc_detalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_nc_detalle.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNCClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.NCClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNCClaveNull()
            Me(Me.tablesp_nc_detalle.NCClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.PROClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROClaveNull()
            Me(Me.tablesp_nc_detalle.PROClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_nc_detalle.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_nc_detalle.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioBrutoNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.PrecioBrutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioBrutoNull()
            Me(Me.tablesp_nc_detalle.PrecioBrutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.DescuentoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoImpNull()
            Me(Me.tablesp_nc_detalle.DescuentoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.ImpuestoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoImpNull()
            Me(Me.tablesp_nc_detalle.ImpuestoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.PuntosImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosImpNull()
            Me(Me.tablesp_nc_detalle.PuntosImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_nc_detalle.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.SubtotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalPartidaNull()
            Me(Me.tablesp_nc_detalle.SubtotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.TotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPartidaNull()
            Me(Me.tablesp_nc_detalle.TotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablesp_nc_detalle.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_nc_detalle.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripciónNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.DescripciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripciónNull()
            Me(Me.tablesp_nc_detalle.DescripciónColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDetalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.DetalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDetalleNull()
            Me(Me.tablesp_nc_detalle.DetalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_nc_detalle.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_nc_detalle.NotaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_facRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_fac As sp_encabezado_facDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_fac = CType(Me.Table,sp_encabezado_facDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturaID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.FacturaIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FacturaID' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.FacturaIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FACClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_fac.FACClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.FACClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.TipoCFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCF' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.TipoCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VersionCF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.VersionCFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VersionCF' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.VersionCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegimenFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.RegimenFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegimenFiscal' de la tabla 'sp_encabezado_fac' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.RegimenFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.SerieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.FolioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Facturo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.FacturoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Facturo' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.FacturoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTEClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.CTEClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTEClave' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.CTEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property credito() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.creditoColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'credito' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.creditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property diasCredito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.diasCreditoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'diasCredito' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.diasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaFactura() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.fechaFacturaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaFactura' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.fechaFacturaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noAprobacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.noAprobacionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noAprobacion' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.noAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property anoAprobacion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.anoAprobacionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'anoAprobacion' de la tabla 'sp_encabezado_fac' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.anoAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaAprobacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.fechaAprobacionColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaAprobacion' de la tabla 'sp_encabezado_fac' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.fechaAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaDePago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.formaDePagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaDePago' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.formaDePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.noCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noCertificado' de la tabla 'sp_encabezado_fac' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.noCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaVencimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.fechaVencimientoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaVencimiento' de la tabla 'sp_encabezado_fac' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.fechaVencimientoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property costoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.costoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'costoTot' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.costoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subTotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.subTotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subTotal' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.subTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property impuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.impuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'impuestoTot' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.impuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property descuentoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.descuentoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'descuentoTot' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.descuentoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.PuntosTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosTot' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.PuntosTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.totalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'total' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.saldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'saldo' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property desglosar() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.desglosarColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'desglosar' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.desglosarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.tipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipo' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.tipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.MONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONClave' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.MONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Notas' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_fac' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vendedor' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.rCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rCalle' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.rCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.rDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio1' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.rDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.rDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio2' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.rDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.sCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sCalle' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.sCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.sDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio1' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.sDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.sDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio2' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.sDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compania() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.CompaniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Compania' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.CompaniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cRFC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.cRFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cRFC' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.cRFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.eCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eCalle' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.eCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.eDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio1' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.eDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.eDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio2' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.eDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_fac.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'sp_encabezado_fac' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_fac.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaIDNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.FacturaIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaIDNull()
            Me(Me.tablesp_encabezado_fac.FacturaIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_fac.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_encabezado_fac.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.TipoCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCFNull()
            Me(Me.tablesp_encabezado_fac.TipoCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.VersionCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionCFNull()
            Me(Me.tablesp_encabezado_fac.VersionCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenFiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.RegimenFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenFiscalNull()
            Me(Me.tablesp_encabezado_fac.RegimenFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerieNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.SerieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerieNull()
            Me(Me.tablesp_encabezado_fac.SerieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_fac.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_fac.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.FacturoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturoNull()
            Me(Me.tablesp_encabezado_fac.FacturoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTEClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.CTEClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTEClaveNull()
            Me(Me.tablesp_encabezado_fac.CTEClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.creditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcreditoNull()
            Me(Me.tablesp_encabezado_fac.creditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdiasCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.diasCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdiasCreditoNull()
            Me(Me.tablesp_encabezado_fac.diasCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaFacturaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.fechaFacturaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaFacturaNull()
            Me(Me.tablesp_encabezado_fac.fechaFacturaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.noAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoAprobacionNull()
            Me(Me.tablesp_encabezado_fac.noAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsanoAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.anoAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetanoAprobacionNull()
            Me(Me.tablesp_encabezado_fac.anoAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaAprobacionNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.fechaAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaAprobacionNull()
            Me(Me.tablesp_encabezado_fac.fechaAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaDePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.formaDePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaDePagoNull()
            Me(Me.tablesp_encabezado_fac.formaDePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.noCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoCertificadoNull()
            Me(Me.tablesp_encabezado_fac.noCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaVencimientoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.fechaVencimientoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaVencimientoNull()
            Me(Me.tablesp_encabezado_fac.fechaVencimientoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscostoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.costoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcostoTotNull()
            Me(Me.tablesp_encabezado_fac.costoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.subTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubTotalNull()
            Me(Me.tablesp_encabezado_fac.subTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.impuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimpuestoTotNull()
            Me(Me.tablesp_encabezado_fac.impuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdescuentoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.descuentoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdescuentoTotNull()
            Me(Me.tablesp_encabezado_fac.descuentoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.PuntosTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosTotNull()
            Me(Me.tablesp_encabezado_fac.PuntosTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tablesp_encabezado_fac.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoNull()
            Me(Me.tablesp_encabezado_fac.saldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdesglosarNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.desglosarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdesglosarNull()
            Me(Me.tablesp_encabezado_fac.desglosarColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tablesp_encabezado_fac.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.tipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoNull()
            Me(Me.tablesp_encabezado_fac.tipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.MONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONClaveNull()
            Me(Me.tablesp_encabezado_fac.MONClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_encabezado_fac.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_encabezado_fac.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_encabezado_fac.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tablesp_encabezado_fac.NotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_fac.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_fac.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_fac.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_fac.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_fac.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_encabezado_fac.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.rCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrCalleNull()
            Me(Me.tablesp_encabezado_fac.rCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.rDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio1Null()
            Me(Me.tablesp_encabezado_fac.rDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.rDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio2Null()
            Me(Me.tablesp_encabezado_fac.rDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.sCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsCalleNull()
            Me(Me.tablesp_encabezado_fac.sCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.sDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio1Null()
            Me(Me.tablesp_encabezado_fac.sDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.sDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio2Null()
            Me(Me.tablesp_encabezado_fac.sDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompaniaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.CompaniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompaniaNull()
            Me(Me.tablesp_encabezado_fac.CompaniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscRFCNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.cRFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcRFCNull()
            Me(Me.tablesp_encabezado_fac.cRFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tablesp_encabezado_fac.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.eCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteCalleNull()
            Me(Me.tablesp_encabezado_fac.eCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.eDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio1Null()
            Me(Me.tablesp_encabezado_fac.eDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.eDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio2Null()
            Me(Me.tablesp_encabezado_fac.eDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_fac.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tablesp_encabezado_fac.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_incapacidadRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_incapacidad As sp_recupera_incapacidadDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_incapacidad = CType(Me.Table,sp_recupera_incapacidadDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_incapacidad.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_recupera_incapacidad' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_incapacidad.DiasColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dias' de la tabla 'sp_recupera_incapacidad' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoIncapacidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_incapacidad.TipoIncapacidadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoIncapacidad' de la tabla 'sp_recupera_incapacidad' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.TipoIncapacidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descuento() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_incapacidad.DescuentoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descuento' de la tabla 'sp_recupera_incapacidad' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.DescuentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_incapacidad.CONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONClave' de la tabla 'sp_recupera_incapacidad' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.CONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REDClave() As String
            Get
                Return CType(Me(Me.tablesp_recupera_incapacidad.REDClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_recupera_incapacidad.REDClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_incapacidad.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_recupera_incapacidad.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_incapacidad.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tablesp_recupera_incapacidad.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoIncapacidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_incapacidad.TipoIncapacidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoIncapacidadNull()
            Me(Me.tablesp_recupera_incapacidad.TipoIncapacidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_incapacidad.DescuentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoNull()
            Me(Me.tablesp_recupera_incapacidad.DescuentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_incapacidad.CONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONClaveNull()
            Me(Me.tablesp_recupera_incapacidad.CONClaveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_horasextraRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_horasextra As sp_recupera_horasextraDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_horasextra = CType(Me.Table,sp_recupera_horasextraDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_horasextra.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_recupera_horasextra' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Dias() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_horasextra.DiasColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Dias' de la tabla 'sp_recupera_horasextra' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.DiasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HorasExtra() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_horasextra.HorasExtraColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'HorasExtra' de la tabla 'sp_recupera_horasextra' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.HorasExtraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImportePagado() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_horasextra.ImportePagadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImportePagado' de la tabla 'sp_recupera_horasextra' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.ImportePagadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_horasextra.CONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CONClave' de la tabla 'sp_recupera_horasextra' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.CONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property REDClave() As String
            Get
                Return CType(Me(Me.tablesp_recupera_horasextra.REDClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_recupera_horasextra.REDClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_horasextra.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_recupera_horasextra.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_horasextra.DiasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasNull()
            Me(Me.tablesp_recupera_horasextra.DiasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHorasExtraNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_horasextra.HorasExtraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHorasExtraNull()
            Me(Me.tablesp_recupera_horasextra.HorasExtraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImportePagadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_horasextra.ImportePagadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImportePagadoNull()
            Me(Me.tablesp_recupera_horasextra.ImportePagadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_horasextra.CONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCONClaveNull()
            Me(Me.tablesp_recupera_horasextra.CONClaveColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_percepcionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_percepciones As sp_recupera_percepcionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_percepciones = CType(Me.Table,sp_recupera_percepcionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPercepcion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_percepciones.TipoPercepcionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoPercepcion' de la tabla 'sp_recupera_percepciones' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_percepciones.TipoPercepcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_percepciones.ClavePColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveP' de la tabla 'sp_recupera_percepciones' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_percepciones.ClavePColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConceptoP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_percepciones.ConceptoPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ConceptoP' de la tabla 'sp_recupera_percepciones' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_percepciones.ConceptoPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGravadoP() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_percepciones.ImpGravadoPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpGravadoP' de la tabla 'sp_recupera_percepciones' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_percepciones.ImpGravadoPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpExentoP() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_percepciones.ImpExentoPColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpExentoP' de la tabla 'sp_recupera_percepciones' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_percepciones.ImpExentoPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoPercepcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_percepciones.TipoPercepcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoPercepcionNull()
            Me(Me.tablesp_recupera_percepciones.TipoPercepcionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClavePNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_percepciones.ClavePColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClavePNull()
            Me(Me.tablesp_recupera_percepciones.ClavePColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConceptoPNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_percepciones.ConceptoPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConceptoPNull()
            Me(Me.tablesp_recupera_percepciones.ConceptoPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGravadoPNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_percepciones.ImpGravadoPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGravadoPNull()
            Me(Me.tablesp_recupera_percepciones.ImpGravadoPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpExentoPNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_percepciones.ImpExentoPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpExentoPNull()
            Me(Me.tablesp_recupera_percepciones.ImpExentoPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_deduccionesRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_deducciones As sp_recupera_deduccionesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_deducciones = CType(Me.Table,sp_recupera_deduccionesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoDeduccion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_deducciones.TipoDeduccionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoDeduccion' de la tabla 'sp_recupera_deducciones' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_deducciones.TipoDeduccionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClaveD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_deducciones.ClaveDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClaveD' de la tabla 'sp_recupera_deducciones' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_deducciones.ClaveDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConceptoD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_deducciones.ConceptoDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ConceptoD' de la tabla 'sp_recupera_deducciones' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_deducciones.ConceptoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpGravadoD() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_deducciones.ImpGravadoDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpGravadoD' de la tabla 'sp_recupera_deducciones' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_deducciones.ImpGravadoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpExentoD() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_deducciones.ImpExentoDColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpExentoD' de la tabla 'sp_recupera_deducciones' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_deducciones.ImpExentoDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoDeduccionNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_deducciones.TipoDeduccionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoDeduccionNull()
            Me(Me.tablesp_recupera_deducciones.TipoDeduccionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveDNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_deducciones.ClaveDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveDNull()
            Me(Me.tablesp_recupera_deducciones.ClaveDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConceptoDNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_deducciones.ConceptoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConceptoDNull()
            Me(Me.tablesp_recupera_deducciones.ConceptoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpGravadoDNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_deducciones.ImpGravadoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpGravadoDNull()
            Me(Me.tablesp_recupera_deducciones.ImpGravadoDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpExentoDNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_deducciones.ImpExentoDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpExentoDNull()
            Me(Me.tablesp_recupera_deducciones.ImpExentoDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_empleadoRECRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_empleadoREC As sp_recupera_empleadoRECDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_empleadoREC = CType(Me.Table,sp_recupera_empleadoRECDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumEmpleado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.NumEmpleadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumEmpleado' de la tabla 'sp_recupera_empleadoREC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.NumEmpleadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCompleto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.NombreCompletoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCompleto' de la tabla 'sp_recupera_empleadoREC' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.NombreCompletoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rRFC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.rRFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rRFC' de la tabla 'sp_recupera_empleadoREC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.rRFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumSeguridadSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.NumSeguridadSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumSeguridadSocial' de la tabla 'sp_recupera_empleadoREC'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.NumSeguridadSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CURP() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.CURPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CURP' de la tabla 'sp_recupera_empleadoREC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.CURPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Departamento() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.DepartamentoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Departamento' de la tabla 'sp_recupera_empleadoREC' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.DepartamentoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Puesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.PuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Puesto' de la tabla 'sp_recupera_empleadoREC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.PuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CLABE() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.CLABEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CLABE' de la tabla 'sp_recupera_empleadoREC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.CLABEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioBaseCotAport() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.SalarioBaseCotAportColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SalarioBaseCotAport' de la tabla 'sp_recupera_empleadoREC"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.SalarioBaseCotAportColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SalarioDiarioIntegrado() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.SalarioDiarioIntegradoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SalarioDiarioIntegrado' de la tabla 'sp_recupera_empleado"& _ 
                            "REC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.SalarioDiarioIntegradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.rCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rCalle' de la tabla 'sp_recupera_empleadoREC' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.rCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.rDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio1' de la tabla 'sp_recupera_empleadoREC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.rDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.rDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio2' de la tabla 'sp_recupera_empleadoREC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.rDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoRegimen() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.TipoRegimenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoRegimen' de la tabla 'sp_recupera_empleadoREC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.TipoRegimenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoJornada() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.TipoJornadaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoJornada' de la tabla 'sp_recupera_empleadoREC' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.TipoJornadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoContrato() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.TipoContratoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoContrato' de la tabla 'sp_recupera_empleadoREC' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.TipoContratoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PeriodicidadPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_empleadoREC.PeriodicidadPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PeriodicidadPago' de la tabla 'sp_recupera_empleadoREC' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_empleadoREC.PeriodicidadPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumEmpleadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.NumEmpleadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumEmpleadoNull()
            Me(Me.tablesp_recupera_empleadoREC.NumEmpleadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCompletoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.NombreCompletoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCompletoNull()
            Me(Me.tablesp_recupera_empleadoREC.NombreCompletoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrRFCNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.rRFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrRFCNull()
            Me(Me.tablesp_recupera_empleadoREC.rRFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumSeguridadSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.NumSeguridadSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumSeguridadSocialNull()
            Me(Me.tablesp_recupera_empleadoREC.NumSeguridadSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCURPNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.CURPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCURPNull()
            Me(Me.tablesp_recupera_empleadoREC.CURPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDepartamentoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.DepartamentoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDepartamentoNull()
            Me(Me.tablesp_recupera_empleadoREC.DepartamentoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.PuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuestoNull()
            Me(Me.tablesp_recupera_empleadoREC.PuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCLABENull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.CLABEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCLABENull()
            Me(Me.tablesp_recupera_empleadoREC.CLABEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalarioBaseCotAportNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.SalarioBaseCotAportColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalarioBaseCotAportNull()
            Me(Me.tablesp_recupera_empleadoREC.SalarioBaseCotAportColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSalarioDiarioIntegradoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.SalarioDiarioIntegradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSalarioDiarioIntegradoNull()
            Me(Me.tablesp_recupera_empleadoREC.SalarioDiarioIntegradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.rCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrCalleNull()
            Me(Me.tablesp_recupera_empleadoREC.rCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.rDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio1Null()
            Me(Me.tablesp_recupera_empleadoREC.rDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.rDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio2Null()
            Me(Me.tablesp_recupera_empleadoREC.rDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoRegimenNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.TipoRegimenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoRegimenNull()
            Me(Me.tablesp_recupera_empleadoREC.TipoRegimenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoJornadaNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.TipoJornadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoJornadaNull()
            Me(Me.tablesp_recupera_empleadoREC.TipoJornadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoContratoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.TipoContratoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoContratoNull()
            Me(Me.tablesp_recupera_empleadoREC.TipoContratoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodicidadPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_empleadoREC.PeriodicidadPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodicidadPagoNull()
            Me(Me.tablesp_recupera_empleadoREC.PeriodicidadPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_reciboNominaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_reciboNomina As sp_encabezado_reciboNominaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_reciboNomina = CType(Me.Table,sp_encabezado_reciboNominaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.SerieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie' de la tabla 'sp_encabezado_reciboNomina' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.FolioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_reciboNomina' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegimenFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.RegimenFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegimenFiscal' de la tabla 'sp_encabezado_reciboNomina' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.RegimenFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.FechaPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaPago' de la tabla 'sp_encabezado_reciboNomina' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.FechaPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaRecibo() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.fechaReciboColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaRecibo' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.fechaReciboColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaDePago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.formaDePagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaDePago' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.formaDePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.noCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noCertificado' de la tabla 'sp_encabezado_reciboNomina' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.noCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.MONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONClave' de la tabla 'sp_encabezado_reciboNomina' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.MONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.MetodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MetodoPago' de la tabla 'sp_encabezado_reciboNomina' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.MetodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoBanco() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.TipoBancoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoBanco' de la tabla 'sp_encabezado_reciboNomina' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.TipoBancoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Referencia' de la tabla 'sp_encabezado_reciboNomina' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_encabezado_reciboNomina' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumNomina() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.NumNominaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumNomina' de la tabla 'sp_encabezado_reciboNomina' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.NumNominaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaInicialPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.FechaInicialPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaInicialPago' de la tabla 'sp_encabezado_reciboNomina"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.FechaInicialPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaFinalPago() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.FechaFinalPagoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaFinalPago' de la tabla 'sp_encabezado_reciboNomina' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.FechaFinalPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumDiasPagados() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.NumDiasPagadosColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumDiasPagados' de la tabla 'sp_encabezado_reciboNomina' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.NumDiasPagadosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compania() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.CompaniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Compania' de la tabla 'sp_encabezado_reciboNomina' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.CompaniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cRFC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.cRFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cRFC' de la tabla 'sp_encabezado_reciboNomina' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.cRFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property registroPatronal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.registroPatronalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'registroPatronal' de la tabla 'sp_encabezado_reciboNomina"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.registroPatronalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property riesgoPuesto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.riesgoPuestoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'riesgoPuesto' de la tabla 'sp_encabezado_reciboNomina' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.riesgoPuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.eCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eCalle' de la tabla 'sp_encabezado_reciboNomina' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.eCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.eDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio1' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.eDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.eDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio2' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.eDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.sCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sCalle' de la tabla 'sp_encabezado_reciboNomina' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.sCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.sDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio1' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.sDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.sDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio2' de la tabla 'sp_encabezado_reciboNomina' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.sDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cadenaOriginal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.cadenaOriginalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cadenaOriginal' de la tabla 'sp_encabezado_reciboNomina' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.cadenaOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.SelloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sello' de la tabla 'sp_encabezado_reciboNomina' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBB() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.CBBColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CBB' de la tabla 'sp_encabezado_reciboNomina' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.CBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UUID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.UUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UUID' de la tabla 'sp_encabezado_reciboNomina' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.UUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelloSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.SelloSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SelloSAT' de la tabla 'sp_encabezado_reciboNomina' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.SelloSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadoSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.CertificadoSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CertificadoSAT' de la tabla 'sp_encabezado_reciboNomina' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.CertificadoSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaTimbrado() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.fechaTimbradoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaTimbrado' de la tabla 'sp_encabezado_reciboNomina' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.fechaTimbradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNetoPagar() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_reciboNomina.TotalNetoPagarColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalNetoPagar' de la tabla 'sp_encabezado_reciboNomina' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_reciboNomina.TotalNetoPagarColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerieNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.SerieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerieNull()
            Me(Me.tablesp_encabezado_reciboNomina.SerieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_reciboNomina.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenFiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.RegimenFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenFiscalNull()
            Me(Me.tablesp_encabezado_reciboNomina.RegimenFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.FechaPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaPagoNull()
            Me(Me.tablesp_encabezado_reciboNomina.FechaPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaReciboNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.fechaReciboColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaReciboNull()
            Me(Me.tablesp_encabezado_reciboNomina.fechaReciboColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaDePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.formaDePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaDePagoNull()
            Me(Me.tablesp_encabezado_reciboNomina.formaDePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.noCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoCertificadoNull()
            Me(Me.tablesp_encabezado_reciboNomina.noCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.MONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONClaveNull()
            Me(Me.tablesp_encabezado_reciboNomina.MONClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.MetodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoPagoNull()
            Me(Me.tablesp_encabezado_reciboNomina.MetodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoBancoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.TipoBancoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoBancoNull()
            Me(Me.tablesp_encabezado_reciboNomina.TipoBancoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tablesp_encabezado_reciboNomina.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_encabezado_reciboNomina.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumNominaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.NumNominaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumNominaNull()
            Me(Me.tablesp_encabezado_reciboNomina.NumNominaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaInicialPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.FechaInicialPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaInicialPagoNull()
            Me(Me.tablesp_encabezado_reciboNomina.FechaInicialPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaFinalPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.FechaFinalPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaFinalPagoNull()
            Me(Me.tablesp_encabezado_reciboNomina.FechaFinalPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumDiasPagadosNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.NumDiasPagadosColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumDiasPagadosNull()
            Me(Me.tablesp_encabezado_reciboNomina.NumDiasPagadosColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompaniaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.CompaniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompaniaNull()
            Me(Me.tablesp_encabezado_reciboNomina.CompaniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscRFCNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.cRFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcRFCNull()
            Me(Me.tablesp_encabezado_reciboNomina.cRFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsregistroPatronalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.registroPatronalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetregistroPatronalNull()
            Me(Me.tablesp_encabezado_reciboNomina.registroPatronalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsriesgoPuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.riesgoPuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetriesgoPuestoNull()
            Me(Me.tablesp_encabezado_reciboNomina.riesgoPuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.eCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteCalleNull()
            Me(Me.tablesp_encabezado_reciboNomina.eCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.eDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio1Null()
            Me(Me.tablesp_encabezado_reciboNomina.eDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.eDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio2Null()
            Me(Me.tablesp_encabezado_reciboNomina.eDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.sCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsCalleNull()
            Me(Me.tablesp_encabezado_reciboNomina.sCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.sDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio1Null()
            Me(Me.tablesp_encabezado_reciboNomina.sDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.sDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio2Null()
            Me(Me.tablesp_encabezado_reciboNomina.sDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscadenaOriginalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.cadenaOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcadenaOriginalNull()
            Me(Me.tablesp_encabezado_reciboNomina.cadenaOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tablesp_encabezado_reciboNomina.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBBNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.CBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBBNull()
            Me(Me.tablesp_encabezado_reciboNomina.CBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUUIDNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.UUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUUIDNull()
            Me(Me.tablesp_encabezado_reciboNomina.UUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.SelloSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloSATNull()
            Me(Me.tablesp_encabezado_reciboNomina.SelloSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificadoSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.CertificadoSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificadoSATNull()
            Me(Me.tablesp_encabezado_reciboNomina.CertificadoSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaTimbradoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.fechaTimbradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaTimbradoNull()
            Me(Me.tablesp_encabezado_reciboNomina.fechaTimbradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNetoPagarNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_reciboNomina.TotalNetoPagarColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNetoPagarNull()
            Me(Me.tablesp_encabezado_reciboNomina.TotalNetoPagarColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_obtener_surtidodetalleRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_obtener_surtidodetalle As sp_obtener_surtidodetalleDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_obtener_surtidodetalle = CType(Me.Table,sp_obtener_surtidodetalleDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_surtidodetalle.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_obtener_surtidodetalle' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumParte() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_surtidodetalle.NumParteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumParte' de la tabla 'sp_obtener_surtidodetalle' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.NumParteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GTIN() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_surtidodetalle.GTINColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GTIN' de la tabla 'sp_obtener_surtidodetalle' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.GTINColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_surtidodetalle.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_obtener_surtidodetalle' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UBCClave() As String
            Get
                Return CType(Me(Me.tablesp_obtener_surtidodetalle.UBCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.UBCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_surtidodetalle.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_obtener_surtidodetalle' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_surtidodetalle.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_surtidodetalle.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_obtener_surtidodetalle.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumParteNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_surtidodetalle.NumParteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumParteNull()
            Me(Me.tablesp_obtener_surtidodetalle.NumParteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGTINNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_surtidodetalle.GTINColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGTINNull()
            Me(Me.tablesp_obtener_surtidodetalle.GTINColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_surtidodetalle.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_obtener_surtidodetalle.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_surtidodetalle.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_obtener_surtidodetalle.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_obtener_envioRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_obtener_envio As sp_obtener_envioDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_obtener_envio = CType(Me.Table,sp_obtener_envioDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ref() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.RefColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ref' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.RefColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Observaciones() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.ObservacionesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Observaciones' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.ObservacionesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaPrevista() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.fechaPrevistaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaPrevista' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.fechaPrevistaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaEfectiva() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.fechaEfectivaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaEfectiva' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.fechaEfectivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ruta() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.RutaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Ruta' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.RutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Referencia() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.ReferenciaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Referencia' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.ReferenciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaEnvio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_obtener_envio.formaEnvioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaEnvio' de la tabla 'sp_obtener_envio' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_obtener_envio.formaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_obtener_envio.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_obtener_envio.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_obtener_envio.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRefNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.RefColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRefNull()
            Me(Me.tablesp_obtener_envio.RefColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObservacionesNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.ObservacionesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObservacionesNull()
            Me(Me.tablesp_obtener_envio.ObservacionesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaPrevistaNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.fechaPrevistaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaPrevistaNull()
            Me(Me.tablesp_obtener_envio.fechaPrevistaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaEfectivaNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.fechaEfectivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaEfectivaNull()
            Me(Me.tablesp_obtener_envio.fechaEfectivaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRutaNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.RutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRutaNull()
            Me(Me.tablesp_obtener_envio.RutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.ReferenciaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaNull()
            Me(Me.tablesp_obtener_envio.ReferenciaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablesp_obtener_envio.formaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaEnvioNull()
            Me(Me.tablesp_obtener_envio.formaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_cargoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_cargo As sp_encabezado_cargoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_cargo = CType(Me.Table,sp_encabezado_cargoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_cargo.CARClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.CARClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCF() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.TipoCFColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCF' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.TipoCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VersionCF() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.VersionCFColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VersionCF' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.VersionCFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegimenFiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.RegimenFiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RegimenFiscal' de la tabla 'sp_encabezado_cargo' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.RegimenFiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Serie() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.SerieColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Serie' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.SerieColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.FolioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTEClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.CTEClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTEClave' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.CTEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.fechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fecha' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.fechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaDePago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.formaDePagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaDePago' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.formaDePagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property noCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.noCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'noCertificado' de la tabla 'sp_encabezado_cargo' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.noCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.subtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'subtotal' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.subtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property impuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.impuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'impuestoTot' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.impuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.totalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'total' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.totalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.saldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'saldo' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.saldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.estadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'estado' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.estadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.tipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipo' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.tipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MONClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.MONClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MONClave' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.MONClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Notas' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_cargo' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.rCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rCalle' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.rCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.rDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio1' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.rDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property rDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.rDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'rDomicilio2' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.rDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.sCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sCalle' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.sCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.sDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio1' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.sDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.sDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio2' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.sDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compania() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.CompaniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Compania' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.CompaniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cRFC() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.cRFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cRFC' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.cRFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.TelefonoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Telefono' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.TelefonoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.eCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eCalle' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.eCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.eDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio1' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.eDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property eDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.eDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'eDomicilio2' de la tabla 'sp_encabezado_cargo' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.eDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Moneda() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_cargo.MonedaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Moneda' de la tabla 'sp_encabezado_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_cargo.MonedaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_cargo.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_encabezado_cargo.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.TipoCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCFNull()
            Me(Me.tablesp_encabezado_cargo.TipoCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionCFNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.VersionCFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionCFNull()
            Me(Me.tablesp_encabezado_cargo.VersionCFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenFiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.RegimenFiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenFiscalNull()
            Me(Me.tablesp_encabezado_cargo.RegimenFiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSerieNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.SerieColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSerieNull()
            Me(Me.tablesp_encabezado_cargo.SerieColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_cargo.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_cargo.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTEClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.CTEClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTEClaveNull()
            Me(Me.tablesp_encabezado_cargo.CTEClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.fechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaNull()
            Me(Me.tablesp_encabezado_cargo.fechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaDePagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.formaDePagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaDePagoNull()
            Me(Me.tablesp_encabezado_cargo.formaDePagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsnoCertificadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.noCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetnoCertificadoNull()
            Me(Me.tablesp_encabezado_cargo.noCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.subtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsubtotalNull()
            Me(Me.tablesp_encabezado_cargo.subtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsimpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.impuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetimpuestoTotNull()
            Me(Me.tablesp_encabezado_cargo.impuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.totalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettotalNull()
            Me(Me.tablesp_encabezado_cargo.totalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssaldoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.saldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsaldoNull()
            Me(Me.tablesp_encabezado_cargo.saldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsestadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.estadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetestadoNull()
            Me(Me.tablesp_encabezado_cargo.estadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.tipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoNull()
            Me(Me.tablesp_encabezado_cargo.tipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMONClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.MONClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMONClaveNull()
            Me(Me.tablesp_encabezado_cargo.MONClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_encabezado_cargo.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_encabezado_cargo.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_encabezado_cargo.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tablesp_encabezado_cargo.NotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_cargo.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_cargo.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_cargo.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_cargo.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_cargo.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.rCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrCalleNull()
            Me(Me.tablesp_encabezado_cargo.rCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.rDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio1Null()
            Me(Me.tablesp_encabezado_cargo.rDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsrDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.rDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetrDomicilio2Null()
            Me(Me.tablesp_encabezado_cargo.rDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.sCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsCalleNull()
            Me(Me.tablesp_encabezado_cargo.sCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.sDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio1Null()
            Me(Me.tablesp_encabezado_cargo.sDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.sDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio2Null()
            Me(Me.tablesp_encabezado_cargo.sDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompaniaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.CompaniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompaniaNull()
            Me(Me.tablesp_encabezado_cargo.CompaniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscRFCNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.cRFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcRFCNull()
            Me(Me.tablesp_encabezado_cargo.cRFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.TelefonoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoNull()
            Me(Me.tablesp_encabezado_cargo.TelefonoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.eCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteCalleNull()
            Me(Me.tablesp_encabezado_cargo.eCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.eDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio1Null()
            Me(Me.tablesp_encabezado_cargo.eDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IseDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.eDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SeteDomicilio2Null()
            Me(Me.tablesp_encabezado_cargo.eDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMonedaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_cargo.MonedaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMonedaNull()
            Me(Me.tablesp_encabezado_cargo.MonedaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_cargoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_cargo As sp_detalle_cargoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_cargo = CType(Me.Table,sp_detalle_cargoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DCRClave() As String
            Get
                Return CType(Me(Me.tablesp_detalle_cargo.DCRClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.DCRClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.CARClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARClave' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.CARClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioBruto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.PrecioBrutoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioBruto' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.PrecioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.ImpuestoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoImp' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.ImpuestoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.SubTotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubTotalPartida' de la tabla 'sp_detalle_cargo' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.SubTotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.TotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPartida' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.TotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripción() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_cargo.DescripciónColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripción' de la tabla 'sp_detalle_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_cargo.DescripciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.CARClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARClaveNull()
            Me(Me.tablesp_detalle_cargo.CARClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioBrutoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.PrecioBrutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioBrutoNull()
            Me(Me.tablesp_detalle_cargo.PrecioBrutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.ImpuestoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoImpNull()
            Me(Me.tablesp_detalle_cargo.ImpuestoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_cargo.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.SubTotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalPartidaNull()
            Me(Me.tablesp_detalle_cargo.SubTotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.TotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPartidaNull()
            Me(Me.tablesp_detalle_cargo.TotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablesp_detalle_cargo.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripciónNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_cargo.DescripciónColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripciónNull()
            Me(Me.tablesp_detalle_cargo.DescripciónColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_impuestos_cargoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_impuestos_cargo As sp_impuestos_cargoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_impuestos_cargo = CType(Me.Table,sp_impuestos_cargoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_cargo.CARClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CARClave' de la tabla 'sp_impuestos_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_cargo.CARClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_cargo.ImpuestoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Impuesto' de la tabla 'sp_impuestos_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_cargo.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tasa() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_cargo.TasaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tasa' de la tabla 'sp_impuestos_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_cargo.TasaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_cargo.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_impuestos_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_cargo.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoCambio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_impuestos_cargo.TipoCambioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoCambio' de la tabla 'sp_impuestos_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_impuestos_cargo.TipoCambioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCARClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_cargo.CARClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCARClaveNull()
            Me(Me.tablesp_impuestos_cargo.CARClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_cargo.ImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoNull()
            Me(Me.tablesp_impuestos_cargo.ImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTasaNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_cargo.TasaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTasaNull()
            Me(Me.tablesp_impuestos_cargo.TasaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_cargo.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_impuestos_cargo.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoCambioNull() As Boolean
            Return Me.IsNull(Me.tablesp_impuestos_cargo.TipoCambioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoCambioNull()
            Me(Me.tablesp_impuestos_cargo.TipoCambioColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_sello_cargoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_sello_cargo As sp_sello_cargoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_sello_cargo = CType(Me.Table,sp_sello_cargoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CARClave() As String
            Get
                Return CType(Me(Me.tablesp_sello_cargo.CARClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_sello_cargo.CARClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property cadenaOriginal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.cadenaOriginalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'cadenaOriginal' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.cadenaOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sello() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.SelloColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sello' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.SelloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Certificado64() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.Certificado64Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Certificado64' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.Certificado64Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CBB() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.CBBColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CBB' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.CBBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UUID() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.UUIDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UUID' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.UUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CertificadoSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.CertificadoSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CertificadoSAT' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.CertificadoSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaTimbrado() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.fechaTimbradoColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaTimbrado' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.fechaTimbradoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelloSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.SelloSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SelloSAT' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.SelloSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property versionSAT() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.versionSATColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'versionSAT' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.versionSATColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TipoPAC() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_sello_cargo.TipoPACColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TipoPAC' de la tabla 'sp_sello_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_sello_cargo.TipoPACColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IscadenaOriginalNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.cadenaOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetcadenaOriginalNull()
            Me(Me.tablesp_sello_cargo.cadenaOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.SelloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloNull()
            Me(Me.tablesp_sello_cargo.SelloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificado64Null() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.Certificado64Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificado64Null()
            Me(Me.tablesp_sello_cargo.Certificado64Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCBBNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.CBBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCBBNull()
            Me(Me.tablesp_sello_cargo.CBBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUUIDNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.UUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUUIDNull()
            Me(Me.tablesp_sello_cargo.UUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCertificadoSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.CertificadoSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCertificadoSATNull()
            Me(Me.tablesp_sello_cargo.CertificadoSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaTimbradoNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.fechaTimbradoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaTimbradoNull()
            Me(Me.tablesp_sello_cargo.fechaTimbradoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.SelloSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloSATNull()
            Me(Me.tablesp_sello_cargo.SelloSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsversionSATNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.versionSATColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetversionSATNull()
            Me(Me.tablesp_sello_cargo.versionSATColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoPACNull() As Boolean
            Return Me.IsNull(Me.tablesp_sello_cargo.TipoPACColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoPACNull()
            Me(Me.tablesp_sello_cargo.TipoPACColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_metodopago_cargoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_metodopago_cargo As sp_metodopago_cargoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_metodopago_cargo = CType(Me.Table,sp_metodopago_cargoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_metodopago_cargo.MetodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MetodoPago' de la tabla 'sp_metodopago_cargo' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_metodopago_cargo.MetodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tablesp_metodopago_cargo.MetodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoPagoNull()
            Me(Me.tablesp_metodopago_cargo.MetodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_devRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_dev As sp_encabezado_devDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_dev = CType(Me.Table,sp_encabezado_devDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEVClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_dev.DEVClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.DEVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.VENClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VENClave' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.VENClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTEClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.CTEClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTEClave' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.CTEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Atendio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.AtendioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Atendio' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.AtendioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.ImpuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoTot' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.ImpuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.DescuentoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoTot' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.DescuentoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.PuntosTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosTot' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.PuntosTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_dev' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vendedor' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_dev.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_encabezado_dev' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_dev.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVENClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.VENClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVENClaveNull()
            Me(Me.tablesp_encabezado_dev.VENClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTEClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.CTEClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTEClaveNull()
            Me(Me.tablesp_encabezado_dev.CTEClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_dev.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_dev.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_dev.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAtendioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.AtendioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAtendioNull()
            Me(Me.tablesp_encabezado_dev.AtendioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_encabezado_dev.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablesp_encabezado_dev.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_encabezado_dev.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_encabezado_dev.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.ImpuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoTotNull()
            Me(Me.tablesp_encabezado_dev.ImpuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.DescuentoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoTotNull()
            Me(Me.tablesp_encabezado_dev.DescuentoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.PuntosTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosTotNull()
            Me(Me.tablesp_encabezado_dev.PuntosTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_encabezado_dev.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_encabezado_dev.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_dev.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_dev.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_dev.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_dev.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_dev.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_encabezado_dev.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_encabezado_dev.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_encabezado_dev.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_dev.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_encabezado_dev.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_devolucion_detRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_devolucion_det As sp_devolucion_detDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_devolucion_det = CType(Me.Table,sp_devolucion_detDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DDEVClave() As String
            Get
                Return CType(Me(Me.tablesp_devolucion_det.DDEVClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_devolucion_det.DDEVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DEVClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.DEVClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DEVClave' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.DEVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.PROClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROClave' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioBruto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.PrecioBrutoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioBruto' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.PrecioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.DescuentoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoImp' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.DescuentoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.ImpuestoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoImp' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.ImpuestoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.PuntosImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosImp' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.PuntosImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubtotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.SubtotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubtotalPartida' de la tabla 'sp_devolucion_det' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.SubtotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.TotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPartida' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.TotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precio() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.PrecioColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Precio' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.PrecioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumParte() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.NumParteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumParte' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.NumParteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_devolucion_det.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'sp_devolucion_det' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_devolucion_det.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDEVClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.DEVClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDEVClaveNull()
            Me(Me.tablesp_devolucion_det.DEVClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.PROClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROClaveNull()
            Me(Me.tablesp_devolucion_det.PROClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_devolucion_det.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_devolucion_det.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioBrutoNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.PrecioBrutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioBrutoNull()
            Me(Me.tablesp_devolucion_det.PrecioBrutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.DescuentoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoImpNull()
            Me(Me.tablesp_devolucion_det.DescuentoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.ImpuestoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoImpNull()
            Me(Me.tablesp_devolucion_det.ImpuestoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.PuntosImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosImpNull()
            Me(Me.tablesp_devolucion_det.PuntosImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_devolucion_det.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.SubtotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalPartidaNull()
            Me(Me.tablesp_devolucion_det.SubtotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.TotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPartidaNull()
            Me(Me.tablesp_devolucion_det.TotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.PrecioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioNull()
            Me(Me.tablesp_devolucion_det.PrecioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_devolucion_det.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumParteNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.NumParteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumParteNull()
            Me(Me.tablesp_devolucion_det.NumParteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_devolucion_det.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_devolucion_det.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_devolucion_det.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_trasladoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_traslado As sp_detalle_trasladoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_traslado = CType(Me.Table,sp_detalle_trasladoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_detalle_traslado.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Return CType(Me(Me.tablesp_detalle_traslado.PROClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Unidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_traslado.UnidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Unidad' de la tabla 'sp_detalle_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_traslado.UnidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_detalle_traslado.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_detalle_traslado.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_detalle_traslado.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_traslado.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_detalle_traslado.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_detalle_traslado.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUnidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_traslado.UnidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUnidadNull()
            Me(Me.tablesp_detalle_traslado.UnidadColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_surtidoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_surtido As sp_encabezado_surtidoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_surtido = CType(Me.Table,sp_encabezado_surtidoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.TipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PICClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.PICClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PICClave' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.PICClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_surtido' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_surtido' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vendedor' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_encabezado_surtido' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_encabezado_surtido' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_surtido.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_encabezado_surtido' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_surtido.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_encabezado_surtido.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_surtido.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_encabezado_surtido.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.PICClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICClaveNull()
            Me(Me.tablesp_encabezado_surtido.PICClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_encabezado_surtido.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_surtido.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_surtido.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_surtido.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_encabezado_surtido.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_encabezado_surtido.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_encabezado_surtido.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_surtido.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_encabezado_surtido.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_ordenRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_orden As sp_detalle_ordenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_orden = CType(Me.Table,sp_detalle_ordenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tablesp_detalle_orden.IDColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_orden.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Surtido() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.SurtidoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Surtido' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.SurtidoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcIVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.PorcIVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PorcIVA' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.PorcIVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IVA() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.IVAColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IVA' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.IVAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Impuesto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.ImpuestoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Impuesto' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.ImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Importe() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_orden.ImporteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Importe' de la tabla 'sp_detalle_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_orden.ImporteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_orden.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSurtidoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.SurtidoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSurtidoNull()
            Me(Me.tablesp_detalle_orden.SurtidoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_detalle_orden.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_detalle_orden.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_detalle_orden.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcIVANull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.PorcIVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcIVANull()
            Me(Me.tablesp_detalle_orden.PorcIVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIVANull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.IVAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIVANull()
            Me(Me.tablesp_detalle_orden.IVAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_detalle_orden.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_detalle_orden.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.ImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoNull()
            Me(Me.tablesp_detalle_orden.ImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImporteNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_orden.ImporteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImporteNull()
            Me(Me.tablesp_detalle_orden.ImporteColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_recupera_ordenRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_recupera_orden As sp_recupera_ordenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_recupera_orden = CType(Me.Table,sp_recupera_ordenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDClave() As String
            Get
                Return CType(Me(Me.tablesp_recupera_orden.ORDClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_recupera_orden.ORDClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Return CType(Me(Me.tablesp_recupera_orden.ALMClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_recupera_orden.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicita() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.SolicitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Solicita' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.SolicitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.ImpuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoTot' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.ImpuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.FechaRegistroColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRegistro' de la tabla 'sp_recupera_orden' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.RegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Registro' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.RegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRVClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.PRVClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRVClave' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.PRVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Baja() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.BajaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Baja' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.BajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.SUCClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUCClave' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.SUCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEstado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.NEstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEstado' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.NEstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CProveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.CProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CProveedor' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.CProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NProveedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.NProveedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NProveedor' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.NProveedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasCredito() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.DiasCreditoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasCredito' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.DiasCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DiasEntrega() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.DiasEntregaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DiasEntrega' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.DiasEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Disponible() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.DisponibleColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Disponible' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.DisponibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TImpuesto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_recupera_orden.TImpuestoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TImpuesto' de la tabla 'sp_recupera_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_recupera_orden.TImpuestoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_recupera_orden.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_recupera_orden.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_recupera_orden.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitaNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.SolicitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitaNull()
            Me(Me.tablesp_recupera_orden.SolicitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_recupera_orden.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.ImpuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoTotNull()
            Me(Me.tablesp_recupera_orden.ImpuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_recupera_orden.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.FechaRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRegistroNull()
            Me(Me.tablesp_recupera_orden.FechaRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.RegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroNull()
            Me(Me.tablesp_recupera_orden.RegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRVClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.PRVClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRVClaveNull()
            Me(Me.tablesp_recupera_orden.PRVClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_recupera_orden.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.BajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBajaNull()
            Me(Me.tablesp_recupera_orden.BajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_recupera_orden.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_recupera_orden.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.SUCClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCClaveNull()
            Me(Me.tablesp_recupera_orden.SUCClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablesp_recupera_orden.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_recupera_orden.NotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.NEstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEstadoNull()
            Me(Me.tablesp_recupera_orden.NEstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.CProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCProveedorNull()
            Me(Me.tablesp_recupera_orden.CProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNProveedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.NProveedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNProveedorNull()
            Me(Me.tablesp_recupera_orden.NProveedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.DiasCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasCreditoNull()
            Me(Me.tablesp_recupera_orden.DiasCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDiasEntregaNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.DiasEntregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDiasEntregaNull()
            Me(Me.tablesp_recupera_orden.DiasEntregaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisponibleNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.DisponibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisponibleNull()
            Me(Me.tablesp_recupera_orden.DisponibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_recupera_orden.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTImpuestoNull() As Boolean
            Return Me.IsNull(Me.tablesp_recupera_orden.TImpuestoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTImpuestoNull()
            Me(Me.tablesp_recupera_orden.TImpuestoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_ordenRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_orden As sp_rep_ordenDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_orden = CType(Me.Table,sp_rep_ordenDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ORDClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_orden.ORDClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_orden.ORDClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_orden.ALMClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_orden.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicita() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.SolicitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Solicita' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.SolicitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.ImpuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoTot' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.ImpuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.FechaRegistroColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRegistro' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.RegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Registro' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.RegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PRVClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.PRVClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PRVClave' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.PRVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Baja() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.BajaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Baja' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.BajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.SUCClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUCClave' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.SUCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NEstado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.NEstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NEstado' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.NEstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NAlmacen() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.NAlmacenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NAlmacen' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.NAlmacenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreCorto() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.NombreCortoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NombreCorto' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.NombreCortoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NoCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.NoClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NoCliente' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.NoClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.pCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pCalle' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.pCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.pDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pDomicilio1' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.pDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property pDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.pDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'pDomicilio2' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.pDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sCalle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.sCalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sCalle' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.sCalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.sDomicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio1' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.sDomicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property sDomicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.sDomicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'sDomicilio2' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.sDomicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Compania() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_orden.CompaniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Compania' de la tabla 'sp_rep_orden' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_orden.CompaniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_rep_orden.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_rep_orden.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_rep_orden.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.SolicitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitaNull()
            Me(Me.tablesp_rep_orden.SolicitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_rep_orden.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.ImpuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoTotNull()
            Me(Me.tablesp_rep_orden.ImpuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_rep_orden.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.FechaRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRegistroNull()
            Me(Me.tablesp_rep_orden.FechaRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.RegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroNull()
            Me(Me.tablesp_rep_orden.RegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPRVClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.PRVClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPRVClaveNull()
            Me(Me.tablesp_rep_orden.PRVClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_rep_orden.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.BajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBajaNull()
            Me(Me.tablesp_rep_orden.BajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_rep_orden.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_rep_orden.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.SUCClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCClaveNull()
            Me(Me.tablesp_rep_orden.SUCClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablesp_rep_orden.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_rep_orden.NotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.NEstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNEstadoNull()
            Me(Me.tablesp_rep_orden.NEstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNAlmacenNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.NAlmacenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNAlmacenNull()
            Me(Me.tablesp_rep_orden.NAlmacenColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_rep_orden.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreCortoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.NombreCortoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreCortoNull()
            Me(Me.tablesp_rep_orden.NombreCortoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_rep_orden.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNoClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.NoClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNoClienteNull()
            Me(Me.tablesp_rep_orden.NoClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.pCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpCalleNull()
            Me(Me.tablesp_rep_orden.pCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.pDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpDomicilio1Null()
            Me(Me.tablesp_rep_orden.pDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IspDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.pDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetpDomicilio2Null()
            Me(Me.tablesp_rep_orden.pDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.sCalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsCalleNull()
            Me(Me.tablesp_rep_orden.sCalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.sDomicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio1Null()
            Me(Me.tablesp_rep_orden.sDomicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IssDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.sDomicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetsDomicilio2Null()
            Me(Me.tablesp_rep_orden.sDomicilio2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompaniaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_orden.CompaniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompaniaNull()
            Me(Me.tablesp_rep_orden.CompaniaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_transferenciaRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_transferencia As sp_rep_transferenciaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_transferencia = CType(Me.Table,sp_rep_transferenciaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MVAClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_transferencia.MVAClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.MVAClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.TipoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_transferencia.ALMClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMDestino() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.ALMDestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALMDestino' de la tabla 'sp_rep_transferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.ALMDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.FechaRegistroColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRegistro' de la tabla 'sp_rep_transferencia' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.RegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Registro' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.RegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.AutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Autorizo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.AutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Notas' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_rep_transferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_rep_transferencia' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNFClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CNFClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CNFClave' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CNFClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.SUCClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUCClave' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.SUCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PICClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.PICClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PICClave' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.PICClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaEfectiva() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.fechaEfectivaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaEfectiva' de la tabla 'sp_rep_transferencia' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.fechaEfectivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prioridad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.PrioridadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Prioridad' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.PrioridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicita() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.SolicitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Solicita' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.SolicitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEstado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CEstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEstado' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CEstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CTipo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CTipoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CTipo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CTipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAlmacenO() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CAlmacenOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAlmacenO' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CAlmacenOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAlmacenD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CAlmacenDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAlmacenD' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CAlmacenDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRegistro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CRegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CRegistro' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAutorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_transferencia.CAutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAutorizo' de la tabla 'sp_rep_transferencia' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_transferencia.CAutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_rep_transferencia.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_rep_transferencia.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_rep_transferencia.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablesp_rep_transferencia.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALMDestinoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.ALMDestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALMDestinoNull()
            Me(Me.tablesp_rep_transferencia.ALMDestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_rep_transferencia.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.FechaRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRegistroNull()
            Me(Me.tablesp_rep_transferencia.FechaRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.RegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroNull()
            Me(Me.tablesp_rep_transferencia.RegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.AutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutorizoNull()
            Me(Me.tablesp_rep_transferencia.AutorizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tablesp_rep_transferencia.NotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_rep_transferencia.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_rep_transferencia.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_rep_transferencia.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_rep_transferencia.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNFClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CNFClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNFClaveNull()
            Me(Me.tablesp_rep_transferencia.CNFClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.SUCClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCClaveNull()
            Me(Me.tablesp_rep_transferencia.SUCClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.PICClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICClaveNull()
            Me(Me.tablesp_rep_transferencia.PICClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaEfectivaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.fechaEfectivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaEfectivaNull()
            Me(Me.tablesp_rep_transferencia.fechaEfectivaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrioridadNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.PrioridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrioridadNull()
            Me(Me.tablesp_rep_transferencia.PrioridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.SolicitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitaNull()
            Me(Me.tablesp_rep_transferencia.SolicitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CEstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEstadoNull()
            Me(Me.tablesp_rep_transferencia.CEstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CTipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCTipoNull()
            Me(Me.tablesp_rep_transferencia.CTipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAlmacenONull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CAlmacenOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAlmacenONull()
            Me(Me.tablesp_rep_transferencia.CAlmacenOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAlmacenDNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CAlmacenDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAlmacenDNull()
            Me(Me.tablesp_rep_transferencia.CAlmacenDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRegistroNull()
            Me(Me.tablesp_rep_transferencia.CRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_transferencia.CAutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAutorizoNull()
            Me(Me.tablesp_rep_transferencia.CAutorizoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_rep_trasladoRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_rep_traslado As sp_rep_trasladoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_rep_traslado = CType(Me.Table,sp_rep_trasladoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TRSClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_traslado.TRSClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_traslado.TRSClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FechaRegistro() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.FechaRegistroColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FechaRegistro' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.FechaRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.MotivoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Motivo' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.MotivoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Notas() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.NotasColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Notas' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.NotasColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_traslado.SUCClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_traslado.SUCClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Return CType(Me(Me.tablesp_rep_traslado.ALMClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_traslado.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SUCDestino() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.SUCDestinoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SUCDestino' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.SUCDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMDestino() As String
            Get
                Return CType(Me(Me.tablesp_rep_traslado.ALMDestinoColumn),String)
            End Get
            Set
                Me(Me.tablesp_rep_traslado.ALMDestinoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Registro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.RegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Registro' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.RegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Autorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.AutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Autorizo' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.AutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CNFClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CNFClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CNFClave' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CNFClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaPrevista() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.fechaPrevistaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaPrevista' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.fechaPrevistaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PICClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.PICClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PICClave' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.PICClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property fechaEfectiva() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.fechaEfectivaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'fechaEfectiva' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.fechaEfectivaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property tipoEntrega() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.tipoEntregaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'tipoEntrega' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.tipoEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property formaEnvio() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.formaEnvioColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'formaEnvio' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.formaEnvioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Prioridad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.PrioridadColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Prioridad' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.PrioridadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicita() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.SolicitaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Solicita' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.SolicitaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CEstado() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CEstadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CEstado' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CEstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSucursalO() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CSucursalOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CSucursalO' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CSucursalOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSucursalD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CSucursalDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CSucursalD' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CSucursalDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAlmacenO() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CAlmacenOColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAlmacenO' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CAlmacenOColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAlmacenD() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CAlmacenDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAlmacenD' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CAlmacenDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CRegistro() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CRegistroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CRegistro' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CRegistroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAutorizo() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_rep_traslado.CAutorizoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAutorizo' de la tabla 'sp_rep_traslado' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_rep_traslado.CAutorizoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_rep_traslado.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_rep_traslado.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_rep_traslado.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.FechaRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaRegistroNull()
            Me(Me.tablesp_rep_traslado.FechaRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMotivoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.MotivoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMotivoNull()
            Me(Me.tablesp_rep_traslado.MotivoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotasNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.NotasColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotasNull()
            Me(Me.tablesp_rep_traslado.NotasColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSUCDestinoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.SUCDestinoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSUCDestinoNull()
            Me(Me.tablesp_rep_traslado.SUCDestinoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.RegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistroNull()
            Me(Me.tablesp_rep_traslado.RegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.AutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAutorizoNull()
            Me(Me.tablesp_rep_traslado.AutorizoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_rep_traslado.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_rep_traslado.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_rep_traslado.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_rep_traslado.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCNFClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CNFClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCNFClaveNull()
            Me(Me.tablesp_rep_traslado.CNFClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaPrevistaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.fechaPrevistaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaPrevistaNull()
            Me(Me.tablesp_rep_traslado.fechaPrevistaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.PICClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICClaveNull()
            Me(Me.tablesp_rep_traslado.PICClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsfechaEfectivaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.fechaEfectivaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetfechaEfectivaNull()
            Me(Me.tablesp_rep_traslado.fechaEfectivaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IstipoEntregaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.tipoEntregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SettipoEntregaNull()
            Me(Me.tablesp_rep_traslado.tipoEntregaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsformaEnvioNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.formaEnvioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetformaEnvioNull()
            Me(Me.tablesp_rep_traslado.formaEnvioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrioridadNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.PrioridadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrioridadNull()
            Me(Me.tablesp_rep_traslado.PrioridadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitaNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.SolicitaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitaNull()
            Me(Me.tablesp_rep_traslado.SolicitaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CEstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCEstadoNull()
            Me(Me.tablesp_rep_traslado.CEstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSucursalONull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CSucursalOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSucursalONull()
            Me(Me.tablesp_rep_traslado.CSucursalOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSucursalDNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CSucursalDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSucursalDNull()
            Me(Me.tablesp_rep_traslado.CSucursalDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAlmacenONull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CAlmacenOColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAlmacenONull()
            Me(Me.tablesp_rep_traslado.CAlmacenOColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAlmacenDNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CAlmacenDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAlmacenDNull()
            Me(Me.tablesp_rep_traslado.CAlmacenDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCRegistroNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CRegistroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCRegistroNull()
            Me(Me.tablesp_rep_traslado.CRegistroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAutorizoNull() As Boolean
            Return Me.IsNull(Me.tablesp_rep_traslado.CAutorizoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAutorizoNull()
            Me(Me.tablesp_rep_traslado.CAutorizoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_encabezado_pedRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_encabezado_ped As sp_encabezado_pedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_encabezado_ped = CType(Me.Table,sp_encabezado_pedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_ped.VENClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.VENClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Periodo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.PeriodoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Periodo' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.PeriodoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mes() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.MesColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Mes' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.MesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDVClave() As String
            Get
                Return CType(Me(Me.tablesp_encabezado_ped.PDVClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.PDVClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Folio' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.TipoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Tipo' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.TipoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cliente() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.ClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cliente' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.ClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cajero() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.CajeroColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cajero' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.CajeroColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CAJClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.CAJClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CAJClave' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.CAJClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CostoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.CostoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CostoTot' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.CostoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Subtotal() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.SubtotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Subtotal' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.SubtotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.ImpuestoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoTot' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.ImpuestoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.DescuentoTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoTot' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.DescuentoTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RedondeoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.RedondeoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RedondeoImp' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.RedondeoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosTot() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.PuntosTotColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosTot' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.PuntosTotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Total() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.TotalColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Total' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.TotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Saldo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.SaldoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Saldo' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.SaldoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.FechaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Fecha' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.FechaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FacturaId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.FacturaIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FacturaId' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.FacturaIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.EstadoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Estado' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.EstadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Baja() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.BajaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Baja' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.BajaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Acreditada() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.AcreditadaColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Acreditada' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.AcreditadaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nota() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.NotaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nota' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.NotaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.MFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MFechaHora' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.MFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MUsuarioId() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.MUsuarioIdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'MUsuarioId' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.MUsuarioIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PICClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.PICClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PICClave' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.PICClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ALMClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.ALMClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ALMClave' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.ALMClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RazonSocial' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property id_Fiscal() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.id_FiscalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'id_Fiscal' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.id_FiscalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimiteCredito() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.LimiteCreditoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LimiteCredito' de la tabla 'sp_encabezado_ped' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.LimiteCreditoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SaldoCte() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.SaldoCteColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SaldoCte' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.SaldoCteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Vendedor() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.VendedorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Vendedor' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.VendedorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Calle' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio1() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.Domicilio1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio1' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.Domicilio1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Domicilio2() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_encabezado_ped.Domicilio2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Domicilio2' de la tabla 'sp_encabezado_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_encabezado_ped.Domicilio2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.PeriodoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodoNull()
            Me(Me.tablesp_encabezado_ped.PeriodoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMesNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.MesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMesNull()
            Me(Me.tablesp_encabezado_ped.MesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tablesp_encabezado_ped.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTipoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.TipoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTipoNull()
            Me(Me.tablesp_encabezado_ped.TipoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClienteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.ClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClienteNull()
            Me(Me.tablesp_encabezado_ped.ClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCajeroNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.CajeroColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCajeroNull()
            Me(Me.tablesp_encabezado_ped.CajeroColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCAJClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.CAJClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCAJClaveNull()
            Me(Me.tablesp_encabezado_ped.CAJClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.CostoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoTotNull()
            Me(Me.tablesp_encabezado_ped.CostoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubtotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.SubtotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubtotalNull()
            Me(Me.tablesp_encabezado_ped.SubtotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.ImpuestoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoTotNull()
            Me(Me.tablesp_encabezado_ped.ImpuestoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.DescuentoTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoTotNull()
            Me(Me.tablesp_encabezado_ped.DescuentoTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRedondeoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.RedondeoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRedondeoImpNull()
            Me(Me.tablesp_encabezado_ped.RedondeoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosTotNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.PuntosTotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosTotNull()
            Me(Me.tablesp_encabezado_ped.PuntosTotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.TotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNull()
            Me(Me.tablesp_encabezado_ped.TotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.SaldoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoNull()
            Me(Me.tablesp_encabezado_ped.SaldoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFechaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.FechaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFechaNull()
            Me(Me.tablesp_encabezado_ped.FechaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFacturaIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.FacturaIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFacturaIdNull()
            Me(Me.tablesp_encabezado_ped.FacturaIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEstadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.EstadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEstadoNull()
            Me(Me.tablesp_encabezado_ped.EstadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBajaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.BajaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBajaNull()
            Me(Me.tablesp_encabezado_ped.BajaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAcreditadaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.AcreditadaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAcreditadaNull()
            Me(Me.tablesp_encabezado_ped.AcreditadaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNotaNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.NotaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNotaNull()
            Me(Me.tablesp_encabezado_ped.NotaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.MFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMFechaHoraNull()
            Me(Me.tablesp_encabezado_ped.MFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMUsuarioIdNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.MUsuarioIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMUsuarioIdNull()
            Me(Me.tablesp_encabezado_ped.MUsuarioIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPICClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.PICClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPICClaveNull()
            Me(Me.tablesp_encabezado_ped.PICClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsALMClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.ALMClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetALMClaveNull()
            Me(Me.tablesp_encabezado_ped.ALMClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_encabezado_ped.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tablesp_encabezado_ped.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Isid_FiscalNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.id_FiscalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Setid_FiscalNull()
            Me(Me.tablesp_encabezado_ped.id_FiscalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimiteCreditoNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.LimiteCreditoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimiteCreditoNull()
            Me(Me.tablesp_encabezado_ped.LimiteCreditoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSaldoCteNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.SaldoCteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSaldoCteNull()
            Me(Me.tablesp_encabezado_ped.SaldoCteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVendedorNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.VendedorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVendedorNull()
            Me(Me.tablesp_encabezado_ped.VendedorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tablesp_encabezado_ped.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio1Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.Domicilio1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio1Null()
            Me(Me.tablesp_encabezado_ped.Domicilio1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomicilio2Null() As Boolean
            Return Me.IsNull(Me.tablesp_encabezado_ped.Domicilio2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomicilio2Null()
            Me(Me.tablesp_encabezado_ped.Domicilio2Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class sp_detalle_pedRow
        Inherits Global.System.Data.DataRow
        
        Private tablesp_detalle_ped As sp_detalle_pedDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablesp_detalle_ped = CType(Me.Table,sp_detalle_pedDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DVEClave() As String
            Get
                Return CType(Me(Me.tablesp_detalle_ped.DVEClaveColumn),String)
            End Get
            Set
                Me(Me.tablesp_detalle_ped.DVEClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VENClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.VENClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'VENClave' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.VENClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.PROClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PROClave' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.PROClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TProducto() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.TProductoColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TProducto' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.TProductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Costo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.CostoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Costo' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.CostoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrecioBruto() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.PrecioBrutoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PrecioBruto' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.PrecioBrutoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PuntosImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.PuntosImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PuntosImp' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.PuntosImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DescuentoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.DescuentoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'DescuentoImp' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.DescuentoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PorcImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.PorcImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PorcImp' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.PorcImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpuestoImp() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.ImpuestoImpColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ImpuestoImp' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.ImpuestoImpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cantidad() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.CantidadColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Cantidad' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.CantidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CantDev() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.CantDevColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CantDev' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.CantDevColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.SubTotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubTotalPartida' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.SubTotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalPartida() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.TotalPartidaColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalPartida' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.TotalPartidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Modificador() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.ModificadorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Modificador' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.ModificadorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Solicitado() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.SolicitadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Solicitado' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.SolicitadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UndKilo() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.UndKiloColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'UndKilo' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.UndKiloColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PREClave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.PREClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'PREClave' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.PREClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Apartado() As Double
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.ApartadoColumn),Double)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Apartado' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.ApartadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Clave' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumParte() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.NumParteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NumParte' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.NumParteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.NombreColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Nombre' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.NombreColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablesp_detalle_ped.DescripcionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Descripcion' de la tabla 'sp_detalle_ped' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablesp_detalle_ped.DescripcionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVENClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.VENClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVENClaveNull()
            Me(Me.tablesp_detalle_ped.VENClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.PROClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROClaveNull()
            Me(Me.tablesp_detalle_ped.PROClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTProductoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.TProductoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTProductoNull()
            Me(Me.tablesp_detalle_ped.TProductoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCostoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.CostoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCostoNull()
            Me(Me.tablesp_detalle_ped.CostoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPrecioBrutoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.PrecioBrutoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPrecioBrutoNull()
            Me(Me.tablesp_detalle_ped.PrecioBrutoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPuntosImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.PuntosImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPuntosImpNull()
            Me(Me.tablesp_detalle_ped.PuntosImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescuentoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.DescuentoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescuentoImpNull()
            Me(Me.tablesp_detalle_ped.DescuentoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPorcImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.PorcImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPorcImpNull()
            Me(Me.tablesp_detalle_ped.PorcImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImpuestoImpNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.ImpuestoImpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImpuestoImpNull()
            Me(Me.tablesp_detalle_ped.ImpuestoImpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantidadNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.CantidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantidadNull()
            Me(Me.tablesp_detalle_ped.CantidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCantDevNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.CantDevColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCantDevNull()
            Me(Me.tablesp_detalle_ped.CantDevColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.SubTotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTotalPartidaNull()
            Me(Me.tablesp_detalle_ped.SubTotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalPartidaNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.TotalPartidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalPartidaNull()
            Me(Me.tablesp_detalle_ped.TotalPartidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModificadorNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.ModificadorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModificadorNull()
            Me(Me.tablesp_detalle_ped.ModificadorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSolicitadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.SolicitadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSolicitadoNull()
            Me(Me.tablesp_detalle_ped.SolicitadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUndKiloNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.UndKiloColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUndKiloNull()
            Me(Me.tablesp_detalle_ped.UndKiloColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPREClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.PREClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPREClaveNull()
            Me(Me.tablesp_detalle_ped.PREClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApartadoNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.ApartadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApartadoNull()
            Me(Me.tablesp_detalle_ped.ApartadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tablesp_detalle_ped.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumParteNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.NumParteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumParteNull()
            Me(Me.tablesp_detalle_ped.NumParteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.NombreColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreNull()
            Me(Me.tablesp_detalle_ped.NombreColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescripcionNull() As Boolean
            Return Me.IsNull(Me.tablesp_detalle_ped.DescripcionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescripcionNull()
            Me(Me.tablesp_detalle_ped.DescripcionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_recRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_recRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_recRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_recRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_edocta_detalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_edocta_detalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_edocta_detalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_edocta_detalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_edocta_encRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_edocta_encRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_edocta_encRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_edocta_encRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_edoprv_detalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_edoprv_detalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_edoprv_detalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_edoprv_detalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_edoprv_encRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_edoprv_encRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_edoprv_encRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_edoprv_encRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_muestra_loteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_muestra_loteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_muestra_loteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_muestra_loteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_listaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_listaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_listaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_listaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_rangoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_rangoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_rangoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_rangoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_preciosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_preciosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_preciosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_preciosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_ingresoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_ingresoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_ingresoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_ingresoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_detalle_ingresoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_detalle_ingresoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_detalle_ingresoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_detalle_ingresoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_logo_companiaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_logo_companiaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_logo_companiaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_logo_companiaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_publicidadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_publicidadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_publicidadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_publicidadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_recRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_recRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_recRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_recRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_transferenciaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_transferenciaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_transferenciaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_transferenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_referencia_facturaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_referencia_facturaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_referencia_facturaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_referencia_facturaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_detalle_ubcingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_detalle_ubcingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_detalle_ubcingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_detalle_ubcingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_busca_prod_ubcRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_busca_prod_ubcRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_busca_prod_ubcRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_busca_prod_ubcRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_ubaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_ubaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_ubaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_ubaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_sello_facRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_sello_facRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_sello_facRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_sello_facRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_sello_ncRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_sello_ncRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_sello_ncRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_sello_ncRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_ncRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_ncRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_ncRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_ncRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_impuestos_facRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_impuestos_facRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_impuestos_facRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_impuestos_facRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_nc_impuestosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_nc_impuestosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_nc_impuestosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_nc_impuestosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_metodopago_facRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_metodopago_facRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_metodopago_facRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_metodopago_facRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_metodopago_ncRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_metodopago_ncRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_metodopago_ncRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_metodopago_ncRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_liq_generalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_liq_generalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_liq_generalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_liq_generalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_liq_corteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_liq_corteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_liq_corteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_liq_corteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_liq_pagosRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_liq_pagosRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_liq_pagosRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_liq_pagosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_movimientos_liqRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_movimientos_liqRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_movimientos_liqRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_movimientos_liqRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_liq_comision_prodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_liq_comision_prodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_liq_comision_prodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_liq_comision_prodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_liq_comision_vtaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_liq_comision_vtaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_liq_comision_vtaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_liq_comision_vtaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_facRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_facRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_facRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_facRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_nc_detalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_nc_detalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_nc_detalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_nc_detalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_facRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_facRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_facRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_facRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_incapacidadRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_incapacidadRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_incapacidadRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_incapacidadRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_horasextraRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_horasextraRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_horasextraRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_horasextraRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_percepcionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_percepcionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_percepcionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_percepcionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_deduccionesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_deduccionesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_deduccionesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_deduccionesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_empleadoRECRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_empleadoRECRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_empleadoRECRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_empleadoRECRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_reciboNominaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_reciboNominaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_reciboNominaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_reciboNominaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_obtener_surtidodetalleRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_obtener_surtidodetalleRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_obtener_surtidodetalleRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_obtener_surtidodetalleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_obtener_envioRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_obtener_envioRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_obtener_envioRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_obtener_envioRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_cargoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_cargoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_cargoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_cargoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_cargoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_cargoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_cargoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_cargoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_impuestos_cargoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_impuestos_cargoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_impuestos_cargoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_impuestos_cargoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_sello_cargoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_sello_cargoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_sello_cargoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_sello_cargoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_metodopago_cargoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_metodopago_cargoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_metodopago_cargoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_metodopago_cargoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_devRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_devRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_devRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_devRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_devolucion_detRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_devolucion_detRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_devolucion_detRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_devolucion_detRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_trasladoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_trasladoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_trasladoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_trasladoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_surtidoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_surtidoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_surtidoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_surtidoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_ordenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_ordenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_ordenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_ordenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_recupera_ordenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_recupera_ordenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_recupera_ordenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_recupera_ordenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_ordenRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_ordenRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_ordenRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_ordenRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_transferenciaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_transferenciaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_transferenciaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_transferenciaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_rep_trasladoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_rep_trasladoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_rep_trasladoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_rep_trasladoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_encabezado_pedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_encabezado_pedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_encabezado_pedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_encabezado_pedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class sp_detalle_pedRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As sp_detalle_pedRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As sp_detalle_pedRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As sp_detalle_pedRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace pvtaDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_recTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_rec"
            tableMapping.ColumnMappings.Add("abnclave", "abnclave")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("TIPO", "TIPO")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_rec"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ABNClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_recDataTable, ByVal ABNClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ABNClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ABNClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ABNClave As String) As pvtaDataSet.sp_detalle_recDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ABNClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ABNClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_recDataTable = New pvtaDataSet.sp_detalle_recDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_edocta_detalleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_edocta_detalle"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Descripción", "Descripción")
            tableMapping.ColumnMappings.Add("Cargo", "Cargo")
            tableMapping.ColumnMappings.Add("Abono", "Abono")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_edocta_detalle"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTEClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inicial", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_edocta_detalleDataTable, ByVal CTEClave As String, ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CTEClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CTEClave,String)
            End If
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CTEClave As String, ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As pvtaDataSet.sp_edocta_detalleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CTEClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CTEClave,String)
            End If
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As pvtaDataSet.sp_edocta_detalleDataTable = New pvtaDataSet.sp_edocta_detalleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_edocta_encTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_edocta_enc"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            tableMapping.ColumnMappings.Add("DiasCredito", "DiasCredito")
            tableMapping.ColumnMappings.Add("Puntos", "Puntos")
            tableMapping.ColumnMappings.Add("Tel1", "Tel1")
            tableMapping.ColumnMappings.Add("Tel2", "Tel2")
            tableMapping.ColumnMappings.Add("Email", "Email")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_edocta_enc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CTEClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_edocta_encDataTable, ByVal CTEClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CTEClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CTEClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CTEClave As String) As pvtaDataSet.sp_edocta_encDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CTEClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CTEClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_edocta_encDataTable = New pvtaDataSet.sp_edocta_encDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_edoprv_detalleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_edoprv_detalle"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Descripción", "Descripción")
            tableMapping.ColumnMappings.Add("Cargo", "Cargo")
            tableMapping.ColumnMappings.Add("Abono", "Abono")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_edoprv_detalle"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRVClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inicial", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_edoprv_detalleDataTable, ByVal PRVClave As String, ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PRVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PRVClave,String)
            End If
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PRVClave As String, ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As pvtaDataSet.sp_edoprv_detalleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PRVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PRVClave,String)
            End If
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As pvtaDataSet.sp_edoprv_detalleDataTable = New pvtaDataSet.sp_edoprv_detalleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_edoprv_encTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_edoprv_enc"
            tableMapping.ColumnMappings.Add("PRVClave", "PRVClave")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoPrv", "SaldoPrv")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            tableMapping.ColumnMappings.Add("DiasCredito", "DiasCredito")
            tableMapping.ColumnMappings.Add("Tel1", "Tel1")
            tableMapping.ColumnMappings.Add("Tel2", "Tel2")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("Contacto", "Contacto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_edoprv_enc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PRVClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_edoprv_encDataTable, ByVal PRVClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PRVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PRVClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal PRVClave As String) As pvtaDataSet.sp_edoprv_encDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (PRVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PRVClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_edoprv_encDataTable = New pvtaDataSet.sp_edoprv_encDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_muestra_loteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_muestra_lote"
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("CveCte", "CveCte")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("CvePro", "CvePro")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("Lote", "Lote")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Entrada", "Entrada")
            tableMapping.ColumnMappings.Add("Salida", "Salida")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_muestra_lote"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lote", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PROClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALMClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_muestra_loteDataTable, ByVal Lote As String, ByVal PROClave As String, ByVal ALMClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lote Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lote,String)
            End If
            If (PROClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROClave,String)
            End If
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ALMClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Lote As String, ByVal PROClave As String, ByVal ALMClave As String) As pvtaDataSet.sp_muestra_loteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lote Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lote,String)
            End If
            If (PROClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(PROClave,String)
            End If
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(ALMClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_muestra_loteDataTable = New pvtaDataSet.sp_muestra_loteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_listaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_lista"
            tableMapping.ColumnMappings.Add("NLista", "NLista")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_lista"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lista", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_listaDataTable, ByVal Lista As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lista Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lista,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Lista As String) As pvtaDataSet.sp_rep_listaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lista Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lista,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_listaDataTable = New pvtaDataSet.sp_rep_listaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_rangoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_rango"
            tableMapping.ColumnMappings.Add("Inicial", "Inicial")
            tableMapping.ColumnMappings.Add("Final", "Final")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_rango"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Inicial", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Final", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_rangoDataTable, ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Inicial As Global.System.Nullable(Of Date), ByVal Final As Global.System.Nullable(Of Date)) As pvtaDataSet.sp_rep_rangoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Inicial.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Inicial.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Final.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Final.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As pvtaDataSet.sp_rep_rangoDataTable = New pvtaDataSet.sp_rep_rangoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_preciosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_precios"
            tableMapping.ColumnMappings.Add("CLAClave", "CLAClave")
            tableMapping.ColumnMappings.Add("CLNombre", "CLNombre")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("NumParte", "NumParte")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("TOrigen", "TOrigen")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.pvtaConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_precios"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lista", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Linea", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sublinea", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_preciosDataTable, ByVal Lista As String, ByVal Linea As String, ByVal Sublinea As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lista Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lista,String)
            End If
            If (Linea Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Linea,String)
            End If
            If (Sublinea Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Sublinea,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Lista As String, ByVal Linea As String, ByVal Sublinea As String) As pvtaDataSet.sp_rep_preciosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Lista Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Lista,String)
            End If
            If (Linea Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(Linea,String)
            End If
            If (Sublinea Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(Sublinea,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_preciosDataTable = New pvtaDataSet.sp_rep_preciosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_ingresoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_ingreso"
            tableMapping.ColumnMappings.Add("INGClave", "INGClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("Referencia", "Referencia")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Registro", "Registro")
            tableMapping.ColumnMappings.Add("Autorizo", "Autorizo")
            tableMapping.ColumnMappings.Add("Notas", "Notas")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("CEstado", "CEstado")
            tableMapping.ColumnMappings.Add("CAlmacen", "CAlmacen")
            tableMapping.ColumnMappings.Add("CRegistro", "CRegistro")
            tableMapping.ColumnMappings.Add("CAutorizo", "CAutorizo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_ingreso"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INGClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_ingresoDataTable, ByVal INGClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INGClave As String) As pvtaDataSet.sp_rep_ingresoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_ingresoDataTable = New pvtaDataSet.sp_rep_ingresoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_detalle_ingresoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_detalle_ingreso"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("GTIN", "GTIN")
            tableMapping.ColumnMappings.Add("UNDClave", "UNDClave")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_detalle_ingreso"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INGClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_detalle_ingresoDataTable, ByVal INGClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INGClave As String) As pvtaDataSet.sp_rep_detalle_ingresoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_detalle_ingresoDataTable = New pvtaDataSet.sp_rep_detalle_ingresoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_logo_companiaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_logo_compania"
            tableMapping.ColumnMappings.Add("logo", "logo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_logo_compania"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_logo_companiaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As pvtaDataSet.sp_logo_companiaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As pvtaDataSet.sp_logo_companiaDataTable = New pvtaDataSet.sp_logo_companiaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_publicidadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_publicidad"
            tableMapping.ColumnMappings.Add("Publicidad", "Publicidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_publicidad"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SUCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_publicidadDataTable, ByVal SUCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (SUCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal SUCClave As String) As pvtaDataSet.sp_recupera_publicidadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (SUCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(SUCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_publicidadDataTable = New pvtaDataSet.sp_recupera_publicidadDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_recTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_rec"
            tableMapping.ColumnMappings.Add("ABNClave", "ABNClave")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("CTEClave", "CTEClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("TipoPago", "TipoPago")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            tableMapping.ColumnMappings.Add("BNKClave", "BNKClave")
            tableMapping.ColumnMappings.Add("Referencia", "Referencia")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            tableMapping.ColumnMappings.Add("Baja", "Baja")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("FormaPago", "FormaPago")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_rec"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ABNClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_recDataTable, ByVal ABNClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ABNClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ABNClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ABNClave As String) As pvtaDataSet.sp_encabezado_recDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ABNClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ABNClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_recDataTable = New pvtaDataSet.sp_encabezado_recDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_transferenciaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_transferencia"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_transferencia"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVAClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_transferenciaDataTable, ByVal MVAClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MVAClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MVAClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MVAClave As String) As pvtaDataSet.sp_detalle_transferenciaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MVAClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MVAClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_transferenciaDataTable = New pvtaDataSet.sp_detalle_transferenciaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_referencia_facturaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_referencia_factura"
            tableMapping.ColumnMappings.Add("NCClave", "NCClave")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_referencia_factura"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_referencia_facturaDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_referencia_facturaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_referencia_facturaDataTable = New pvtaDataSet.sp_referencia_facturaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_detalle_ubcingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_detalle_ubcing"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("UBCClave", "UBCClave")
            tableMapping.ColumnMappings.Add("Posicion", "Posicion")
            tableMapping.ColumnMappings.Add("Columna", "Columna")
            tableMapping.ColumnMappings.Add("Nivel", "Nivel")
            tableMapping.ColumnMappings.Add("ESTClave", "ESTClave")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_detalle_ubcing"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@INGClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_detalle_ubcingDataTable, ByVal INGClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal INGClave As String) As pvtaDataSet.sp_rep_detalle_ubcingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (INGClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(INGClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_detalle_ubcingDataTable = New pvtaDataSet.sp_rep_detalle_ubcingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_busca_prod_ubcTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_busca_prod_ubc"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("C.BARRAS", "C_BARRAS")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Existencia", "Existencia")
            tableMapping.ColumnMappings.Add("Apartado", "Apartado")
            tableMapping.ColumnMappings.Add("Minimo", "Minimo")
            tableMapping.ColumnMappings.Add("Maximo", "Maximo")
            tableMapping.ColumnMappings.Add("Reorden", "Reorden")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString1
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_busca_prod_ubc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALMClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBCClave", Global.System.Data.SqlDbType.VarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_busca_prod_ubcDataTable, ByVal ALMClave As String, ByVal UBCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ALMClave,String)
            End If
            If (UBCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(UBCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ALMClave As String, ByVal UBCClave As String) As pvtaDataSet.sp_busca_prod_ubcDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ALMClave,String)
            End If
            If (UBCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(UBCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_busca_prod_ubcDataTable = New pvtaDataSet.sp_busca_prod_ubcDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_ubaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_uba"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("EST", "EST")
            tableMapping.ColumnMappings.Add("Columna", "Columna")
            tableMapping.ColumnMappings.Add("Nivel", "Nivel")
            tableMapping.ColumnMappings.Add("Posicion", "Posicion")
            tableMapping.ColumnMappings.Add("Ubicación", "Ubicación")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_uba"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ALMClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UBCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_ubaDataTable, ByVal ALMClave As String, ByVal UBCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ALMClave,String)
            End If
            If (UBCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(UBCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ALMClave As String, ByVal UBCClave As String) As pvtaDataSet.sp_rep_ubaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ALMClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ALMClave,String)
            End If
            If (UBCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(UBCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_ubaDataTable = New pvtaDataSet.sp_rep_ubaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_sello_facTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_sello_fac"
            tableMapping.ColumnMappings.Add("FACClave", "FACClave")
            tableMapping.ColumnMappings.Add("cadenaOriginal", "cadenaOriginal")
            tableMapping.ColumnMappings.Add("Sello", "Sello")
            tableMapping.ColumnMappings.Add("Certificado64", "Certificado64")
            tableMapping.ColumnMappings.Add("CBB", "CBB")
            tableMapping.ColumnMappings.Add("UUID", "UUID")
            tableMapping.ColumnMappings.Add("SelloSAT", "SelloSAT")
            tableMapping.ColumnMappings.Add("CertificadoSAT", "CertificadoSAT")
            tableMapping.ColumnMappings.Add("fechaTimbrado", "fechaTimbrado")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_sello_fac"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FACClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_sello_facDataTable, ByVal FACClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FACClave As String) As pvtaDataSet.sp_sello_facDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_sello_facDataTable = New pvtaDataSet.sp_sello_facDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_sello_ncTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_sello_nc"
            tableMapping.ColumnMappings.Add("NCClave", "NCClave")
            tableMapping.ColumnMappings.Add("cadenaOriginal", "cadenaOriginal")
            tableMapping.ColumnMappings.Add("Sello", "Sello")
            tableMapping.ColumnMappings.Add("Certificado64", "Certificado64")
            tableMapping.ColumnMappings.Add("CBB", "CBB")
            tableMapping.ColumnMappings.Add("UUID", "UUID")
            tableMapping.ColumnMappings.Add("SelloSAT", "SelloSAT")
            tableMapping.ColumnMappings.Add("CertificadoSAT", "CertificadoSAT")
            tableMapping.ColumnMappings.Add("fechaTimbrado", "fechaTimbrado")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_sello_nc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_sello_ncDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_sello_ncDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_sello_ncDataTable = New pvtaDataSet.sp_sello_ncDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_ncTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_nc"
            tableMapping.ColumnMappings.Add("NCClave", "NCClave")
            tableMapping.ColumnMappings.Add("FACClave", "FACClave")
            tableMapping.ColumnMappings.Add("CTEClave", "CTEClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("TipoCF", "TipoCF")
            tableMapping.ColumnMappings.Add("VersionCF", "VersionCF")
            tableMapping.ColumnMappings.Add("RegimenFiscal", "RegimenFiscal")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("Atendio", "Atendio")
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("noAprobacion", "noAprobacion")
            tableMapping.ColumnMappings.Add("anoAprobacion", "anoAprobacion")
            tableMapping.ColumnMappings.Add("fechaAprobacion", "fechaAprobacion")
            tableMapping.ColumnMappings.Add("formaDePago", "formaDePago")
            tableMapping.ColumnMappings.Add("metodoPago", "metodoPago")
            tableMapping.ColumnMappings.Add("noCertificado", "noCertificado")
            tableMapping.ColumnMappings.Add("motivo", "motivo")
            tableMapping.ColumnMappings.Add("porcDesc", "porcDesc")
            tableMapping.ColumnMappings.Add("descripcion", "descripcion")
            tableMapping.ColumnMappings.Add("costo", "costo")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            tableMapping.ColumnMappings.Add("impuestoTot", "impuestoTot")
            tableMapping.ColumnMappings.Add("descuentoTot", "descuentoTot")
            tableMapping.ColumnMappings.Add("total", "total")
            tableMapping.ColumnMappings.Add("tipoCertificado", "tipoCertificado")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("MONClave", "MONClave")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("rCalle", "rCalle")
            tableMapping.ColumnMappings.Add("rDomicilio1", "rDomicilio1")
            tableMapping.ColumnMappings.Add("rDomicilio2", "rDomicilio2")
            tableMapping.ColumnMappings.Add("sCalle", "sCalle")
            tableMapping.ColumnMappings.Add("sDomicilio1", "sDomicilio1")
            tableMapping.ColumnMappings.Add("sDomicilio2", "sDomicilio2")
            tableMapping.ColumnMappings.Add("Compania", "Compania")
            tableMapping.ColumnMappings.Add("cRFC", "cRFC")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("eCalle", "eCalle")
            tableMapping.ColumnMappings.Add("eDomicilio1", "eDomicilio1")
            tableMapping.ColumnMappings.Add("eDomicilio2", "eDomicilio2")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_nc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_ncDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_encabezado_ncDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_ncDataTable = New pvtaDataSet.sp_encabezado_ncDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_impuestos_facTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_impuestos_fac"
            tableMapping.ColumnMappings.Add("FACClave", "FACClave")
            tableMapping.ColumnMappings.Add("Impuesto", "Impuesto")
            tableMapping.ColumnMappings.Add("Tasa", "Tasa")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_impuestos_fac"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FACClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_impuestos_facDataTable, ByVal FACClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FACClave As String) As pvtaDataSet.sp_impuestos_facDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_impuestos_facDataTable = New pvtaDataSet.sp_impuestos_facDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_nc_impuestosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_nc_impuestos"
            tableMapping.ColumnMappings.Add("NCClave", "NCClave")
            tableMapping.ColumnMappings.Add("Impuesto", "Impuesto")
            tableMapping.ColumnMappings.Add("Tasa", "Tasa")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_nc_impuestos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_nc_impuestosDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_nc_impuestosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_nc_impuestosDataTable = New pvtaDataSet.sp_nc_impuestosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_metodopago_facTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_metodopago_fac"
            tableMapping.ColumnMappings.Add("MetodoPago", "MetodoPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_metodopago_fac"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FACClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_metodopago_facDataTable, ByVal FACClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FACClave As String) As pvtaDataSet.sp_metodopago_facDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_metodopago_facDataTable = New pvtaDataSet.sp_metodopago_facDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_metodopago_ncTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_metodopago_nc"
            tableMapping.ColumnMappings.Add("MetodoPago", "MetodoPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_metodopago_nc"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_metodopago_ncDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_metodopago_ncDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_metodopago_ncDataTable = New pvtaDataSet.sp_metodopago_ncDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_liq_generalTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_liq_general"
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("DiaTrabajo", "DiaTrabajo")
            tableMapping.ColumnMappings.Add("FechaApertura", "FechaApertura")
            tableMapping.ColumnMappings.Add("FechaCierre", "FechaCierre")
            tableMapping.ColumnMappings.Add("Liquidacion", "Liquidacion")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            tableMapping.ColumnMappings.Add("ClaveUsuario", "ClaveUsuario")
            tableMapping.ColumnMappings.Add("NombreUsuario", "NombreUsuario")
            tableMapping.ColumnMappings.Add("ClaveCaja", "ClaveCaja")
            tableMapping.ColumnMappings.Add("NombreCaja", "NombreCaja")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_liq_general"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_liq_generalDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_liq_generalDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_liq_generalDataTable = New pvtaDataSet.sp_liq_generalDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_liq_corteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_liq_corte"
            tableMapping.ColumnMappings.Add("Concepto", "Concepto")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("Ingreso", "Ingreso")
            tableMapping.ColumnMappings.Add("Egreso", "Egreso")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_liq_corte"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_liq_corteDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_liq_corteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_liq_corteDataTable = New pvtaDataSet.sp_liq_corteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_liq_pagosTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_liq_pagos"
            tableMapping.ColumnMappings.Add("Concepto", "Concepto")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_liq_pagos"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_liq_pagosDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_liq_pagosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_liq_pagosDataTable = New pvtaDataSet.sp_liq_pagosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_movimientos_liqTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_movimientos_liq"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Inicial", "Inicial")
            tableMapping.ColumnMappings.Add("Cargas", "Cargas")
            tableMapping.ColumnMappings.Add("Descargas", "Descargas")
            tableMapping.ColumnMappings.Add("Ventas", "Ventas")
            tableMapping.ColumnMappings.Add("Devoluciones", "Devoluciones")
            tableMapping.ColumnMappings.Add("Existencia", "Existencia")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_movimientos_liq"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_movimientos_liqDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_movimientos_liqDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_movimientos_liqDataTable = New pvtaDataSet.sp_movimientos_liqDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_liq_comision_prodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_liq_comision_prod"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("ClaveComision", "ClaveComision")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Devoluciones", "Devoluciones")
            tableMapping.ColumnMappings.Add("Porcentaje", "Porcentaje")
            tableMapping.ColumnMappings.Add("Comision", "Comision")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_liq_comision_prod"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_liq_comision_prodDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_liq_comision_prodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_liq_comision_prodDataTable = New pvtaDataSet.sp_liq_comision_prodDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_liq_comision_vtaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_liq_comision_vta"
            tableMapping.ColumnMappings.Add("Venta", "Venta")
            tableMapping.ColumnMappings.Add("ClaveComision", "ClaveComision")
            tableMapping.ColumnMappings.Add("Porcentaje", "Porcentaje")
            tableMapping.ColumnMappings.Add("Comision", "Comision")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_liq_comision_vta"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LIQClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_liq_comision_vtaDataTable, ByVal LIQClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal LIQClave As String) As pvtaDataSet.sp_liq_comision_vtaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (LIQClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LIQClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_liq_comision_vtaDataTable = New pvtaDataSet.sp_liq_comision_vtaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_facTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_fac"
            tableMapping.ColumnMappings.Add("DFAClave", "DFAClave")
            tableMapping.ColumnMappings.Add("FACClave", "FACClave")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("PrecioBruto", "PrecioBruto")
            tableMapping.ColumnMappings.Add("DescuentoImp", "DescuentoImp")
            tableMapping.ColumnMappings.Add("ImpuestoImp", "ImpuestoImp")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CantDev", "CantDev")
            tableMapping.ColumnMappings.Add("SubTotalPartida", "SubTotalPartida")
            tableMapping.ColumnMappings.Add("TotalPartida", "TotalPartida")
            tableMapping.ColumnMappings.Add("PuntosImp", "PuntosImp")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Descripción", "Descripción")
            tableMapping.ColumnMappings.Add("Detalle", "Detalle")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_fac"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FACClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_facDataTable, ByVal FACClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FACClave As String) As pvtaDataSet.sp_detalle_facDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_facDataTable = New pvtaDataSet.sp_detalle_facDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_nc_detalleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_nc_detalle"
            tableMapping.ColumnMappings.Add("DNCClave", "DNCClave")
            tableMapping.ColumnMappings.Add("NCClave", "NCClave")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("PrecioBruto", "PrecioBruto")
            tableMapping.ColumnMappings.Add("DescuentoImp", "DescuentoImp")
            tableMapping.ColumnMappings.Add("ImpuestoImp", "ImpuestoImp")
            tableMapping.ColumnMappings.Add("PuntosImp", "PuntosImp")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("SubtotalPartida", "SubtotalPartida")
            tableMapping.ColumnMappings.Add("TotalPartida", "TotalPartida")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Descripción", "Descripción")
            tableMapping.ColumnMappings.Add("Detalle", "Detalle")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_nc_detalle"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_nc_detalleDataTable, ByVal NCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal NCClave As String) As pvtaDataSet.sp_nc_detalleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (NCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(NCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_nc_detalleDataTable = New pvtaDataSet.sp_nc_detalleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_facTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_fac"
            tableMapping.ColumnMappings.Add("FacturaID", "FacturaID")
            tableMapping.ColumnMappings.Add("FACClave", "FACClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("TipoCF", "TipoCF")
            tableMapping.ColumnMappings.Add("VersionCF", "VersionCF")
            tableMapping.ColumnMappings.Add("RegimenFiscal", "RegimenFiscal")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("Facturo", "Facturo")
            tableMapping.ColumnMappings.Add("CTEClave", "CTEClave")
            tableMapping.ColumnMappings.Add("credito", "credito")
            tableMapping.ColumnMappings.Add("diasCredito", "diasCredito")
            tableMapping.ColumnMappings.Add("fechaFactura", "fechaFactura")
            tableMapping.ColumnMappings.Add("noAprobacion", "noAprobacion")
            tableMapping.ColumnMappings.Add("anoAprobacion", "anoAprobacion")
            tableMapping.ColumnMappings.Add("fechaAprobacion", "fechaAprobacion")
            tableMapping.ColumnMappings.Add("formaDePago", "formaDePago")
            tableMapping.ColumnMappings.Add("noCertificado", "noCertificado")
            tableMapping.ColumnMappings.Add("fechaVencimiento", "fechaVencimiento")
            tableMapping.ColumnMappings.Add("costoTot", "costoTot")
            tableMapping.ColumnMappings.Add("subTotal", "subTotal")
            tableMapping.ColumnMappings.Add("impuestoTot", "impuestoTot")
            tableMapping.ColumnMappings.Add("descuentoTot", "descuentoTot")
            tableMapping.ColumnMappings.Add("PuntosTot", "PuntosTot")
            tableMapping.ColumnMappings.Add("total", "total")
            tableMapping.ColumnMappings.Add("saldo", "saldo")
            tableMapping.ColumnMappings.Add("desglosar", "desglosar")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("tipo", "tipo")
            tableMapping.ColumnMappings.Add("MONClave", "MONClave")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Notas", "Notas")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("rCalle", "rCalle")
            tableMapping.ColumnMappings.Add("rDomicilio1", "rDomicilio1")
            tableMapping.ColumnMappings.Add("rDomicilio2", "rDomicilio2")
            tableMapping.ColumnMappings.Add("sCalle", "sCalle")
            tableMapping.ColumnMappings.Add("sDomicilio1", "sDomicilio1")
            tableMapping.ColumnMappings.Add("sDomicilio2", "sDomicilio2")
            tableMapping.ColumnMappings.Add("Compania", "Compania")
            tableMapping.ColumnMappings.Add("cRFC", "cRFC")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("eCalle", "eCalle")
            tableMapping.ColumnMappings.Add("eDomicilio1", "eDomicilio1")
            tableMapping.ColumnMappings.Add("eDomicilio2", "eDomicilio2")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_fac"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FACClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_facDataTable, ByVal FACClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal FACClave As String) As pvtaDataSet.sp_encabezado_facDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FACClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(FACClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_facDataTable = New pvtaDataSet.sp_encabezado_facDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_incapacidadTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_incapacidad"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Dias", "Dias")
            tableMapping.ColumnMappings.Add("TipoIncapacidad", "TipoIncapacidad")
            tableMapping.ColumnMappings.Add("Descuento", "Descuento")
            tableMapping.ColumnMappings.Add("CONClave", "CONClave")
            tableMapping.ColumnMappings.Add("REDClave", "REDClave")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_incapacidad"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_incapacidadDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_recupera_incapacidadDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_incapacidadDataTable = New pvtaDataSet.sp_recupera_incapacidadDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_horasextraTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_horasextra"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Dias", "Dias")
            tableMapping.ColumnMappings.Add("HorasExtra", "HorasExtra")
            tableMapping.ColumnMappings.Add("ImportePagado", "ImportePagado")
            tableMapping.ColumnMappings.Add("CONClave", "CONClave")
            tableMapping.ColumnMappings.Add("REDClave", "REDClave")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_horasextra"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_horasextraDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_recupera_horasextraDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_horasextraDataTable = New pvtaDataSet.sp_recupera_horasextraDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_percepcionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_percepciones"
            tableMapping.ColumnMappings.Add("TipoPercepcion", "TipoPercepcion")
            tableMapping.ColumnMappings.Add("ClaveP", "ClaveP")
            tableMapping.ColumnMappings.Add("ConceptoP", "ConceptoP")
            tableMapping.ColumnMappings.Add("ImpGravadoP", "ImpGravadoP")
            tableMapping.ColumnMappings.Add("ImpExentoP", "ImpExentoP")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_percepciones"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_percepcionesDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_recupera_percepcionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_percepcionesDataTable = New pvtaDataSet.sp_recupera_percepcionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_deduccionesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_deducciones"
            tableMapping.ColumnMappings.Add("TipoDeduccion", "TipoDeduccion")
            tableMapping.ColumnMappings.Add("ClaveD", "ClaveD")
            tableMapping.ColumnMappings.Add("ConceptoD", "ConceptoD")
            tableMapping.ColumnMappings.Add("ImpGravadoD", "ImpGravadoD")
            tableMapping.ColumnMappings.Add("ImpExentoD", "ImpExentoD")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_deducciones"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_deduccionesDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_recupera_deduccionesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_deduccionesDataTable = New pvtaDataSet.sp_recupera_deduccionesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_empleadoRECTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_empleadoREC"
            tableMapping.ColumnMappings.Add("NumEmpleado", "NumEmpleado")
            tableMapping.ColumnMappings.Add("NombreCompleto", "NombreCompleto")
            tableMapping.ColumnMappings.Add("rRFC", "rRFC")
            tableMapping.ColumnMappings.Add("NumSeguridadSocial", "NumSeguridadSocial")
            tableMapping.ColumnMappings.Add("CURP", "CURP")
            tableMapping.ColumnMappings.Add("Departamento", "Departamento")
            tableMapping.ColumnMappings.Add("Puesto", "Puesto")
            tableMapping.ColumnMappings.Add("CLABE", "CLABE")
            tableMapping.ColumnMappings.Add("SalarioBaseCotAport", "SalarioBaseCotAport")
            tableMapping.ColumnMappings.Add("SalarioDiarioIntegrado", "SalarioDiarioIntegrado")
            tableMapping.ColumnMappings.Add("rCalle", "rCalle")
            tableMapping.ColumnMappings.Add("rDomicilio1", "rDomicilio1")
            tableMapping.ColumnMappings.Add("rDomicilio2", "rDomicilio2")
            tableMapping.ColumnMappings.Add("TipoRegimen", "TipoRegimen")
            tableMapping.ColumnMappings.Add("TipoJornada", "TipoJornada")
            tableMapping.ColumnMappings.Add("TipoContrato", "TipoContrato")
            tableMapping.ColumnMappings.Add("PeriodicidadPago", "PeriodicidadPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_empleadoREC"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_empleadoRECDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_recupera_empleadoRECDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_empleadoRECDataTable = New pvtaDataSet.sp_recupera_empleadoRECDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_reciboNominaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_reciboNomina"
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("RegimenFiscal", "RegimenFiscal")
            tableMapping.ColumnMappings.Add("FechaPago", "FechaPago")
            tableMapping.ColumnMappings.Add("fechaRecibo", "fechaRecibo")
            tableMapping.ColumnMappings.Add("formaDePago", "formaDePago")
            tableMapping.ColumnMappings.Add("noCertificado", "noCertificado")
            tableMapping.ColumnMappings.Add("MONClave", "MONClave")
            tableMapping.ColumnMappings.Add("MetodoPago", "MetodoPago")
            tableMapping.ColumnMappings.Add("TipoBanco", "TipoBanco")
            tableMapping.ColumnMappings.Add("Referencia", "Referencia")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            tableMapping.ColumnMappings.Add("NumNomina", "NumNomina")
            tableMapping.ColumnMappings.Add("FechaInicialPago", "FechaInicialPago")
            tableMapping.ColumnMappings.Add("FechaFinalPago", "FechaFinalPago")
            tableMapping.ColumnMappings.Add("NumDiasPagados", "NumDiasPagados")
            tableMapping.ColumnMappings.Add("Compania", "Compania")
            tableMapping.ColumnMappings.Add("cRFC", "cRFC")
            tableMapping.ColumnMappings.Add("registroPatronal", "registroPatronal")
            tableMapping.ColumnMappings.Add("riesgoPuesto", "riesgoPuesto")
            tableMapping.ColumnMappings.Add("eCalle", "eCalle")
            tableMapping.ColumnMappings.Add("eDomicilio1", "eDomicilio1")
            tableMapping.ColumnMappings.Add("eDomicilio2", "eDomicilio2")
            tableMapping.ColumnMappings.Add("sCalle", "sCalle")
            tableMapping.ColumnMappings.Add("sDomicilio1", "sDomicilio1")
            tableMapping.ColumnMappings.Add("sDomicilio2", "sDomicilio2")
            tableMapping.ColumnMappings.Add("cadenaOriginal", "cadenaOriginal")
            tableMapping.ColumnMappings.Add("Sello", "Sello")
            tableMapping.ColumnMappings.Add("CBB", "CBB")
            tableMapping.ColumnMappings.Add("UUID", "UUID")
            tableMapping.ColumnMappings.Add("SelloSAT", "SelloSAT")
            tableMapping.ColumnMappings.Add("CertificadoSAT", "CertificadoSAT")
            tableMapping.ColumnMappings.Add("fechaTimbrado", "fechaTimbrado")
            tableMapping.ColumnMappings.Add("TotalNetoPagar", "TotalNetoPagar")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_reciboNomina"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_reciboNominaDataTable, ByVal RENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal RENClave As String) As pvtaDataSet.sp_encabezado_reciboNominaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (RENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(RENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_reciboNominaDataTable = New pvtaDataSet.sp_encabezado_reciboNominaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_obtener_surtidodetalleTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_obtener_surtidodetalle"
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("NumParte", "NumParte")
            tableMapping.ColumnMappings.Add("GTIN", "GTIN")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("UBCClave", "UBCClave")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_obtener_surtidodetalle"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_obtener_surtidodetalleDataTable, ByVal VENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal VENClave As String) As pvtaDataSet.sp_obtener_surtidodetalleDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_obtener_surtidodetalleDataTable = New pvtaDataSet.sp_obtener_surtidodetalleDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_obtener_envioTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_obtener_envio"
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            tableMapping.ColumnMappings.Add("Ref", "Ref")
            tableMapping.ColumnMappings.Add("Observaciones", "Observaciones")
            tableMapping.ColumnMappings.Add("fechaPrevista", "fechaPrevista")
            tableMapping.ColumnMappings.Add("fechaEfectiva", "fechaEfectiva")
            tableMapping.ColumnMappings.Add("Ruta", "Ruta")
            tableMapping.ColumnMappings.Add("Referencia", "Referencia")
            tableMapping.ColumnMappings.Add("formaEnvio", "formaEnvio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_obtener_envio"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_obtener_envioDataTable, ByVal VENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal VENClave As String) As pvtaDataSet.sp_obtener_envioDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_obtener_envioDataTable = New pvtaDataSet.sp_obtener_envioDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_cargoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_cargo"
            tableMapping.ColumnMappings.Add("CARClave", "CARClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("TipoCF", "TipoCF")
            tableMapping.ColumnMappings.Add("VersionCF", "VersionCF")
            tableMapping.ColumnMappings.Add("RegimenFiscal", "RegimenFiscal")
            tableMapping.ColumnMappings.Add("Serie", "Serie")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("CTEClave", "CTEClave")
            tableMapping.ColumnMappings.Add("fecha", "fecha")
            tableMapping.ColumnMappings.Add("formaDePago", "formaDePago")
            tableMapping.ColumnMappings.Add("noCertificado", "noCertificado")
            tableMapping.ColumnMappings.Add("subtotal", "subtotal")
            tableMapping.ColumnMappings.Add("impuestoTot", "impuestoTot")
            tableMapping.ColumnMappings.Add("total", "total")
            tableMapping.ColumnMappings.Add("saldo", "saldo")
            tableMapping.ColumnMappings.Add("estado", "estado")
            tableMapping.ColumnMappings.Add("tipo", "tipo")
            tableMapping.ColumnMappings.Add("MONClave", "MONClave")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Notas", "Notas")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("rCalle", "rCalle")
            tableMapping.ColumnMappings.Add("rDomicilio1", "rDomicilio1")
            tableMapping.ColumnMappings.Add("rDomicilio2", "rDomicilio2")
            tableMapping.ColumnMappings.Add("sCalle", "sCalle")
            tableMapping.ColumnMappings.Add("sDomicilio1", "sDomicilio1")
            tableMapping.ColumnMappings.Add("sDomicilio2", "sDomicilio2")
            tableMapping.ColumnMappings.Add("Compania", "Compania")
            tableMapping.ColumnMappings.Add("cRFC", "cRFC")
            tableMapping.ColumnMappings.Add("Telefono", "Telefono")
            tableMapping.ColumnMappings.Add("eCalle", "eCalle")
            tableMapping.ColumnMappings.Add("eDomicilio1", "eDomicilio1")
            tableMapping.ColumnMappings.Add("eDomicilio2", "eDomicilio2")
            tableMapping.ColumnMappings.Add("Moneda", "Moneda")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_cargo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_cargoDataTable, ByVal CARClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CARClave As String) As pvtaDataSet.sp_encabezado_cargoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_cargoDataTable = New pvtaDataSet.sp_encabezado_cargoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_cargoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_cargo"
            tableMapping.ColumnMappings.Add("DCRClave", "DCRClave")
            tableMapping.ColumnMappings.Add("CARClave", "CARClave")
            tableMapping.ColumnMappings.Add("PrecioBruto", "PrecioBruto")
            tableMapping.ColumnMappings.Add("ImpuestoImp", "ImpuestoImp")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("SubTotalPartida", "SubTotalPartida")
            tableMapping.ColumnMappings.Add("TotalPartida", "TotalPartida")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            tableMapping.ColumnMappings.Add("Descripción", "Descripción")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_cargo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_cargoDataTable, ByVal CARClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CARClave As String) As pvtaDataSet.sp_detalle_cargoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_cargoDataTable = New pvtaDataSet.sp_detalle_cargoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_impuestos_cargoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_impuestos_cargo"
            tableMapping.ColumnMappings.Add("CARClave", "CARClave")
            tableMapping.ColumnMappings.Add("Impuesto", "Impuesto")
            tableMapping.ColumnMappings.Add("Tasa", "Tasa")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            tableMapping.ColumnMappings.Add("TipoCambio", "TipoCambio")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_impuestos_cargo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_impuestos_cargoDataTable, ByVal CARClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CARClave As String) As pvtaDataSet.sp_impuestos_cargoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_impuestos_cargoDataTable = New pvtaDataSet.sp_impuestos_cargoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_sello_cargoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_sello_cargo"
            tableMapping.ColumnMappings.Add("CARClave", "CARClave")
            tableMapping.ColumnMappings.Add("cadenaOriginal", "cadenaOriginal")
            tableMapping.ColumnMappings.Add("Sello", "Sello")
            tableMapping.ColumnMappings.Add("Certificado64", "Certificado64")
            tableMapping.ColumnMappings.Add("CBB", "CBB")
            tableMapping.ColumnMappings.Add("UUID", "UUID")
            tableMapping.ColumnMappings.Add("CertificadoSAT", "CertificadoSAT")
            tableMapping.ColumnMappings.Add("fechaTimbrado", "fechaTimbrado")
            tableMapping.ColumnMappings.Add("SelloSAT", "SelloSAT")
            tableMapping.ColumnMappings.Add("versionSAT", "versionSAT")
            tableMapping.ColumnMappings.Add("TipoPAC", "TipoPAC")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_sello_cargo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_sello_cargoDataTable, ByVal CARClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CARClave As String) As pvtaDataSet.sp_sello_cargoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_sello_cargoDataTable = New pvtaDataSet.sp_sello_cargoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_metodopago_cargoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_metodopago_cargo"
            tableMapping.ColumnMappings.Add("MetodoPago", "MetodoPago")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_metodopago_cargo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CARClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_metodopago_cargoDataTable, ByVal CARClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal CARClave As String) As pvtaDataSet.sp_metodopago_cargoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (CARClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(CARClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_metodopago_cargoDataTable = New pvtaDataSet.sp_metodopago_cargoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_devTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_dev"
            tableMapping.ColumnMappings.Add("DEVClave", "DEVClave")
            tableMapping.ColumnMappings.Add("VENClave", "VENClave")
            tableMapping.ColumnMappings.Add("CTEClave", "CTEClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("Atendio", "Atendio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("ImpuestoTot", "ImpuestoTot")
            tableMapping.ColumnMappings.Add("DescuentoTot", "DescuentoTot")
            tableMapping.ColumnMappings.Add("PuntosTot", "PuntosTot")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_dev"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_devDataTable, ByVal DEVClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DEVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DEVClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DEVClave As String) As pvtaDataSet.sp_encabezado_devDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DEVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DEVClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_devDataTable = New pvtaDataSet.sp_encabezado_devDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_devolucion_detTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_devolucion_det"
            tableMapping.ColumnMappings.Add("DDEVClave", "DDEVClave")
            tableMapping.ColumnMappings.Add("DEVClave", "DEVClave")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("PrecioBruto", "PrecioBruto")
            tableMapping.ColumnMappings.Add("DescuentoImp", "DescuentoImp")
            tableMapping.ColumnMappings.Add("ImpuestoImp", "ImpuestoImp")
            tableMapping.ColumnMappings.Add("PuntosImp", "PuntosImp")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("SubtotalPartida", "SubtotalPartida")
            tableMapping.ColumnMappings.Add("TotalPartida", "TotalPartida")
            tableMapping.ColumnMappings.Add("Precio", "Precio")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("NumParte", "NumParte")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString3
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_devolucion_det"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DEVClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_devolucion_detDataTable, ByVal DEVClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DEVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DEVClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal DEVClave As String) As pvtaDataSet.sp_devolucion_detDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (DEVClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DEVClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_devolucion_detDataTable = New pvtaDataSet.sp_devolucion_detDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_trasladoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_traslado"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Unidad", "Unidad")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_traslado"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_trasladoDataTable, ByVal TRSClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TRSClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TRSClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TRSClave As String) As pvtaDataSet.sp_detalle_trasladoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TRSClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TRSClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_trasladoDataTable = New pvtaDataSet.sp_detalle_trasladoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_surtidoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_surtido"
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("PICClave", "PICClave")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_surtido"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Tipo", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DOCClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_surtidoDataTable, ByVal Tipo As Global.System.Nullable(Of Integer), ByVal DOCClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DOCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DOCClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal Tipo As Global.System.Nullable(Of Integer), ByVal DOCClave As String) As pvtaDataSet.sp_encabezado_surtidoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Tipo.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Tipo.Value,Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (DOCClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DOCClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_surtidoDataTable = New pvtaDataSet.sp_encabezado_surtidoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_ordenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_orden"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("Surtido", "Surtido")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("PorcIVA", "PorcIVA")
            tableMapping.ColumnMappings.Add("IVA", "IVA")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("Impuesto", "Impuesto")
            tableMapping.ColumnMappings.Add("Importe", "Importe")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_orden"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_ordenDataTable, ByVal ORDClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ORDClave As String) As pvtaDataSet.sp_detalle_ordenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_ordenDataTable = New pvtaDataSet.sp_detalle_ordenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_recupera_ordenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_recupera_orden"
            tableMapping.ColumnMappings.Add("ORDClave", "ORDClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("Solicita", "Solicita")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("ImpuestoTot", "ImpuestoTot")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Registro", "Registro")
            tableMapping.ColumnMappings.Add("PRVClave", "PRVClave")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Baja", "Baja")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("SUCClave", "SUCClave")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            tableMapping.ColumnMappings.Add("NEstado", "NEstado")
            tableMapping.ColumnMappings.Add("CProveedor", "CProveedor")
            tableMapping.ColumnMappings.Add("NProveedor", "NProveedor")
            tableMapping.ColumnMappings.Add("DiasCredito", "DiasCredito")
            tableMapping.ColumnMappings.Add("DiasEntrega", "DiasEntrega")
            tableMapping.ColumnMappings.Add("Disponible", "Disponible")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("TImpuesto", "TImpuesto")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_recupera_orden"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_recupera_ordenDataTable, ByVal ORDClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ORDClave As String) As pvtaDataSet.sp_recupera_ordenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_recupera_ordenDataTable = New pvtaDataSet.sp_recupera_ordenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_ordenTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_orden"
            tableMapping.ColumnMappings.Add("ORDClave", "ORDClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("Solicita", "Solicita")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("ImpuestoTot", "ImpuestoTot")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Registro", "Registro")
            tableMapping.ColumnMappings.Add("PRVClave", "PRVClave")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Baja", "Baja")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("SUCClave", "SUCClave")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            tableMapping.ColumnMappings.Add("NEstado", "NEstado")
            tableMapping.ColumnMappings.Add("NAlmacen", "NAlmacen")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("NombreCorto", "NombreCorto")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("NoCliente", "NoCliente")
            tableMapping.ColumnMappings.Add("pCalle", "pCalle")
            tableMapping.ColumnMappings.Add("pDomicilio1", "pDomicilio1")
            tableMapping.ColumnMappings.Add("pDomicilio2", "pDomicilio2")
            tableMapping.ColumnMappings.Add("sCalle", "sCalle")
            tableMapping.ColumnMappings.Add("sDomicilio1", "sDomicilio1")
            tableMapping.ColumnMappings.Add("sDomicilio2", "sDomicilio2")
            tableMapping.ColumnMappings.Add("Compania", "Compania")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_orden"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ORDClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_ordenDataTable, ByVal ORDClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal ORDClave As String) As pvtaDataSet.sp_rep_ordenDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (ORDClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ORDClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_ordenDataTable = New pvtaDataSet.sp_rep_ordenDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_transferenciaTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_transferencia"
            tableMapping.ColumnMappings.Add("MVAClave", "MVAClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("ALMDestino", "ALMDestino")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Registro", "Registro")
            tableMapping.ColumnMappings.Add("Autorizo", "Autorizo")
            tableMapping.ColumnMappings.Add("Notas", "Notas")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("CNFClave", "CNFClave")
            tableMapping.ColumnMappings.Add("SUCClave", "SUCClave")
            tableMapping.ColumnMappings.Add("PICClave", "PICClave")
            tableMapping.ColumnMappings.Add("fechaEfectiva", "fechaEfectiva")
            tableMapping.ColumnMappings.Add("Prioridad", "Prioridad")
            tableMapping.ColumnMappings.Add("Solicita", "Solicita")
            tableMapping.ColumnMappings.Add("CEstado", "CEstado")
            tableMapping.ColumnMappings.Add("CTipo", "CTipo")
            tableMapping.ColumnMappings.Add("CAlmacenO", "CAlmacenO")
            tableMapping.ColumnMappings.Add("CAlmacenD", "CAlmacenD")
            tableMapping.ColumnMappings.Add("CRegistro", "CRegistro")
            tableMapping.ColumnMappings.Add("CAutorizo", "CAutorizo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_transferencia"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MVAClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_transferenciaDataTable, ByVal MVAClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MVAClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MVAClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal MVAClave As String) As pvtaDataSet.sp_rep_transferenciaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MVAClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(MVAClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_transferenciaDataTable = New pvtaDataSet.sp_rep_transferenciaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_rep_trasladoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_rep_traslado"
            tableMapping.ColumnMappings.Add("TRSClave", "TRSClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("FechaRegistro", "FechaRegistro")
            tableMapping.ColumnMappings.Add("Motivo", "Motivo")
            tableMapping.ColumnMappings.Add("Notas", "Notas")
            tableMapping.ColumnMappings.Add("SUCClave", "SUCClave")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("SUCDestino", "SUCDestino")
            tableMapping.ColumnMappings.Add("ALMDestino", "ALMDestino")
            tableMapping.ColumnMappings.Add("Registro", "Registro")
            tableMapping.ColumnMappings.Add("Autorizo", "Autorizo")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("CNFClave", "CNFClave")
            tableMapping.ColumnMappings.Add("fechaPrevista", "fechaPrevista")
            tableMapping.ColumnMappings.Add("PICClave", "PICClave")
            tableMapping.ColumnMappings.Add("fechaEfectiva", "fechaEfectiva")
            tableMapping.ColumnMappings.Add("tipoEntrega", "tipoEntrega")
            tableMapping.ColumnMappings.Add("formaEnvio", "formaEnvio")
            tableMapping.ColumnMappings.Add("Prioridad", "Prioridad")
            tableMapping.ColumnMappings.Add("Solicita", "Solicita")
            tableMapping.ColumnMappings.Add("CEstado", "CEstado")
            tableMapping.ColumnMappings.Add("CSucursalO", "CSucursalO")
            tableMapping.ColumnMappings.Add("CSucursalD", "CSucursalD")
            tableMapping.ColumnMappings.Add("CAlmacenO", "CAlmacenO")
            tableMapping.ColumnMappings.Add("CAlmacenD", "CAlmacenD")
            tableMapping.ColumnMappings.Add("CRegistro", "CRegistro")
            tableMapping.ColumnMappings.Add("CAutorizo", "CAutorizo")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_rep_traslado"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TRSClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_rep_trasladoDataTable, ByVal TRSClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TRSClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TRSClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal TRSClave As String) As pvtaDataSet.sp_rep_trasladoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (TRSClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(TRSClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_rep_trasladoDataTable = New pvtaDataSet.sp_rep_trasladoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_encabezado_pedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_encabezado_ped"
            tableMapping.ColumnMappings.Add("VENClave", "VENClave")
            tableMapping.ColumnMappings.Add("Periodo", "Periodo")
            tableMapping.ColumnMappings.Add("Mes", "Mes")
            tableMapping.ColumnMappings.Add("PDVClave", "PDVClave")
            tableMapping.ColumnMappings.Add("Folio", "Folio")
            tableMapping.ColumnMappings.Add("Tipo", "Tipo")
            tableMapping.ColumnMappings.Add("Cliente", "Cliente")
            tableMapping.ColumnMappings.Add("Cajero", "Cajero")
            tableMapping.ColumnMappings.Add("CAJClave", "CAJClave")
            tableMapping.ColumnMappings.Add("CostoTot", "CostoTot")
            tableMapping.ColumnMappings.Add("Subtotal", "Subtotal")
            tableMapping.ColumnMappings.Add("ImpuestoTot", "ImpuestoTot")
            tableMapping.ColumnMappings.Add("DescuentoTot", "DescuentoTot")
            tableMapping.ColumnMappings.Add("RedondeoImp", "RedondeoImp")
            tableMapping.ColumnMappings.Add("PuntosTot", "PuntosTot")
            tableMapping.ColumnMappings.Add("Total", "Total")
            tableMapping.ColumnMappings.Add("Saldo", "Saldo")
            tableMapping.ColumnMappings.Add("Fecha", "Fecha")
            tableMapping.ColumnMappings.Add("FacturaId", "FacturaId")
            tableMapping.ColumnMappings.Add("Estado", "Estado")
            tableMapping.ColumnMappings.Add("Baja", "Baja")
            tableMapping.ColumnMappings.Add("Acreditada", "Acreditada")
            tableMapping.ColumnMappings.Add("Nota", "Nota")
            tableMapping.ColumnMappings.Add("MFechaHora", "MFechaHora")
            tableMapping.ColumnMappings.Add("MUsuarioId", "MUsuarioId")
            tableMapping.ColumnMappings.Add("PICClave", "PICClave")
            tableMapping.ColumnMappings.Add("ALMClave", "ALMClave")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("RazonSocial", "RazonSocial")
            tableMapping.ColumnMappings.Add("id_Fiscal", "id_Fiscal")
            tableMapping.ColumnMappings.Add("LimiteCredito", "LimiteCredito")
            tableMapping.ColumnMappings.Add("SaldoCte", "SaldoCte")
            tableMapping.ColumnMappings.Add("Vendedor", "Vendedor")
            tableMapping.ColumnMappings.Add("Calle", "Calle")
            tableMapping.ColumnMappings.Add("Domicilio1", "Domicilio1")
            tableMapping.ColumnMappings.Add("Domicilio2", "Domicilio2")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_encabezado_ped"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_encabezado_pedDataTable, ByVal VENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal VENClave As String) As pvtaDataSet.sp_encabezado_pedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_encabezado_pedDataTable = New pvtaDataSet.sp_encabezado_pedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class sp_detalle_pedTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "sp_detalle_ped"
            tableMapping.ColumnMappings.Add("DVEClave", "DVEClave")
            tableMapping.ColumnMappings.Add("VENClave", "VENClave")
            tableMapping.ColumnMappings.Add("PROClave", "PROClave")
            tableMapping.ColumnMappings.Add("TProducto", "TProducto")
            tableMapping.ColumnMappings.Add("Costo", "Costo")
            tableMapping.ColumnMappings.Add("PrecioBruto", "PrecioBruto")
            tableMapping.ColumnMappings.Add("PuntosImp", "PuntosImp")
            tableMapping.ColumnMappings.Add("DescuentoImp", "DescuentoImp")
            tableMapping.ColumnMappings.Add("PorcImp", "PorcImp")
            tableMapping.ColumnMappings.Add("ImpuestoImp", "ImpuestoImp")
            tableMapping.ColumnMappings.Add("Cantidad", "Cantidad")
            tableMapping.ColumnMappings.Add("CantDev", "CantDev")
            tableMapping.ColumnMappings.Add("SubTotalPartida", "SubTotalPartida")
            tableMapping.ColumnMappings.Add("TotalPartida", "TotalPartida")
            tableMapping.ColumnMappings.Add("Modificador", "Modificador")
            tableMapping.ColumnMappings.Add("Solicitado", "Solicitado")
            tableMapping.ColumnMappings.Add("UndKilo", "UndKilo")
            tableMapping.ColumnMappings.Add("PREClave", "PREClave")
            tableMapping.ColumnMappings.Add("Apartado", "Apartado")
            tableMapping.ColumnMappings.Add("Clave", "Clave")
            tableMapping.ColumnMappings.Add("NumParte", "NumParte")
            tableMapping.ColumnMappings.Add("Nombre", "Nombre")
            tableMapping.ColumnMappings.Add("Descripcion", "Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.Selling.MySettings.Default.SellingConnectionString4
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "dbo.sp_detalle_ped"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@VENClave", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As pvtaDataSet.sp_detalle_pedDataTable, ByVal VENClave As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal VENClave As String) As pvtaDataSet.sp_detalle_pedDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (VENClave Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(VENClave,String)
            End If
            Dim dataTable As pvtaDataSet.sp_detalle_pedDataTable = New pvtaDataSet.sp_detalle_pedDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
