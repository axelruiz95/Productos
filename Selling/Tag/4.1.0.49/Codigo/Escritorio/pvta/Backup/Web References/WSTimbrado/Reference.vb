'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.5485
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=2.0.50727.5485.
'
Namespace WSTimbrado
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="TimbradoCFDServiceExternalSoap", [Namespace]:="http://tempuri.org/")>  _
    Partial Public Class TimbradoCFDServiceExternal
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private TimbradoCFDStrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TimbradoCFDStrXMLAcuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TimbradoCFDStrXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TimbradoCFDXmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TimbradoCFDXmlAcuseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEstatuUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private TrackingBalanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EnviarXmlCancelacionCFDIUsrOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.Selling.MySettings.Default.Selling_WSTimbrado_TimbradoCFDServiceExternal
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event TimbradoCFDStrCompleted As TimbradoCFDStrCompletedEventHandler
        
        '''<remarks/>
        Public Event TimbradoCFDStrXMLAcuseCompleted As TimbradoCFDStrXMLAcuseCompletedEventHandler
        
        '''<remarks/>
        Public Event TimbradoCFDStrXMLCompleted As TimbradoCFDStrXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event TimbradoCFDXmlCompleted As TimbradoCFDXmlCompletedEventHandler
        
        '''<remarks/>
        Public Event TimbradoCFDXmlAcuseCompleted As TimbradoCFDXmlAcuseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEstatuUserCompleted As GetEstatuUserCompletedEventHandler
        
        '''<remarks/>
        Public Event TrackingBalanceCompleted As TrackingBalanceCompletedEventHandler
        
        '''<remarks/>
        Public Event EnviarXmlCancelacionCFDIUsrCompleted As EnviarXmlCancelacionCFDIUsrCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimbradoCFDStr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimbradoCFDStr(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String) As String
            Dim results() As Object = Me.Invoke("TimbradoCFDStr", New Object() {strXML, strUser, strPass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String)
            Me.TimbradoCFDStrAsync(strXML, strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.TimbradoCFDStrOperationCompleted Is Nothing) Then
                Me.TimbradoCFDStrOperationCompleted = AddressOf Me.OnTimbradoCFDStrOperationCompleted
            End If
            Me.InvokeAsync("TimbradoCFDStr", New Object() {strXML, strUser, strPass}, Me.TimbradoCFDStrOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimbradoCFDStrOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimbradoCFDStrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimbradoCFDStrCompleted(Me, New TimbradoCFDStrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimbradoCFDStrXMLAcuse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimbradoCFDStrXMLAcuse(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String) As RespuestaTimbradoStr
            Dim results() As Object = Me.Invoke("TimbradoCFDStrXMLAcuse", New Object() {strXML, strUser, strPass})
            Return CType(results(0),RespuestaTimbradoStr)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrXMLAcuseAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String)
            Me.TimbradoCFDStrXMLAcuseAsync(strXML, strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrXMLAcuseAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.TimbradoCFDStrXMLAcuseOperationCompleted Is Nothing) Then
                Me.TimbradoCFDStrXMLAcuseOperationCompleted = AddressOf Me.OnTimbradoCFDStrXMLAcuseOperationCompleted
            End If
            Me.InvokeAsync("TimbradoCFDStrXMLAcuse", New Object() {strXML, strUser, strPass}, Me.TimbradoCFDStrXMLAcuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimbradoCFDStrXMLAcuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimbradoCFDStrXMLAcuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimbradoCFDStrXMLAcuseCompleted(Me, New TimbradoCFDStrXMLAcuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimbradoCFDStrXML", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimbradoCFDStrXML(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String) As String
            Dim results() As Object = Me.Invoke("TimbradoCFDStrXML", New Object() {strXML, strUser, strPass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrXMLAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String)
            Me.TimbradoCFDStrXMLAsync(strXML, strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDStrXMLAsync(ByVal strXML As String, ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.TimbradoCFDStrXMLOperationCompleted Is Nothing) Then
                Me.TimbradoCFDStrXMLOperationCompleted = AddressOf Me.OnTimbradoCFDStrXMLOperationCompleted
            End If
            Me.InvokeAsync("TimbradoCFDStrXML", New Object() {strXML, strUser, strPass}, Me.TimbradoCFDStrXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimbradoCFDStrXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimbradoCFDStrXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimbradoCFDStrXMLCompleted(Me, New TimbradoCFDStrXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimbradoCFDXml", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimbradoCFDXml(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("TimbradoCFDXml", New Object() {xmldTimbre, strUser, strPass})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDXmlAsync(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String)
            Me.TimbradoCFDXmlAsync(xmldTimbre, strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDXmlAsync(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.TimbradoCFDXmlOperationCompleted Is Nothing) Then
                Me.TimbradoCFDXmlOperationCompleted = AddressOf Me.OnTimbradoCFDXmlOperationCompleted
            End If
            Me.InvokeAsync("TimbradoCFDXml", New Object() {xmldTimbre, strUser, strPass}, Me.TimbradoCFDXmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimbradoCFDXmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimbradoCFDXmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimbradoCFDXmlCompleted(Me, New TimbradoCFDXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TimbradoCFDXmlAcuse", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TimbradoCFDXmlAcuse(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String) As RespuestaTimbrado
            Dim results() As Object = Me.Invoke("TimbradoCFDXmlAcuse", New Object() {xmldTimbre, strUser, strPass})
            Return CType(results(0),RespuestaTimbrado)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDXmlAcuseAsync(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String)
            Me.TimbradoCFDXmlAcuseAsync(xmldTimbre, strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TimbradoCFDXmlAcuseAsync(ByVal xmldTimbre As System.Xml.XmlNode, ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.TimbradoCFDXmlAcuseOperationCompleted Is Nothing) Then
                Me.TimbradoCFDXmlAcuseOperationCompleted = AddressOf Me.OnTimbradoCFDXmlAcuseOperationCompleted
            End If
            Me.InvokeAsync("TimbradoCFDXmlAcuse", New Object() {xmldTimbre, strUser, strPass}, Me.TimbradoCFDXmlAcuseOperationCompleted, userState)
        End Sub
        
        Private Sub OnTimbradoCFDXmlAcuseOperationCompleted(ByVal arg As Object)
            If (Not (Me.TimbradoCFDXmlAcuseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TimbradoCFDXmlAcuseCompleted(Me, New TimbradoCFDXmlAcuseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetEstatuUser", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEstatuUser(ByVal strUser As String, ByVal strPass As String) As String
            Dim results() As Object = Me.Invoke("GetEstatuUser", New Object() {strUser, strPass})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEstatuUserAsync(ByVal strUser As String, ByVal strPass As String)
            Me.GetEstatuUserAsync(strUser, strPass, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEstatuUserAsync(ByVal strUser As String, ByVal strPass As String, ByVal userState As Object)
            If (Me.GetEstatuUserOperationCompleted Is Nothing) Then
                Me.GetEstatuUserOperationCompleted = AddressOf Me.OnGetEstatuUserOperationCompleted
            End If
            Me.InvokeAsync("GetEstatuUser", New Object() {strUser, strPass}, Me.GetEstatuUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEstatuUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEstatuUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEstatuUserCompleted(Me, New GetEstatuUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/TrackingBalance", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TrackingBalance(ByVal idEmpresa As Integer) As String
            Dim results() As Object = Me.Invoke("TrackingBalance", New Object() {idEmpresa})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TrackingBalanceAsync(ByVal idEmpresa As Integer)
            Me.TrackingBalanceAsync(idEmpresa, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TrackingBalanceAsync(ByVal idEmpresa As Integer, ByVal userState As Object)
            If (Me.TrackingBalanceOperationCompleted Is Nothing) Then
                Me.TrackingBalanceOperationCompleted = AddressOf Me.OnTrackingBalanceOperationCompleted
            End If
            Me.InvokeAsync("TrackingBalance", New Object() {idEmpresa}, Me.TrackingBalanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnTrackingBalanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.TrackingBalanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TrackingBalanceCompleted(Me, New TrackingBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/EnviarXmlCancelacionCFDIUsr", RequestNamespace:="http://tempuri.org/", ResponseNamespace:="http://tempuri.org/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EnviarXmlCancelacionCFDIUsr(<System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal xmlCancelacion() As Byte, ByVal strUser As String, ByVal strPwd As String) As String
            Dim results() As Object = Me.Invoke("EnviarXmlCancelacionCFDIUsr", New Object() {xmlCancelacion, strUser, strPwd})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EnviarXmlCancelacionCFDIUsrAsync(ByVal xmlCancelacion() As Byte, ByVal strUser As String, ByVal strPwd As String)
            Me.EnviarXmlCancelacionCFDIUsrAsync(xmlCancelacion, strUser, strPwd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EnviarXmlCancelacionCFDIUsrAsync(ByVal xmlCancelacion() As Byte, ByVal strUser As String, ByVal strPwd As String, ByVal userState As Object)
            If (Me.EnviarXmlCancelacionCFDIUsrOperationCompleted Is Nothing) Then
                Me.EnviarXmlCancelacionCFDIUsrOperationCompleted = AddressOf Me.OnEnviarXmlCancelacionCFDIUsrOperationCompleted
            End If
            Me.InvokeAsync("EnviarXmlCancelacionCFDIUsr", New Object() {xmlCancelacion, strUser, strPwd}, Me.EnviarXmlCancelacionCFDIUsrOperationCompleted, userState)
        End Sub
        
        Private Sub OnEnviarXmlCancelacionCFDIUsrOperationCompleted(ByVal arg As Object)
            If (Not (Me.EnviarXmlCancelacionCFDIUsrCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EnviarXmlCancelacionCFDIUsrCompleted(Me, New EnviarXmlCancelacionCFDIUsrCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5485"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class RespuestaTimbradoStr
        
        Private statusEnvioField As String
        
        Private cfdiField As String
        
        Private acuseEnvioField As String
        
        '''<comentarios/>
        Public Property StatusEnvio() As String
            Get
                Return Me.statusEnvioField
            End Get
            Set
                Me.statusEnvioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Cfdi() As String
            Get
                Return Me.cfdiField
            End Get
            Set
                Me.cfdiField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property AcuseEnvio() As String
            Get
                Return Me.acuseEnvioField
            End Get
            Set
                Me.acuseEnvioField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5485"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://tempuri.org/")>  _
    Partial Public Class RespuestaTimbrado
        
        Private statusEnvioField As String
        
        Private cfdiField As System.Xml.XmlNode
        
        Private acuseEnvioField As System.Xml.XmlNode
        
        '''<comentarios/>
        Public Property StatusEnvio() As String
            Get
                Return Me.statusEnvioField
            End Get
            Set
                Me.statusEnvioField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Cfdi() As System.Xml.XmlNode
            Get
                Return Me.cfdiField
            End Get
            Set
                Me.cfdiField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property AcuseEnvio() As System.Xml.XmlNode
            Get
                Return Me.acuseEnvioField
            End Get
            Set
                Me.acuseEnvioField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TimbradoCFDStrCompletedEventHandler(ByVal sender As Object, ByVal e As TimbradoCFDStrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimbradoCFDStrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TimbradoCFDStrXMLAcuseCompletedEventHandler(ByVal sender As Object, ByVal e As TimbradoCFDStrXMLAcuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimbradoCFDStrXMLAcuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As RespuestaTimbradoStr
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),RespuestaTimbradoStr)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TimbradoCFDStrXMLCompletedEventHandler(ByVal sender As Object, ByVal e As TimbradoCFDStrXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimbradoCFDStrXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TimbradoCFDXmlCompletedEventHandler(ByVal sender As Object, ByVal e As TimbradoCFDXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimbradoCFDXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Xml.XmlNode
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Xml.XmlNode)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TimbradoCFDXmlAcuseCompletedEventHandler(ByVal sender As Object, ByVal e As TimbradoCFDXmlAcuseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TimbradoCFDXmlAcuseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As RespuestaTimbrado
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),RespuestaTimbrado)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub GetEstatuUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetEstatuUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEstatuUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub TrackingBalanceCompletedEventHandler(ByVal sender As Object, ByVal e As TrackingBalanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TrackingBalanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483")>  _
    Public Delegate Sub EnviarXmlCancelacionCFDIUsrCompletedEventHandler(ByVal sender As Object, ByVal e As EnviarXmlCancelacionCFDIUsrCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5483"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EnviarXmlCancelacionCFDIUsrCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
