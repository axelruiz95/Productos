<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="sqlDataSource1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="customSqlQuery1.Sql" xml:space="preserve">
    <value>Select ALMClave, ALMNombre, RUTClave, VendedorId, VENNombre, EsquemaId, ESQNombre, FechaHoraAlta, ProductoClave, PRONombre, VAD.Descripcion as Unidad, Avg(Precio) as Precio, 
sum(TotalClientesEnRuta) As TotalClientesEnRuta, sum(ClientesVentaEnRuta) As ClientesVentaEnRuta, sum(PiezasEnRuta) as PiezasEnRuta, sum(TotalEnRuta) as TotalEnRuta, 
sum(TotalClienteFueraRuta) as TotalClienteFueraRuta, sum(ClientesVentaFueraRuta) As ClientesVentaFueraRuta, sum(PiezasFueraRuta) as PiezasFueraRuta, sum(TotalFueraRuta) as TotalFueraRuta 
FROM( Select ALMClave, ALMNombre, RUTClave, VendedorId, VENNombre,EsquemaId, ESQNombre, FechaHoraAlta, ProductoClave, PRONombre, TipoUnidad, Precio, 
(select count(distinct ClienteClave) FROM agendavendedor AV where AV.clavecedi = T.ALMClave and AV.VendedorId = T.VendedorId and AV.diaclave = T.DiaClave and AV.rutClave = RUTClave) As TotalClientesEnRuta, 
count(distinct ClienteClave) As ClientesVentaEnRuta,sum(Cantidad) as PiezasEnRuta, sum(Total) as TotalEnRuta, 
(select count(distinct V.ClienteClave) from visita V WHERE V.diaclave =T.DiaClave and V.VendedorId = T.VendedorId  and V.RUTClave = T.RUTClave and FueraFrecuencia = 1) as TotalClienteFueraRuta, 
count(distinct ClienteClave1) As ClientesVentaFueraRuta, sum(Cantidad1) as PiezasFueraRuta, sum(Total1) as TotalFueraRuta, DiaClave 
FROM(SELECT ALM.Clave as ALMClave, ALM.Nombre as ALMNombre, AGV.RUTClave, VEN.VendedorId, VEN.Nombre as VENNombre, ESQ.EsquemaId, ESQ.Nombre as ESQNombre,  
Convert(VarChar(20), TRP.FechaHoraAlta,110) as FechaHoraAlta, TPD.ProductoClave, PRO.Nombre as PRONombre, TPD.TipoUnidad, TPD.Precio, TRP.DiaClave,  
(CASE VIS.FueraFrecuencia WHEN 0 THEN isnull(TPD.Cantidad,0) ELSE 0 END) as Cantidad,  
(CASE VIS.FueraFrecuencia WHEN 0 THEN (isnull((SELECT (TPD.SubTotal - sum(TDS.DesImporte) -((TPD.SubTotal - sum(TDS.DesImporte)) * (TRP.DescVendPor/100)))+ 
(TPD.Impuesto- sum(TDS.DesImpuesto)+ ((TPD.Impuesto- sum(TDS.DesImpuesto))*(TRP.DescVendPor/100))) FROM TpdDes TDS  
WHERE TDS.TransProdId = TRP.TransProdId AND TDS.TransProdDetalleId = TPD.TransProdDetalleId  ), 
(TPD.SubTotal - (TPD.SubTotal * (TRP.DescVendPor/100)))+(TPD.Impuesto - ( TPD.Impuesto*(TRP.DescVendPor/100))))) ELSE 0 END) as Total, 
(CASE VIS.FueraFrecuencia WHEN 0 THEN Vis.ClienteClave Else null end ) as ClienteClave, 
(CASE VIS.FueraFrecuencia WHEN 1 THEN isnull(TPD.Cantidad,-44) ELSE 0 END) as Cantidad1, 
(CASE VIS.FueraFrecuencia WHEN 1 THEN(isnull((SELECT (TPD.SubTotal - sum(TDS.DesImporte) - ((TPD.SubTotal - sum(TDS.DesImporte)) * (TRP.DescVendPor/100)))+ 
(TPD.Impuesto-sum(TDS.DesImpuesto)+((TPD.Impuesto- sum(TDS.DesImpuesto))*(TRP.DescVendPor/100))) FROM TpdDes TDS 
WHERE TDS.TransProdId = TRP.TransProdId AND TDS.TransProdDetalleId = TPD.TransProdDetalleId  ), 
(TPD.SubTotal - (TPD.SubTotal * (TRP.DescVendPor/100)))+(TPD.Impuesto - ( TPD.Impuesto*(TRP.DescVendPor/100))))) ELSE 0 END) as Total1, 
(CASE VIS.FueraFrecuencia WHEN 1 THEN Vis.ClienteClave Else null end ) as ClienteClave1 
FROM TransProd TRP 
INNER JOIN Visita VIS ON VIS.VisitaClave=TRP.VisitaClave AND VIS.DiaClave=TRP.DiaClave  
INNER JOIN Vendedor VEN ON VEN.VendedorId=VIS.VendedorId 
INNER JOIN (SELECT DISTINCT DiaClave, VendedorId, RUTClave, ClaveCEDI FROM AgendaVendedor) AGV ON AGV.DiaClave =TRP.DiaClave AND AGV.VendedorId = VIS.VendedorId AND AGV.RUTClave=VIS.RUTClave 
INNER JOIN Almacen ALM ON ALM.Clave=AGV.ClaveCEDI 
INNER JOIN TransProdDetalle TPD ON TPD.TransProdId=TRP.TransProdId AND TPD.Precio&lt;&gt;0 AND TPD.Subtotal&lt;&gt;0 AND TPD.Total&lt;&gt;0 
INNER JOIN ProductoEsquema PRE ON PRE.ProductoClave=TPD.ProductoClave 
INNER JOIN Esquema ESQ ON ESQ.EsquemaId=PRE.EsquemaId 
INNER JOIN Producto PRO ON PRO.ProductoClave=TPD.ProductoClave 
where 1 = 1  and convert(datetime,Convert(varchar(20),TRP.FechaHoraAlta,112)) between '2018-01-01T00:00:00' and '2018-06-04T00:00:00'  and VIS.RUTClave in ('002','006','007','012','022','024','028','029') AND TRP.Tipo = 1 And TRP.TipoFase &lt;&gt; 0 and tpd.promocion&lt;&gt;2 
) as T group by ALMClave, ALMNombre, RUTClave, VendedorId, VENNombre, EsquemaId, ESQNombre, FechaHoraAlta, ProductoClave, PRONombre, TipoUnidad, Precio, DiaClave 
) as Tabla 
inner join VAVDescripcion VAD on VAD.VARCodigo = 'UNIDADV' and Tabla.TipoUnidad = VAD.VAVClave and VADTipoLenguaje = 'EM' 
group by ALMClave, ALMNombre, RUTClave, VendedorId, VENNombre, EsquemaId, ESQNombre, FechaHoraAlta, ProductoClave, PRONombre, VAD.Descripcion
</value>
  </data>
  <data name="sqlDataSource1.ResultSchemaSerializable" xml:space="preserve">
    <value>PERhdGFTZXQgTmFtZT0ic3FsRGF0YVNvdXJjZTEiPjxWaWV3IE5hbWU9IlF1ZXJ5Ij48RmllbGQgTmFtZT0iQUxNQ2xhdmUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iQUxNTm9tYnJlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlJVVENsYXZlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlZlbmRlZG9ySWQiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iVkVOTm9tYnJlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IkVzcXVlbWFJZCIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJFU1FOb21icmUiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iRmVjaGFIb3JhQWx0YSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJQcm9kdWN0b0NsYXZlIiBUeXBlPSJTdHJpbmciIC8+PEZpZWxkIE5hbWU9IlBST05vbWJyZSIgVHlwZT0iU3RyaW5nIiAvPjxGaWVsZCBOYW1lPSJVbmlkYWQiIFR5cGU9IlN0cmluZyIgLz48RmllbGQgTmFtZT0iUHJlY2lvIiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IlRvdGFsQ2xpZW50ZXNFblJ1dGEiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJDbGllbnRlc1ZlbnRhRW5SdXRhIiBUeXBlPSJJbnQzMiIgLz48RmllbGQgTmFtZT0iUGllemFzRW5SdXRhIiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IlRvdGFsRW5SdXRhIiBUeXBlPSJEb3VibGUiIC8+PEZpZWxkIE5hbWU9IlRvdGFsQ2xpZW50ZUZ1ZXJhUnV0YSIgVHlwZT0iSW50MzIiIC8+PEZpZWxkIE5hbWU9IkNsaWVudGVzVmVudGFGdWVyYVJ1dGEiIFR5cGU9IkludDMyIiAvPjxGaWVsZCBOYW1lPSJQaWV6YXNGdWVyYVJ1dGEiIFR5cGU9IkRvdWJsZSIgLz48RmllbGQgTmFtZT0iVG90YWxGdWVyYVJ1dGEiIFR5cGU9IkRvdWJsZSIgLz48L1ZpZXc+PC9EYXRhU2V0Pg==</value>
  </data>
  <data name="CobeCate.Expression" xml:space="preserve">
    <value>Iif([] [[^.EsquemaId] == [EsquemaId]].Sum([TotalClientesEnRuta]) &lt;= 0, 0, ToDouble([] [[^.EsquemaId] == [EsquemaId]].Sum([ClientesVentaEnRuta])) / ToDouble([] [[^.EsquemaId] == [EsquemaId]].Sum([TotalClientesEnRuta])))</value>
  </data>
  <data name="CobeVend.Expression" xml:space="preserve">
    <value>Iif([] [[^.VendedorId] == [VendedorId]].Sum([TotalClientesEnRuta]) &lt;= 0, 0, ToDouble([] [[^.VendedorId] == [VendedorId]].Sum([ClientesVentaEnRuta])) / ToDouble([] [[^.VendedorId] == [VendedorId]].Sum([TotalClientesEnRuta])))</value>
  </data>
  <data name="CobeRuta.Expression" xml:space="preserve">
    <value>Iif([] [[^.RUTClave] == [RUTClave]].Sum([TotalClientesEnRuta]) &lt;= 0, 0, ToDouble([] [[^.RUTClave] == [RUTClave]].Sum([ClientesVentaEnRuta])) / ToDouble([] [[^.RUTClave] == [RUTClave]].Sum([TotalClientesEnRuta])))</value>
  </data>
  <data name="CobeCEDIS.Expression" xml:space="preserve">
    <value>Iif([] [[^.ALMClave] == [ALMClave]].Sum([TotalClientesEnRuta]) &lt;= 0, 0, ToDouble([] [[^.ALMClave] == [ALMClave]].Sum([ClientesVentaEnRuta])) / ToDouble([] [[^.ALMClave] == [ALMClave]].Sum([TotalClientesEnRuta])))</value>
  </data>
  <data name="CoberFueCate.Expression" xml:space="preserve">
    <value>Iif([] [[^.EsquemaId] == [EsquemaId]].Sum([TotalClienteFueraRuta]) &lt;= 0, 0, ToDouble([] [[^.EsquemaId] == [EsquemaId]].Sum([ClientesVentaFueraRuta])) / ToDouble([] [[^.EsquemaId] == [EsquemaId]].Sum([TotalClienteFueraRuta])))</value>
  </data>
  <data name="CoberFueVend.Expression" xml:space="preserve">
    <value>Iif([] [[^.VendedorId] == [VendedorId]].Sum([TotalClienteFueraRuta]) &lt;= 0, 0, ToDouble([] [[^.VendedorId] == [VendedorId]].Sum([ClientesVentaFueraRuta])) / ToDouble([] [[^.VendedorId] == [VendedorId]].Sum([TotalClienteFueraRuta])))</value>
  </data>
  <data name="CoberFueRuta.Expression" xml:space="preserve">
    <value>Iif([] [[^.RUTClave] == [RUTClave]].Sum([TotalClienteFueraRuta]) &lt;= 0, 0, ToDouble([] [[^.RUTClave] == [RUTClave]].Sum([ClientesVentaFueraRuta])) / ToDouble([] [[^.RUTClave] == [RUTClave]].Sum([TotalClienteFueraRuta])))</value>
  </data>
  <data name="CoberFueCEDIS.Expression" xml:space="preserve">
    <value>Iif([] [[^.ALMClave] == [ALMClave]].Sum([TotalClienteFueraRuta]) &lt;= 0, 0, ToDouble([] [[^.ALMClave] == [ALMClave]].Sum([ClientesVentaFueraRuta])) / ToDouble([] [[^.ALMClave] == [ALMClave]].Sum([TotalClienteFueraRuta])))</value>
  </data>
</root>