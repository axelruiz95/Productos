'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5456
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DatosFiscales"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DatosFiscales
    Inherits Global.System.Data.DataSet
    
    Private tableDatosFiscales As DatosFiscalesDataTable
    
    Private tableVentaAcreditada As VentaAcreditadaDataTable
    
    Private tableRegimenFiscal As RegimenFiscalDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("DatosFiscales")) Is Nothing) Then
                MyBase.Tables.Add(New DatosFiscalesDataTable(ds.Tables("DatosFiscales")))
            End If
            If (Not (ds.Tables("VentaAcreditada")) Is Nothing) Then
                MyBase.Tables.Add(New VentaAcreditadaDataTable(ds.Tables("VentaAcreditada")))
            End If
            If (Not (ds.Tables("RegimenFiscal")) Is Nothing) Then
                MyBase.Tables.Add(New RegimenFiscalDataTable(ds.Tables("RegimenFiscal")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property _DatosFiscales() As DatosFiscalesDataTable
        Get
            Return Me.tableDatosFiscales
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property VentaAcreditada() As VentaAcreditadaDataTable
        Get
            Return Me.tableVentaAcreditada
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RegimenFiscal() As RegimenFiscalDataTable
        Get
            Return Me.tableRegimenFiscal
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DatosFiscales = CType(MyBase.Clone,DatosFiscales)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("DatosFiscales")) Is Nothing) Then
                MyBase.Tables.Add(New DatosFiscalesDataTable(ds.Tables("DatosFiscales")))
            End If
            If (Not (ds.Tables("VentaAcreditada")) Is Nothing) Then
                MyBase.Tables.Add(New VentaAcreditadaDataTable(ds.Tables("VentaAcreditada")))
            End If
            If (Not (ds.Tables("RegimenFiscal")) Is Nothing) Then
                MyBase.Tables.Add(New RegimenFiscalDataTable(ds.Tables("RegimenFiscal")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableDatosFiscales = CType(MyBase.Tables("DatosFiscales"),DatosFiscalesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDatosFiscales) Is Nothing) Then
                Me.tableDatosFiscales.InitVars
            End If
        End If
        Me.tableVentaAcreditada = CType(MyBase.Tables("VentaAcreditada"),VentaAcreditadaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVentaAcreditada) Is Nothing) Then
                Me.tableVentaAcreditada.InitVars
            End If
        End If
        Me.tableRegimenFiscal = CType(MyBase.Tables("RegimenFiscal"),RegimenFiscalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRegimenFiscal) Is Nothing) Then
                Me.tableRegimenFiscal.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DatosFiscales"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DatosFiscales.xsd"
        Me.Locale = New Global.System.Globalization.CultureInfo("en-US")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableDatosFiscales = New DatosFiscalesDataTable
        MyBase.Tables.Add(Me.tableDatosFiscales)
        Me.tableVentaAcreditada = New VentaAcreditadaDataTable
        MyBase.Tables.Add(Me.tableVentaAcreditada)
        Me.tableRegimenFiscal = New RegimenFiscalDataTable
        MyBase.Tables.Add(Me.tableRegimenFiscal)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerialize_DatosFiscales() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeVentaAcreditada() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRegimenFiscal() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DatosFiscales = New DatosFiscales
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub DatosFiscalesRowChangeEventHandler(ByVal sender As Object, ByVal e As DatosFiscalesRowChangeEvent)
    
    Public Delegate Sub VentaAcreditadaRowChangeEventHandler(ByVal sender As Object, ByVal e As VentaAcreditadaRowChangeEvent)
    
    Public Delegate Sub RegimenFiscalRowChangeEventHandler(ByVal sender As Object, ByVal e As RegimenFiscalRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DatosFiscalesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnNumCertificado As Global.System.Data.DataColumn
        
        Private columnAprobacion As Global.System.Data.DataColumn
        
        Private columnAnioAprobacion As Global.System.Data.DataColumn
        
        Private columnRazonSocial As Global.System.Data.DataColumn
        
        Private columnRFC As Global.System.Data.DataColumn
        
        Private columnTelefonoContacto As Global.System.Data.DataColumn
        
        Private columnCalle As Global.System.Data.DataColumn
        
        Private columnNumExt As Global.System.Data.DataColumn
        
        Private columnNumInt As Global.System.Data.DataColumn
        
        Private columnColonia As Global.System.Data.DataColumn
        
        Private columnCodigoPostal As Global.System.Data.DataColumn
        
        Private columnReferenciaDom As Global.System.Data.DataColumn
        
        Private columnLocalidad As Global.System.Data.DataColumn
        
        Private columnMunicipio As Global.System.Data.DataColumn
        
        Private columnEntidad As Global.System.Data.DataColumn
        
        Private columnPais As Global.System.Data.DataColumn
        
        Private columnCadenaOriginal As Global.System.Data.DataColumn
        
        Private columnSelloDigital As Global.System.Data.DataColumn
        
        Private columnLogotipoEm As Global.System.Data.DataColumn
        
        Private columnTelefonoEm As Global.System.Data.DataColumn
        
        Private columnRFCEm As Global.System.Data.DataColumn
        
        Private columnNombreEm As Global.System.Data.DataColumn
        
        Private columnCalleEm As Global.System.Data.DataColumn
        
        Private columnNumExtEm As Global.System.Data.DataColumn
        
        Private columnNumIntEm As Global.System.Data.DataColumn
        
        Private columnColoniaEm As Global.System.Data.DataColumn
        
        Private columnLocalidadEm As Global.System.Data.DataColumn
        
        Private columnReferenciaDomEm As Global.System.Data.DataColumn
        
        Private columnMunicipioEm As Global.System.Data.DataColumn
        
        Private columnRegionEm As Global.System.Data.DataColumn
        
        Private columnPaisEm As Global.System.Data.DataColumn
        
        Private columnCodigoPostalEm As Global.System.Data.DataColumn
        
        Private columnCalleEx As Global.System.Data.DataColumn
        
        Private columnNumExtEx As Global.System.Data.DataColumn
        
        Private columnNumIntEx As Global.System.Data.DataColumn
        
        Private columnColoniaEx As Global.System.Data.DataColumn
        
        Private columnCodigoPostalEx As Global.System.Data.DataColumn
        
        Private columnReferenciaDomEx As Global.System.Data.DataColumn
        
        Private columnLocalidadEx As Global.System.Data.DataColumn
        
        Private columnMunicipioEx As Global.System.Data.DataColumn
        
        Private columnEntidadEx As Global.System.Data.DataColumn
        
        Private columnPaisEx As Global.System.Data.DataColumn
        
        Private columnFolio As Global.System.Data.DataColumn
        
        Private columnmFechaHora As Global.System.Data.DataColumn
        
        Private columnExpedida As Global.System.Data.DataColumn
        
        Private columnClave As Global.System.Data.DataColumn
        
        Private columnRuta As Global.System.Data.DataColumn
        
        Private columnMetodoPago As Global.System.Data.DataColumn
        
        Private columnVersionCFD As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DatosFiscales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumCertificadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumCertificado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnioAprobacionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnioAprobacion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RazonSocialColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRazonSocial
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RFCColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFC
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoContactoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoContacto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumExtColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumExt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumIntColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumInt
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColoniaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColonia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPostalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPostal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaDomColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenciaDom
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunicipioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunicipio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntidadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntidad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaisColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPais
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CadenaOriginalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCadenaOriginal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelloDigitalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelloDigital
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LogotipoEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLogotipoEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TelefonoEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTelefonoEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RFCEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRFCEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NombreEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombreEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalleEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumExtEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumExtEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumIntEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumIntEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColoniaEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColoniaEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalidadEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalidadEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaDomEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenciaDomEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunicipioEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunicipioEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegionEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegionEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaisEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaisEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPostalEmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPostalEm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CalleExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCalleEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumExtExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumExtEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumIntExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumIntEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColoniaExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColoniaEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodigoPostalExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodigoPostalEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReferenciaDomExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReferenciaDomEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LocalidadExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocalidadEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MunicipioExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMunicipioEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntidadExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntidadEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PaisExColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPaisEx
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolio
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property mFechaHoraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmFechaHora
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExpedidaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExpedida
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClaveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClave
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RutaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRuta
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MetodoPagoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMetodoPago
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VersionCFDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVersionCFD
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DatosFiscalesRow
            Get
                Return CType(Me.Rows(index),DatosFiscalesRow)
            End Get
        End Property
        
        Public Event DatosFiscalesRowChanging As DatosFiscalesRowChangeEventHandler
        
        Public Event DatosFiscalesRowChanged As DatosFiscalesRowChangeEventHandler
        
        Public Event DatosFiscalesRowDeleting As DatosFiscalesRowChangeEventHandler
        
        Public Event DatosFiscalesRowDeleted As DatosFiscalesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDatosFiscalesRow(ByVal row As DatosFiscalesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDatosFiscalesRow( _
                    ByVal NumCertificado As String,  _
                    ByVal Aprobacion As Integer,  _
                    ByVal AnioAprobacion As Integer,  _
                    ByVal RazonSocial As String,  _
                    ByVal RFC As String,  _
                    ByVal TelefonoContacto As String,  _
                    ByVal Calle As String,  _
                    ByVal NumExt As String,  _
                    ByVal NumInt As String,  _
                    ByVal Colonia As String,  _
                    ByVal CodigoPostal As String,  _
                    ByVal ReferenciaDom As String,  _
                    ByVal Localidad As String,  _
                    ByVal Municipio As String,  _
                    ByVal Entidad As String,  _
                    ByVal Pais As String,  _
                    ByVal CadenaOriginal As String,  _
                    ByVal SelloDigital As String,  _
                    ByVal LogotipoEm() As Byte,  _
                    ByVal TelefonoEm As String,  _
                    ByVal RFCEm As String,  _
                    ByVal NombreEm As String,  _
                    ByVal CalleEm As String,  _
                    ByVal NumExtEm As String,  _
                    ByVal NumIntEm As String,  _
                    ByVal ColoniaEm As String,  _
                    ByVal LocalidadEm As String,  _
                    ByVal ReferenciaDomEm As String,  _
                    ByVal MunicipioEm As String,  _
                    ByVal RegionEm As String,  _
                    ByVal PaisEm As String,  _
                    ByVal CodigoPostalEm As String,  _
                    ByVal CalleEx As String,  _
                    ByVal NumExtEx As String,  _
                    ByVal NumIntEx As String,  _
                    ByVal ColoniaEx As String,  _
                    ByVal CodigoPostalEx As String,  _
                    ByVal ReferenciaDomEx As String,  _
                    ByVal LocalidadEx As String,  _
                    ByVal MunicipioEx As String,  _
                    ByVal EntidadEx As String,  _
                    ByVal PaisEx As String,  _
                    ByVal Folio As String,  _
                    ByVal mFechaHora As Date,  _
                    ByVal Expedida As String,  _
                    ByVal Clave As String,  _
                    ByVal Ruta As String,  _
                    ByVal MetodoPago As String,  _
                    ByVal VersionCFD As String) As DatosFiscalesRow
            Dim rowDatosFiscalesRow As DatosFiscalesRow = CType(Me.NewRow,DatosFiscalesRow)
            Dim columnValuesArray() As Object = New Object() {NumCertificado, Aprobacion, AnioAprobacion, RazonSocial, RFC, TelefonoContacto, Calle, NumExt, NumInt, Colonia, CodigoPostal, ReferenciaDom, Localidad, Municipio, Entidad, Pais, CadenaOriginal, SelloDigital, LogotipoEm, TelefonoEm, RFCEm, NombreEm, CalleEm, NumExtEm, NumIntEm, ColoniaEm, LocalidadEm, ReferenciaDomEm, MunicipioEm, RegionEm, PaisEm, CodigoPostalEm, CalleEx, NumExtEx, NumIntEx, ColoniaEx, CodigoPostalEx, ReferenciaDomEx, LocalidadEx, MunicipioEx, EntidadEx, PaisEx, Folio, mFechaHora, Expedida, Clave, Ruta, MetodoPago, VersionCFD}
            rowDatosFiscalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDatosFiscalesRow)
            Return rowDatosFiscalesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DatosFiscalesDataTable = CType(MyBase.Clone,DatosFiscalesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DatosFiscalesDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnNumCertificado = MyBase.Columns("NumCertificado")
            Me.columnAprobacion = MyBase.Columns("Aprobacion")
            Me.columnAnioAprobacion = MyBase.Columns("AnioAprobacion")
            Me.columnRazonSocial = MyBase.Columns("RazonSocial")
            Me.columnRFC = MyBase.Columns("RFC")
            Me.columnTelefonoContacto = MyBase.Columns("TelefonoContacto")
            Me.columnCalle = MyBase.Columns("Calle")
            Me.columnNumExt = MyBase.Columns("NumExt")
            Me.columnNumInt = MyBase.Columns("NumInt")
            Me.columnColonia = MyBase.Columns("Colonia")
            Me.columnCodigoPostal = MyBase.Columns("CodigoPostal")
            Me.columnReferenciaDom = MyBase.Columns("ReferenciaDom")
            Me.columnLocalidad = MyBase.Columns("Localidad")
            Me.columnMunicipio = MyBase.Columns("Municipio")
            Me.columnEntidad = MyBase.Columns("Entidad")
            Me.columnPais = MyBase.Columns("Pais")
            Me.columnCadenaOriginal = MyBase.Columns("CadenaOriginal")
            Me.columnSelloDigital = MyBase.Columns("SelloDigital")
            Me.columnLogotipoEm = MyBase.Columns("LogotipoEm")
            Me.columnTelefonoEm = MyBase.Columns("TelefonoEm")
            Me.columnRFCEm = MyBase.Columns("RFCEm")
            Me.columnNombreEm = MyBase.Columns("NombreEm")
            Me.columnCalleEm = MyBase.Columns("CalleEm")
            Me.columnNumExtEm = MyBase.Columns("NumExtEm")
            Me.columnNumIntEm = MyBase.Columns("NumIntEm")
            Me.columnColoniaEm = MyBase.Columns("ColoniaEm")
            Me.columnLocalidadEm = MyBase.Columns("LocalidadEm")
            Me.columnReferenciaDomEm = MyBase.Columns("ReferenciaDomEm")
            Me.columnMunicipioEm = MyBase.Columns("MunicipioEm")
            Me.columnRegionEm = MyBase.Columns("RegionEm")
            Me.columnPaisEm = MyBase.Columns("PaisEm")
            Me.columnCodigoPostalEm = MyBase.Columns("CodigoPostalEm")
            Me.columnCalleEx = MyBase.Columns("CalleEx")
            Me.columnNumExtEx = MyBase.Columns("NumExtEx")
            Me.columnNumIntEx = MyBase.Columns("NumIntEx")
            Me.columnColoniaEx = MyBase.Columns("ColoniaEx")
            Me.columnCodigoPostalEx = MyBase.Columns("CodigoPostalEx")
            Me.columnReferenciaDomEx = MyBase.Columns("ReferenciaDomEx")
            Me.columnLocalidadEx = MyBase.Columns("LocalidadEx")
            Me.columnMunicipioEx = MyBase.Columns("MunicipioEx")
            Me.columnEntidadEx = MyBase.Columns("EntidadEx")
            Me.columnPaisEx = MyBase.Columns("PaisEx")
            Me.columnFolio = MyBase.Columns("Folio")
            Me.columnmFechaHora = MyBase.Columns("mFechaHora")
            Me.columnExpedida = MyBase.Columns("Expedida")
            Me.columnClave = MyBase.Columns("Clave")
            Me.columnRuta = MyBase.Columns("Ruta")
            Me.columnMetodoPago = MyBase.Columns("MetodoPago")
            Me.columnVersionCFD = MyBase.Columns("VersionCFD")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnNumCertificado = New Global.System.Data.DataColumn("NumCertificado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumCertificado)
            Me.columnAprobacion = New Global.System.Data.DataColumn("Aprobacion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAprobacion)
            Me.columnAnioAprobacion = New Global.System.Data.DataColumn("AnioAprobacion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnioAprobacion)
            Me.columnRazonSocial = New Global.System.Data.DataColumn("RazonSocial", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRazonSocial)
            Me.columnRFC = New Global.System.Data.DataColumn("RFC", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFC)
            Me.columnTelefonoContacto = New Global.System.Data.DataColumn("TelefonoContacto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoContacto)
            Me.columnCalle = New Global.System.Data.DataColumn("Calle", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalle)
            Me.columnNumExt = New Global.System.Data.DataColumn("NumExt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumExt)
            Me.columnNumInt = New Global.System.Data.DataColumn("NumInt", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumInt)
            Me.columnColonia = New Global.System.Data.DataColumn("Colonia", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColonia)
            Me.columnCodigoPostal = New Global.System.Data.DataColumn("CodigoPostal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPostal)
            Me.columnReferenciaDom = New Global.System.Data.DataColumn("ReferenciaDom", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenciaDom)
            Me.columnLocalidad = New Global.System.Data.DataColumn("Localidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalidad)
            Me.columnMunicipio = New Global.System.Data.DataColumn("Municipio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunicipio)
            Me.columnEntidad = New Global.System.Data.DataColumn("Entidad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntidad)
            Me.columnPais = New Global.System.Data.DataColumn("Pais", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPais)
            Me.columnCadenaOriginal = New Global.System.Data.DataColumn("CadenaOriginal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCadenaOriginal)
            Me.columnSelloDigital = New Global.System.Data.DataColumn("SelloDigital", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelloDigital)
            Me.columnLogotipoEm = New Global.System.Data.DataColumn("LogotipoEm", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogotipoEm)
            Me.columnTelefonoEm = New Global.System.Data.DataColumn("TelefonoEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTelefonoEm)
            Me.columnRFCEm = New Global.System.Data.DataColumn("RFCEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRFCEm)
            Me.columnNombreEm = New Global.System.Data.DataColumn("NombreEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombreEm)
            Me.columnCalleEm = New Global.System.Data.DataColumn("CalleEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalleEm)
            Me.columnNumExtEm = New Global.System.Data.DataColumn("NumExtEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumExtEm)
            Me.columnNumIntEm = New Global.System.Data.DataColumn("NumIntEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumIntEm)
            Me.columnColoniaEm = New Global.System.Data.DataColumn("ColoniaEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColoniaEm)
            Me.columnLocalidadEm = New Global.System.Data.DataColumn("LocalidadEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalidadEm)
            Me.columnReferenciaDomEm = New Global.System.Data.DataColumn("ReferenciaDomEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenciaDomEm)
            Me.columnMunicipioEm = New Global.System.Data.DataColumn("MunicipioEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunicipioEm)
            Me.columnRegionEm = New Global.System.Data.DataColumn("RegionEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegionEm)
            Me.columnPaisEm = New Global.System.Data.DataColumn("PaisEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaisEm)
            Me.columnCodigoPostalEm = New Global.System.Data.DataColumn("CodigoPostalEm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPostalEm)
            Me.columnCalleEx = New Global.System.Data.DataColumn("CalleEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCalleEx)
            Me.columnNumExtEx = New Global.System.Data.DataColumn("NumExtEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumExtEx)
            Me.columnNumIntEx = New Global.System.Data.DataColumn("NumIntEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumIntEx)
            Me.columnColoniaEx = New Global.System.Data.DataColumn("ColoniaEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColoniaEx)
            Me.columnCodigoPostalEx = New Global.System.Data.DataColumn("CodigoPostalEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodigoPostalEx)
            Me.columnReferenciaDomEx = New Global.System.Data.DataColumn("ReferenciaDomEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReferenciaDomEx)
            Me.columnLocalidadEx = New Global.System.Data.DataColumn("LocalidadEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocalidadEx)
            Me.columnMunicipioEx = New Global.System.Data.DataColumn("MunicipioEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMunicipioEx)
            Me.columnEntidadEx = New Global.System.Data.DataColumn("EntidadEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntidadEx)
            Me.columnPaisEx = New Global.System.Data.DataColumn("PaisEx", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPaisEx)
            Me.columnFolio = New Global.System.Data.DataColumn("Folio", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolio)
            Me.columnmFechaHora = New Global.System.Data.DataColumn("mFechaHora", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmFechaHora)
            Me.columnExpedida = New Global.System.Data.DataColumn("Expedida", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExpedida)
            Me.columnClave = New Global.System.Data.DataColumn("Clave", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClave)
            Me.columnRuta = New Global.System.Data.DataColumn("Ruta", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRuta)
            Me.columnMetodoPago = New Global.System.Data.DataColumn("MetodoPago", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMetodoPago)
            Me.columnVersionCFD = New Global.System.Data.DataColumn("VersionCFD", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVersionCFD)
            Me.ExtendedProperties.Add("Generator_TablePropName", "_DatosFiscales")
            Me.ExtendedProperties.Add("Generator_UserTableName", "DatosFiscales")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDatosFiscalesRow() As DatosFiscalesRow
            Return CType(Me.NewRow,DatosFiscalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DatosFiscalesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DatosFiscalesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DatosFiscalesRowChangedEvent) Is Nothing) Then
                RaiseEvent DatosFiscalesRowChanged(Me, New DatosFiscalesRowChangeEvent(CType(e.Row,DatosFiscalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DatosFiscalesRowChangingEvent) Is Nothing) Then
                RaiseEvent DatosFiscalesRowChanging(Me, New DatosFiscalesRowChangeEvent(CType(e.Row,DatosFiscalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DatosFiscalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent DatosFiscalesRowDeleted(Me, New DatosFiscalesRowChangeEvent(CType(e.Row,DatosFiscalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DatosFiscalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent DatosFiscalesRowDeleting(Me, New DatosFiscalesRowChangeEvent(CType(e.Row,DatosFiscalesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDatosFiscalesRow(ByVal row As DatosFiscalesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatosFiscales = New DatosFiscales
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DatosFiscalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class VentaAcreditadaDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnFolioEntrega As Global.System.Data.DataColumn
        
        Private columnFolioCliente As Global.System.Data.DataColumn
        
        Private columnRemision As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "VentaAcreditada"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioEntregaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolioEntrega
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FolioClienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFolioCliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As VentaAcreditadaRow
            Get
                Return CType(Me.Rows(index),VentaAcreditadaRow)
            End Get
        End Property
        
        Public Event VentaAcreditadaRowChanging As VentaAcreditadaRowChangeEventHandler
        
        Public Event VentaAcreditadaRowChanged As VentaAcreditadaRowChangeEventHandler
        
        Public Event VentaAcreditadaRowDeleting As VentaAcreditadaRowChangeEventHandler
        
        Public Event VentaAcreditadaRowDeleted As VentaAcreditadaRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddVentaAcreditadaRow(ByVal row As VentaAcreditadaRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddVentaAcreditadaRow(ByVal FolioEntrega As String, ByVal FolioCliente As String, ByVal Remision As String) As VentaAcreditadaRow
            Dim rowVentaAcreditadaRow As VentaAcreditadaRow = CType(Me.NewRow,VentaAcreditadaRow)
            Dim columnValuesArray() As Object = New Object() {FolioEntrega, FolioCliente, Remision}
            rowVentaAcreditadaRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowVentaAcreditadaRow)
            Return rowVentaAcreditadaRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As VentaAcreditadaDataTable = CType(MyBase.Clone,VentaAcreditadaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New VentaAcreditadaDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFolioEntrega = MyBase.Columns("FolioEntrega")
            Me.columnFolioCliente = MyBase.Columns("FolioCliente")
            Me.columnRemision = MyBase.Columns("Remision")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFolioEntrega = New Global.System.Data.DataColumn("FolioEntrega", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolioEntrega)
            Me.columnFolioCliente = New Global.System.Data.DataColumn("FolioCliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFolioCliente)
            Me.columnRemision = New Global.System.Data.DataColumn("Remision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemision)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewVentaAcreditadaRow() As VentaAcreditadaRow
            Return CType(Me.NewRow,VentaAcreditadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New VentaAcreditadaRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(VentaAcreditadaRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VentaAcreditadaRowChangedEvent) Is Nothing) Then
                RaiseEvent VentaAcreditadaRowChanged(Me, New VentaAcreditadaRowChangeEvent(CType(e.Row,VentaAcreditadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VentaAcreditadaRowChangingEvent) Is Nothing) Then
                RaiseEvent VentaAcreditadaRowChanging(Me, New VentaAcreditadaRowChangeEvent(CType(e.Row,VentaAcreditadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VentaAcreditadaRowDeletedEvent) Is Nothing) Then
                RaiseEvent VentaAcreditadaRowDeleted(Me, New VentaAcreditadaRowChangeEvent(CType(e.Row,VentaAcreditadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VentaAcreditadaRowDeletingEvent) Is Nothing) Then
                RaiseEvent VentaAcreditadaRowDeleting(Me, New VentaAcreditadaRowChangeEvent(CType(e.Row,VentaAcreditadaRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveVentaAcreditadaRow(ByVal row As VentaAcreditadaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatosFiscales = New DatosFiscales
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VentaAcreditadaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RegimenFiscalDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable
        
        Private columnRegimen As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RegimenFiscal"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegimenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegimen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RegimenFiscalRow
            Get
                Return CType(Me.Rows(index),RegimenFiscalRow)
            End Get
        End Property
        
        Public Event RegimenFiscalRowChanging As RegimenFiscalRowChangeEventHandler
        
        Public Event RegimenFiscalRowChanged As RegimenFiscalRowChangeEventHandler
        
        Public Event RegimenFiscalRowDeleting As RegimenFiscalRowChangeEventHandler
        
        Public Event RegimenFiscalRowDeleted As RegimenFiscalRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRegimenFiscalRow(ByVal row As RegimenFiscalRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRegimenFiscalRow(ByVal Regimen As String) As RegimenFiscalRow
            Dim rowRegimenFiscalRow As RegimenFiscalRow = CType(Me.NewRow,RegimenFiscalRow)
            Dim columnValuesArray() As Object = New Object() {Regimen}
            rowRegimenFiscalRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRegimenFiscalRow)
            Return rowRegimenFiscalRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RegimenFiscalDataTable = CType(MyBase.Clone,RegimenFiscalDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RegimenFiscalDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRegimen = MyBase.Columns("Regimen")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRegimen = New Global.System.Data.DataColumn("Regimen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegimen)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRegimenFiscalRow() As RegimenFiscalRow
            Return CType(Me.NewRow,RegimenFiscalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RegimenFiscalRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RegimenFiscalRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RegimenFiscalRowChangedEvent) Is Nothing) Then
                RaiseEvent RegimenFiscalRowChanged(Me, New RegimenFiscalRowChangeEvent(CType(e.Row,RegimenFiscalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RegimenFiscalRowChangingEvent) Is Nothing) Then
                RaiseEvent RegimenFiscalRowChanging(Me, New RegimenFiscalRowChangeEvent(CType(e.Row,RegimenFiscalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RegimenFiscalRowDeletedEvent) Is Nothing) Then
                RaiseEvent RegimenFiscalRowDeleted(Me, New RegimenFiscalRowChangeEvent(CType(e.Row,RegimenFiscalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RegimenFiscalRowDeletingEvent) Is Nothing) Then
                RaiseEvent RegimenFiscalRowDeleting(Me, New RegimenFiscalRowChangeEvent(CType(e.Row,RegimenFiscalRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRegimenFiscalRow(ByVal row As RegimenFiscalRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DatosFiscales = New DatosFiscales
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RegimenFiscalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DatosFiscalesRow
        Inherits Global.System.Data.DataRow
        
        Private tableDatosFiscales As DatosFiscalesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDatosFiscales = CType(Me.Table,DatosFiscalesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumCertificado() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumCertificadoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumCertificado' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumCertificadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Aprobacion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.AprobacionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Aprobacion' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.AprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AnioAprobacion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.AnioAprobacionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AnioAprobacion' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.AnioAprobacionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RazonSocial() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.RazonSocialColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RazonSocial' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.RazonSocialColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RFC() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.RFCColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RFC' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.RFCColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoContacto() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.TelefonoContactoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoContacto' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.TelefonoContactoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CalleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Calle' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CalleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumExt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumExtColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumExt' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumExtColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumInt() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumIntColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumInt' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumIntColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colonia() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ColoniaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Colonia' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ColoniaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPostal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CodigoPostalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPostal' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CodigoPostalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenciaDom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ReferenciaDomColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenciaDom' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ReferenciaDomColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Localidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.LocalidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Localidad' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.LocalidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Municipio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.MunicipioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Municipio' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.MunicipioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entidad() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.EntidadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Entidad' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.EntidadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pais() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.PaisColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Pais' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.PaisColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CadenaOriginal() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CadenaOriginalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CadenaOriginal' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CadenaOriginalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelloDigital() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.SelloDigitalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelloDigital' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.SelloDigitalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LogotipoEm() As Byte()
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.LogotipoEmColumn),Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LogotipoEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.LogotipoEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TelefonoEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.TelefonoEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TelefonoEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.TelefonoEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RFCEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.RFCEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RFCEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.RFCEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NombreEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NombreEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NombreEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NombreEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalleEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CalleEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalleEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CalleEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumExtEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumExtEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumExtEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumExtEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumIntEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumIntEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumIntEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumIntEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColoniaEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ColoniaEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColoniaEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ColoniaEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalidadEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.LocalidadEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocalidadEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.LocalidadEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenciaDomEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ReferenciaDomEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenciaDomEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ReferenciaDomEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipioEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.MunicipioEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MunicipioEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.MunicipioEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegionEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.RegionEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegionEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.RegionEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaisEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.PaisEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaisEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.PaisEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPostalEm() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CodigoPostalEmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPostalEm' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CodigoPostalEmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CalleEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CalleExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CalleEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CalleExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumExtEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumExtExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumExtEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumExtExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumIntEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.NumIntExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumIntEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.NumIntExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ColoniaEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ColoniaExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ColoniaEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ColoniaExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodigoPostalEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.CodigoPostalExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodigoPostalEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.CodigoPostalExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReferenciaDomEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ReferenciaDomExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReferenciaDomEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ReferenciaDomExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LocalidadEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.LocalidadExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LocalidadEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.LocalidadExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MunicipioEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.MunicipioExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MunicipioEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.MunicipioExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntidadEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.EntidadExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EntidadEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.EntidadExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PaisEx() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.PaisExColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PaisEx' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.PaisExColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Folio() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.FolioColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Folio' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.FolioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property mFechaHora() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.mFechaHoraColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'mFechaHora' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.mFechaHoraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Expedida() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ExpedidaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Expedida' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ExpedidaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clave() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.ClaveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Clave' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.ClaveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Ruta() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.RutaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Ruta' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.RutaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MetodoPago() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.MetodoPagoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MetodoPago' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.MetodoPagoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VersionCFD() As String
            Get
                Try 
                    Return CType(Me(Me.tableDatosFiscales.VersionCFDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'VersionCFD' in table 'DatosFiscales' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDatosFiscales.VersionCFDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumCertificadoNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumCertificadoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumCertificadoNull()
            Me(Me.tableDatosFiscales.NumCertificadoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAprobacionNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.AprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAprobacionNull()
            Me(Me.tableDatosFiscales.AprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnioAprobacionNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.AnioAprobacionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnioAprobacionNull()
            Me(Me.tableDatosFiscales.AnioAprobacionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRazonSocialNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.RazonSocialColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRazonSocialNull()
            Me(Me.tableDatosFiscales.RazonSocialColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRFCNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.RFCColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRFCNull()
            Me(Me.tableDatosFiscales.RFCColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoContactoNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.TelefonoContactoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoContactoNull()
            Me(Me.tableDatosFiscales.TelefonoContactoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CalleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleNull()
            Me(Me.tableDatosFiscales.CalleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumExtNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumExtColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumExtNull()
            Me(Me.tableDatosFiscales.NumExtColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumIntNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumIntColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumIntNull()
            Me(Me.tableDatosFiscales.NumIntColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColoniaNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ColoniaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColoniaNull()
            Me(Me.tableDatosFiscales.ColoniaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPostalNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CodigoPostalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPostalNull()
            Me(Me.tableDatosFiscales.CodigoPostalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaDomNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ReferenciaDomColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaDomNull()
            Me(Me.tableDatosFiscales.ReferenciaDomColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalidadNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.LocalidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalidadNull()
            Me(Me.tableDatosFiscales.LocalidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMunicipioNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.MunicipioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMunicipioNull()
            Me(Me.tableDatosFiscales.MunicipioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntidadNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.EntidadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntidadNull()
            Me(Me.tableDatosFiscales.EntidadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaisNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.PaisColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaisNull()
            Me(Me.tableDatosFiscales.PaisColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCadenaOriginalNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CadenaOriginalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCadenaOriginalNull()
            Me(Me.tableDatosFiscales.CadenaOriginalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelloDigitalNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.SelloDigitalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelloDigitalNull()
            Me(Me.tableDatosFiscales.SelloDigitalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogotipoEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.LogotipoEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogotipoEmNull()
            Me(Me.tableDatosFiscales.LogotipoEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTelefonoEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.TelefonoEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTelefonoEmNull()
            Me(Me.tableDatosFiscales.TelefonoEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRFCEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.RFCEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRFCEmNull()
            Me(Me.tableDatosFiscales.RFCEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNombreEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NombreEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNombreEmNull()
            Me(Me.tableDatosFiscales.NombreEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CalleEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleEmNull()
            Me(Me.tableDatosFiscales.CalleEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumExtEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumExtEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumExtEmNull()
            Me(Me.tableDatosFiscales.NumExtEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumIntEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumIntEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumIntEmNull()
            Me(Me.tableDatosFiscales.NumIntEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColoniaEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ColoniaEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColoniaEmNull()
            Me(Me.tableDatosFiscales.ColoniaEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalidadEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.LocalidadEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalidadEmNull()
            Me(Me.tableDatosFiscales.LocalidadEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaDomEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ReferenciaDomEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaDomEmNull()
            Me(Me.tableDatosFiscales.ReferenciaDomEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMunicipioEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.MunicipioEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMunicipioEmNull()
            Me(Me.tableDatosFiscales.MunicipioEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegionEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.RegionEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegionEmNull()
            Me(Me.tableDatosFiscales.RegionEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaisEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.PaisEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaisEmNull()
            Me(Me.tableDatosFiscales.PaisEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPostalEmNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CodigoPostalEmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPostalEmNull()
            Me(Me.tableDatosFiscales.CodigoPostalEmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCalleExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CalleExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCalleExNull()
            Me(Me.tableDatosFiscales.CalleExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumExtExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumExtExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumExtExNull()
            Me(Me.tableDatosFiscales.NumExtExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumIntExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.NumIntExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumIntExNull()
            Me(Me.tableDatosFiscales.NumIntExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsColoniaExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ColoniaExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetColoniaExNull()
            Me(Me.tableDatosFiscales.ColoniaExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodigoPostalExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.CodigoPostalExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodigoPostalExNull()
            Me(Me.tableDatosFiscales.CodigoPostalExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReferenciaDomExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ReferenciaDomExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReferenciaDomExNull()
            Me(Me.tableDatosFiscales.ReferenciaDomExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLocalidadExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.LocalidadExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLocalidadExNull()
            Me(Me.tableDatosFiscales.LocalidadExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMunicipioExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.MunicipioExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMunicipioExNull()
            Me(Me.tableDatosFiscales.MunicipioExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntidadExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.EntidadExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntidadExNull()
            Me(Me.tableDatosFiscales.EntidadExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPaisExNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.PaisExColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPaisExNull()
            Me(Me.tableDatosFiscales.PaisExColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.FolioColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioNull()
            Me(Me.tableDatosFiscales.FolioColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmFechaHoraNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.mFechaHoraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmFechaHoraNull()
            Me(Me.tableDatosFiscales.mFechaHoraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExpedidaNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ExpedidaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExpedidaNull()
            Me(Me.tableDatosFiscales.ExpedidaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClaveNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.ClaveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClaveNull()
            Me(Me.tableDatosFiscales.ClaveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRutaNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.RutaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRutaNull()
            Me(Me.tableDatosFiscales.RutaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMetodoPagoNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.MetodoPagoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMetodoPagoNull()
            Me(Me.tableDatosFiscales.MetodoPagoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionCFDNull() As Boolean
            Return Me.IsNull(Me.tableDatosFiscales.VersionCFDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionCFDNull()
            Me(Me.tableDatosFiscales.VersionCFDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VentaAcreditadaRow
        Inherits Global.System.Data.DataRow
        
        Private tableVentaAcreditada As VentaAcreditadaDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVentaAcreditada = CType(Me.Table,VentaAcreditadaDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FolioEntrega() As String
            Get
                Try 
                    Return CType(Me(Me.tableVentaAcreditada.FolioEntregaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FolioEntrega' in table 'VentaAcreditada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVentaAcreditada.FolioEntregaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FolioCliente() As String
            Get
                Try 
                    Return CType(Me(Me.tableVentaAcreditada.FolioClienteColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FolioCliente' in table 'VentaAcreditada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVentaAcreditada.FolioClienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remision() As String
            Get
                Try 
                    Return CType(Me(Me.tableVentaAcreditada.RemisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remision' in table 'VentaAcreditada' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVentaAcreditada.RemisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioEntregaNull() As Boolean
            Return Me.IsNull(Me.tableVentaAcreditada.FolioEntregaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioEntregaNull()
            Me(Me.tableVentaAcreditada.FolioEntregaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFolioClienteNull() As Boolean
            Return Me.IsNull(Me.tableVentaAcreditada.FolioClienteColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFolioClienteNull()
            Me(Me.tableVentaAcreditada.FolioClienteColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemisionNull() As Boolean
            Return Me.IsNull(Me.tableVentaAcreditada.RemisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemisionNull()
            Me(Me.tableVentaAcreditada.RemisionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RegimenFiscalRow
        Inherits Global.System.Data.DataRow
        
        Private tableRegimenFiscal As RegimenFiscalDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRegimenFiscal = CType(Me.Table,RegimenFiscalDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Regimen() As String
            Get
                Try 
                    Return CType(Me(Me.tableRegimenFiscal.RegimenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Regimen' in table 'RegimenFiscal' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRegimenFiscal.RegimenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegimenNull() As Boolean
            Return Me.IsNull(Me.tableRegimenFiscal.RegimenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegimenNull()
            Me(Me.tableRegimenFiscal.RegimenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DatosFiscalesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DatosFiscalesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DatosFiscalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DatosFiscalesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VentaAcreditadaRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As VentaAcreditadaRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VentaAcreditadaRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VentaAcreditadaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RegimenFiscalRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RegimenFiscalRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RegimenFiscalRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RegimenFiscalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
