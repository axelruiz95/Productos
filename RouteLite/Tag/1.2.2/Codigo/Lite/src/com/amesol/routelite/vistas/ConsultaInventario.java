package com.amesol.routelite.vistas;import java.util.HashMap;import android.content.DialogInterface;import android.content.Intent;import android.database.Cursor;import android.os.Bundle;import android.util.Log;import android.view.KeyEvent;import android.view.View;import android.view.View.OnClickListener;import android.widget.ImageView;import android.widget.ListView;import android.widget.TextView;import com.amesol.routelite.R;import com.amesol.routelite.actividades.Mensajes;import com.amesol.routelite.datos.basedatos.Consultas;import com.amesol.routelite.datos.generales.ISetDatos;import com.amesol.routelite.datos.utilerias.Sesion;import com.amesol.routelite.datos.utilerias.Sesion.Campo;import com.amesol.routelite.presentadores.Enumeradores;import com.amesol.routelite.presentadores.Enumeradores.RespuestaMsg;import com.amesol.routelite.presentadores.Enumeradores.TipoEnvioInfo;import com.amesol.routelite.presentadores.act.ConsultarInventario;import com.amesol.routelite.presentadores.interfaces.IConsultaInvenario;import com.amesol.routelite.presentadores.interfaces.ISeleccionActividadesVend;import com.amesol.routelite.presentadores.interfaces.IServidorComunicaciones;import com.amesol.routelite.utilerias.Generales;import com.amesol.routelite.vistas.generico.ListaInventarioAdapter;public class ConsultaInventario extends Vista implements IConsultaInvenario{	ConsultarInventario mPresenta;	ISetDatos posibleUnits;	TextView AllText;	@SuppressWarnings("deprecation")	@Override	public void onCreate(Bundle savedInstanceState)	{		super.onCreate(savedInstanceState);		setContentView(R.layout.consulta_inventario); // deshabilitarBarra(true);		setTitulo(Mensajes.get("XConsultarInventario"));		try		{			// Charge the textViews AllText = (TextView)			// Ruta ruta = (Ruta) Sesion.get(Campo.RutaActual);			// ruta.RUTClave + " - " + ruta.Descripcion			boolean inventarioRuta = false;			ISetDatos idataRuta = Consultas.ConsultasRuta.obtenerRutas();			startManagingCursor((Cursor) idataRuta.getOriginal());						while(idataRuta.moveToNext()){				//recorrer todas las rutas asignadas al vendedor para ver si esta activo el manejo de inventario				if(idataRuta.getBoolean("Inventario")){					inventarioRuta = true;				}			}			idataRuta.moveToFirst();			AllText = (TextView) findViewById(R.id.lblRoute);			AllText.setText(Mensajes.get("CRuta") + ": " + idataRuta.getString("Descripcion"));			AllText = (TextView) findViewById(R.id.lblWorkDay);			AllText.setText(Mensajes.get("XDiaTrabajo") + ": " + Generales.getFechaHoraActualStr("dd/MM/yyyy"));			AllText = (TextView) findViewById(R.id.lblUnit);			AllText.setText("U");			AllText = (TextView) findViewById(R.id.lblExistencia);			AllText.setText("E");			AllText = (TextView) findViewById(R.id.lblNoDisp);			AllText.setText("ND");						AllText = (TextView) findViewById(R.id.lblDisponible);			AllText.setText("D");						AllText = (TextView) findViewById(R.id.lblMalEstado);			AllText.setText("ME");						AllText = (TextView) findViewById(R.id.lblTotalKgsLts);			AllText.setText(Mensajes.get("PRUKgLts"));			AllText = (TextView) findViewById(R.id.lblTotalUnits);			AllText.setText(Mensajes.get("XTotalUnidadesM"));			AllText = (TextView) findViewById(R.id.lblLeyenda);			AllText.setText("U = " + Mensajes.get("XUnidad") + ", E = " + Mensajes.get("MDBExistencia") + ", D = " + Mensajes.get("INVDisponible") + ", ND = " + Mensajes.get("INVNoDisponible") + ", ME = " + Mensajes.get("CTDMalEstado"));						ImageView actualizarInv = (ImageView) findViewById(R.id.actualizar_inventario);			if(Integer.parseInt(Sesion.get(Campo.TipoModulo).toString()) != Enumeradores.TiposModulos.PREVENTA || !inventarioRuta){				//solo se muestra el boton para actualizar inventario si es preventa y esta activo el manejo de inventario				actualizarInv.setVisibility(View.GONE);			}			actualizarInv.setOnClickListener(mActualizarInventario);						obtenerInventario();		}		catch (Exception ex)		{			Log.i("elopez", ex.getMessage());		}	}		private OnClickListener mActualizarInventario = new OnClickListener(){		@Override		public void onClick(View v)		{			//llamar envio parcial antes de sincronizar inventario			HashMap<String, String> oParametros = new HashMap<String, String>();			oParametros.put("TipoEnvioInfo", String.valueOf(TipoEnvioInfo.ENVIO_PARCIAL ));			oParametros.put("Continuar", "true");			iniciarActividadConResultado(IServidorComunicaciones.class, Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES_ENVIO_PARCIAL, Enumeradores.Acciones.ACCION_ENVIAR_BD_VENDEDOR, oParametros);		}			};		public void obtenerInventarioEnLinea()	{		HashMap<String, String> parametros = new HashMap<String, String>();		String tablasActualizar = "''Inventario''";		parametros.put("Tablas", tablasActualizar);		iniciarActividadConResultado(IServidorComunicaciones.class, Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES, Enumeradores.Acciones.ACCION_RECIBIR_INFO_INVENTARIO, parametros);	}	@Override	public boolean onKeyDown(int keyCode, KeyEvent event)	{		switch (keyCode)		{			case KeyEvent.KEYCODE_BACK:				this.finish();				return true;		}		return super.onKeyDown(keyCode, event);	}	// Obligated implemented Methods -------------------------------------------	@Override	public void resultadoActividad(int requestCode, int resultCode, Intent data)	{		if ((requestCode == Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES || requestCode == Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES_ENVIO_PARCIAL) && (resultCode == Enumeradores.Resultados.RESULTADO_MAL))		{			if (data != null)			{				String mensajeError = (String) data.getExtras().getString("mensajeIniciar");				if (mensajeError != null)				{					iniciarActividad(IConsultaInvenario.class, mensajeError);					return;				}			}			iniciarActividad(IConsultaInvenario.class);		}else if ((requestCode == Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES_ENVIO_PARCIAL) && (resultCode == Enumeradores.Resultados.RESULTADO_BIEN)){			obtenerInventarioEnLinea();		}else if ((requestCode == Enumeradores.Solicitudes.SOLICITUD_SERVIDOR_COMUNICACIONES) && (resultCode == Enumeradores.Resultados.RESULTADO_BIEN)){			obtenerInventario();		}	}	@Override	public void respuestaMensaje(RespuestaMsg respuesta, int tipoMensaje)	{		// TODO Auto-generated method stub	}	@Override	public void iniciar()	{		// TODO Auto-generated method stub	}	public void obtenerInventario()	{		try		{			ListaInventario[] ltInv = Consultas.ConsultasInventario.obtenerListaInventario();			ListView inventoryList = (ListView) findViewById(R.id.lstInventory);			ListaInventarioAdapter inventoryAdapter = new ListaInventarioAdapter(this, R.layout.lista_list_inventario, ltInv);			inventoryList.setAdapter(inventoryAdapter);			float totalExistKg = 0;			float totalNotAvalibleKg = 0;			float totalAvalibleKg = 0;			float totalMalEstadoKg = 0;			for (int i = 0; i < ltInv.length; i++)			{				totalExistKg += ltInv[i].existencia * ltInv[i].kgLts;				totalNotAvalibleKg += (ltInv[i].noDisponible) * ltInv[i].kgLts;				totalAvalibleKg += (ltInv[i].disponible) * ltInv[i].kgLts;				totalMalEstadoKg += (ltInv[i].malEstado) * ltInv[i].kgLts;			}			// Total Kgs and lts			AllText = (TextView) findViewById(R.id.lblKLValue1);			AllText.setText(Float2String2Dec(totalExistKg));						AllText = (TextView) findViewById(R.id.lblKLValue2);			AllText.setText(Float2String2Dec(totalAvalibleKg));						AllText = (TextView) findViewById(R.id.lblKLValue3);			AllText.setText(Float2String2Dec(totalNotAvalibleKg));						AllText = (TextView) findViewById(R.id.lblKLValue4);			AllText.setText(Float2String2Dec(totalMalEstadoKg));			float totalExist = 0;			float totalNotAvalible = 0;			float totalAvalible = 0;			float totalMalEstado = 0;						for (int i = 0; i < ltInv.length; i++)			{				totalExist += ltInv[i].existencia;				totalNotAvalible += (ltInv[i].noDisponible);				totalAvalible += ltInv[i].disponible ;				totalMalEstado += ltInv[i].malEstado ;			}			// Units			AllText = (TextView) findViewById(R.id.lblUnitsValue1);			AllText.setText(Float2String2Dec(totalExist));			AllText = (TextView) findViewById(R.id.lblUnitsValue2);			AllText.setText(Float2String2Dec(totalAvalible));			AllText = (TextView) findViewById(R.id.lblUnitsValue3);			AllText.setText(Float2String2Dec(totalNotAvalible));						AllText = (TextView) findViewById(R.id.lblUnitsValue4);			AllText.setText(Float2String2Dec(totalMalEstado));		}		catch (Exception e)		{			// TODO Auto-generated catch block			e.printStackTrace();			// Total Kgs and lts			AllText = (TextView) findViewById(R.id.lblKLValue1);			AllText.setText(("0.00"));			AllText = (TextView) findViewById(R.id.lblKLValue2);			AllText.setText(("0.00"));			AllText = (TextView) findViewById(R.id.lblKLValue3);			AllText.setText(("0.00"));			AllText = (TextView) findViewById(R.id.lblKLValue4);			AllText.setText(("0.00"));						// Units			AllText = (TextView) findViewById(R.id.lblUnitsValue1);			AllText.setText(("0.00"));			AllText = (TextView) findViewById(R.id.lblUnitsValue2);			AllText.setText(("0.00"));			AllText = (TextView) findViewById(R.id.lblUnitsValue3);			AllText.setText(("0.00"));						AllText = (TextView) findViewById(R.id.lblUnitsValue4);			AllText.setText(("0.00"));		}	}	public String Float2String2Dec(float fnumber)	{		String currStr = Float.toString(fnumber);		if (currStr.contains("."))			currStr = ((currStr.substring(currStr.indexOf(".") + 1, currStr.length()).length()) < 2) ? currStr + "0" : currStr.substring(0, currStr.indexOf(".") + 3);		else			currStr = currStr + ".00";		return currStr;	}	public static class ListaInventario	{		public String productoClave;		public String productoNombre;		public int tipoUnidad;		public float existencia;		public float disponible;		public float noDisponible;		public float malEstado;		public float kgLts;	}	public static class ClaveUnidades	{		public String clave;		public String unidad;	}}